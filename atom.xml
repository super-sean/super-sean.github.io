<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Blog</title>
  
  <subtitle>随性随心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super-sean.github.io/"/>
  <updated>2018-08-11T05:53:56.712Z</updated>
  <id>https://super-sean.github.io/</id>
  
  <author>
    <name>Sean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring cloud stream 基于kafka的使用简析</title>
    <link href="https://super-sean.github.io/2018/08/11/spring-cloud-stream-%E5%9F%BA%E4%BA%8Ekafka%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AE%80%E6%9E%90/"/>
    <id>https://super-sean.github.io/2018/08/11/spring-cloud-stream-基于kafka的使用简析/</id>
    <published>2018-08-11T01:26:00.000Z</published>
    <updated>2018-08-11T05:53:56.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流式数据"><a href="#流式数据" class="headerlink" title="流式数据"></a>流式数据</h4><p>故名思义，即数据像开了小河里的流水般不停流动，除非水源出现问题，否则没有结束时间。<br>流式数据在行业内已经有非常多针对不同应用量级的成熟方案，这里就不加以详述。本次主要介绍spring cloud stream 基于kafka对流式数据的基本应用。而使用spring cloud stream之前，可以先理解一下spring cloud对数据流程的几个概念，分别是source（生产数据者），processor(数据加工者), sink(最终结果处理者)。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>项目基本框架</strong>:当然是基于maven构建的spring-boot最省心省力啦<br><strong>添加依赖</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于代码中的一些便捷注解 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.0&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p><strong>公共配置</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">  kafka:</span><br><span class="line">          streams:</span><br><span class="line">            binder:</span><br><span class="line">              brokers: localhost:9092</span><br><span class="line">              zk-nodes: localhost:2181 #2.0以上就不需要该配置</span><br><span class="line">              configuration:</span><br><span class="line">                default:</span><br><span class="line">                  key:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                cache:</span><br><span class="line">                  max:</span><br><span class="line">                    bytes:</span><br><span class="line">                      buffering: 0 #所有线程可以用于缓存的最大字节数,达到多少数据量之后聚合一次流中的数据，设置为0则实时聚合</span><br><span class="line">                commit:</span><br><span class="line">                  interval:</span><br><span class="line">                    ms: 1000 #版本数据确认消费时间ack</span><br></pre></td></tr></table></figure></p><p>我们来模拟用户页面访问记录流</p><h4 id="声明binding相关信息"><a href="#声明binding相关信息" class="headerlink" title="声明binding相关信息"></a>声明binding相关信息</h4><p>添加接口AnalyticsBinding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface AnalyticsBinding &#123;</span><br><span class="line">    String PAGE_VIEWS_OUT = &quot;pvout&quot;;</span><br><span class="line">    String PAGE_VIEWS_IN = &quot;pvin&quot;;</span><br><span class="line">    String PAGE_COUNT_MV = &quot;pcmv&quot;;</span><br><span class="line">    String PAGE_COUNT_OUT = &quot;pcout&quot;;</span><br><span class="line">    String PAGE_COUNT_IN = &quot;pcin&quot;;</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_VIEWS_IN)</span><br><span class="line">    KStream&lt;String,PageViewEvent&gt; pageViewsIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; pageCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; pageCountIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_VIEWS_OUT)</span><br><span class="line">    MessageChannel pageViewsOut();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>在application.yml中声明以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">     stream:</span><br><span class="line">        bindings:</span><br><span class="line">          pvout:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pvin:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pcout:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          pcin:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">        kafka:</span><br><span class="line">          streams:</span><br><span class="line">            bindings:</span><br><span class="line">              pcout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              pcin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br></pre></td></tr></table></figure></p><p>destination对应kafka中的主题。<br>serde就是serialization和deserialization，针对流中的key和value都需要指定，默认使用default中配置的内容，也可以针对主题单独设置。  </p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>创建每秒随机产生用户访问页面及停留时间的数据  </p><p>先创建事件类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class PageViewEvent &#123;</span><br><span class="line">    private String userId,page;</span><br><span class="line">    private long duration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成数据的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class PageViewEventSource implements ApplicationRunner &#123;</span><br><span class="line"></span><br><span class="line">    private  final MessageChannel pageViewsOut;</span><br><span class="line"></span><br><span class="line">    public PageViewEventSource(AnalyticsBinding binding) &#123;</span><br><span class="line">        this.pageViewsOut = binding.pageViewsOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(&quot;jlong&quot;,&quot;dyser&quot;,&quot;shacko&quot;,&quot;abilan&quot;,&quot;ooasdf&quot;,&quot;grussell&quot;);</span><br><span class="line">        List&lt;String&gt; pages = Arrays.asList(&quot;blog&quot;,&quot;sitemap&quot;,&quot;initializr&quot;,&quot;news&quot;,&quot;colophon&quot;,&quot;about&quot;);</span><br><span class="line"></span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            String rPage = pages.get(new Random().nextInt(pages.size()));</span><br><span class="line">            String rName = names.get(new Random().nextInt(names.size()));</span><br><span class="line">            PageViewEvent pageViewEvent = new PageViewEvent(rName,rPage,Math.random() &gt; .5?10:1000);</span><br><span class="line">            Message&lt;PageViewEvent&gt; message = MessageBuilder.withPayload(pageViewEvent)</span><br><span class="line">                .setHeader(KafkaHeaders.MESSAGE_KEY,pageViewEvent.getUserId().getBytes())</span><br><span class="line">                .build();</span><br><span class="line">            try &#123;</span><br><span class="line">                this.pageViewsOut.send(message);</span><br><span class="line">                log.info(&quot;sent&quot; + message.toString());</span><br><span class="line">            &#125; catch (Exception e)&#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(runnable,1,1, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="processor"><a href="#processor" class="headerlink" title="processor"></a>processor</h4><p>获取到事件数据之后基于聚合处理，创建新的数据流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class PageViewEventProcessor &#123;</span><br><span class="line">    @StreamListener</span><br><span class="line">    @SendTo(AnalyticsBinding.PAGE_COUNT_OUT)</span><br><span class="line">    public  KStream&lt;String,Long&gt; process(</span><br><span class="line">            @Input(AnalyticsBinding.PAGE_VIEWS_IN) KStream&lt;String,PageViewEvent&gt; events)&#123;</span><br><span class="line">        return events</span><br><span class="line">                .map((key,value) -&gt; new KeyValue&lt;&gt;(value.getUserId() + &quot;-&quot; + value.getPage(),&quot;0&quot;))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                //.windowedBy(TimeWindows.of(1000*60)) </span><br><span class="line">                .count(Materialized.as(AnalyticsBinding.PAGE_COUNT_MV))</span><br><span class="line">                .toStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>windowedBy可以根据时间窗口进行聚合，用法请详见文档。  </p><h4 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h4><p>获取聚合后的结果进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class PageCountSink &#123;</span><br><span class="line"></span><br><span class="line">    @StreamListener</span><br><span class="line">    public void process(@Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt; counts)&#123;</span><br><span class="line">        counts.toStream().foreach((key,value) -&gt; log.info(&quot;PCIN -----:&quot; + key + &quot;=&quot; + value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此一个从数据生产到结果消费的简单数据流处理就完成了</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>这个例子是基于spring cloud 完整的流数据处理，有source,processor,sink的概念是spring cloud data flow的设计理念，这里不展开阐述。<br>processor环节非必需的，可以只有source和sink的实现。<br>假如不需要进行流的处理，只需要消息内容，可以在@StreamListener的方法声明中不使用@Input声明，而是直接通过@StreamListener(主题名称)来进行监听，<br>方法接收消息参数使用Message<t> msg，如下:</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@StreamListener(Processor.INPUT)</span><br><span class="line">public void receive1(Message&lt;String&gt; msg)&#123;</span><br><span class="line">System.out.println(msg.getPayload()); //消息体</span><br><span class="line">Acknowledgment acknowledgment = msg.getHeaders().get(KafkaHeaders.ACKNOWLEDGMENT, Acknowledgment.class);</span><br><span class="line">if (acknowledgment != null) &#123;</span><br><span class="line">System.out.println(&quot;Acknowledgment provided&quot;);</span><br><span class="line">acknowledgment.acknowledge();//手动ack</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多流聚合"><a href="#多流聚合" class="headerlink" title="多流聚合"></a>多流聚合</h4><p>在实际应用中不只存在单流数据的处理，也经常会遇到多流聚合处理。<br>我们来添加多一种事件的实现，这里模拟销售数据。相关的实现如下  </p><p>SalesEvent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class SalesEvent &#123;</span><br><span class="line">    private String userId,goods;</span><br><span class="line">    private int amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SalesEventSource<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SalesEventSource implements ApplicationRunner &#123;</span><br><span class="line">    private  final MessageChannel salesOut;</span><br><span class="line"></span><br><span class="line">    public SalesEventSource(AnalyticsBinding binding) &#123;</span><br><span class="line">        this.salesOut = binding.salesOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(&quot;jlong&quot;,&quot;dyser&quot;,&quot;shacko&quot;,&quot;abilan&quot;,&quot;ooasdf&quot;,&quot;grussell&quot;);</span><br><span class="line">        List&lt;String&gt; goods = Arrays.asList(&quot;apple&quot;,&quot;oringe&quot;,&quot;banana&quot;,&quot;lemon&quot;,&quot;shit&quot;,&quot;book&quot;);</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            String rGoods = goods.get(new Random().nextInt(goods.size()));</span><br><span class="line">            String rName = names.get(new Random().nextInt(names.size()));</span><br><span class="line">            SalesEvent salesEvent = new SalesEvent(rName,rGoods,Math.random() &gt; .5?5:10);</span><br><span class="line">            Message&lt;SalesEvent&gt; message = MessageBuilder.withPayload(salesEvent)</span><br><span class="line">                    .setHeader(KafkaHeaders.MESSAGE_KEY,salesEvent.getUserId().getBytes())</span><br><span class="line">                    .build();</span><br><span class="line">            try &#123;</span><br><span class="line">                this.salesOut.send(message);</span><br><span class="line">                log.info(&quot;sent&quot; + message.toString());</span><br><span class="line">            &#125; catch (Exception e)&#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(runnable,1,1, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SalesEventProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SalesEventProcessor &#123;</span><br><span class="line">    @StreamListener</span><br><span class="line">    @SendTo(AnalyticsBinding.SALES_COUNT_OUT)</span><br><span class="line">    public KStream&lt;String,Long&gt; process(@Input(AnalyticsBinding.SALES_IN)KStream&lt;String,SalesEvent&gt; events)&#123;</span><br><span class="line">        return events</span><br><span class="line">                .map((key,value) -&gt; new KeyValue&lt;&gt;(value.getUserId() + &quot;-&quot; + value.getGoods(),&quot;0&quot;))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                //.windowedBy(TimeWindows.of(1000*60))</span><br><span class="line">                .count(Materialized.as(AnalyticsBinding.SALES_COUNT_MV))</span><br><span class="line">                .toStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SaleCountSink<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SaleCountSink &#123;</span><br><span class="line"></span><br><span class="line">    @StreamListener</span><br><span class="line">    public void process(@Input(AnalyticsBinding.SALES_COUNT_IN)KTable&lt;String,Long&gt; salesCounts,</span><br><span class="line">                        @Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt; pageCounts)&#123;</span><br><span class="line">        salesCounts.toStream().map((k,v) -&gt; new KeyValue&lt;&gt;(k.split(&quot;-&quot;)[0],k.split(&quot;-&quot;)[1] + &quot;-&quot; + v))</span><br><span class="line">                .join(pageCounts.toStream().map((k,v) -&gt; &#123;</span><br><span class="line">                            System.out.println(&quot;-------&quot; + k +&quot; : &quot; + v );</span><br><span class="line">                            return new KeyValue&lt;&gt;(k.split(&quot;-&quot;)[0],k.split(&quot;-&quot;)[1] + &quot;-&quot; + v);&#125;),</span><br><span class="line">                        (v1, v2) -&gt; v1 + &quot;:&quot; + v2,</span><br><span class="line">                        JoinWindows.of(10000)</span><br><span class="line">                        )</span><br><span class="line">                .foreach((k,v) -&gt; System.out.println(k+ &quot;---&quot; + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：同个应用中对同个流的监听实例只能有一个，SaleCountSink使用了@Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt;<br>与PageCountSink有冲突，要嘛把PageCountSink中的监听去掉，要嘛重命名其中一个相关的监听配置</p><p>AnalyticsBinding 完整代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public interface AnalyticsBinding &#123;</span><br><span class="line">    String PAGE_VIEWS_OUT = &quot;pvout&quot;;</span><br><span class="line">    String PAGE_VIEWS_IN = &quot;pvin&quot;;</span><br><span class="line">    String PAGE_COUNT_MV = &quot;pcmv&quot;;</span><br><span class="line">    String PAGE_COUNT_OUT = &quot;pcout&quot;;</span><br><span class="line">    String PAGE_COUNT_IN = &quot;pcin&quot;;</span><br><span class="line">    String SALES_OUT = &quot;salesout&quot;;</span><br><span class="line">    String SALES_IN = &quot;salesin&quot;;</span><br><span class="line">    String SALES_COUNT_MV = &quot;scmv&quot;;</span><br><span class="line">    String SALES_COUNT_OUT = &quot;scout&quot;;</span><br><span class="line">    String SALES_COUNT_IN = &quot;scin&quot;;</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_VIEWS_IN)</span><br><span class="line">    KStream&lt;String,PageViewEvent&gt; pageViewsIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; pageCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; pageCountIn();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Output(PAGE_VIEWS_OUT)</span><br><span class="line">    MessageChannel pageViewsOut();</span><br><span class="line"></span><br><span class="line">    @Output(SALES_OUT)</span><br><span class="line">    MessageChannel salesOut();</span><br><span class="line"></span><br><span class="line">    @Input(SALES_IN)</span><br><span class="line">    KStream&lt;String,SalesEvent&gt; salesIn();</span><br><span class="line"></span><br><span class="line">    @Output(SALES_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; salesCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(SALES_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; salesCountIn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>application.yml完整配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8388</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: input-demo</span><br><span class="line">  cloud:</span><br><span class="line">     instance-count: 1</span><br><span class="line">     instance-index: 0</span><br><span class="line">     stream:</span><br><span class="line">        bindings:</span><br><span class="line">          pvout:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pvin:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pcout:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          pcin:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">          salesout:</span><br><span class="line">            destination: sost</span><br><span class="line">            group: sost</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          salesin:</span><br><span class="line">            destination: sost</span><br><span class="line">            group: sost</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          scout:</span><br><span class="line">            destination: scst</span><br><span class="line">            group: scst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          scin:</span><br><span class="line">            destination: scst</span><br><span class="line">            group: scst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">        kafka:</span><br><span class="line">          streams:</span><br><span class="line">            binder:</span><br><span class="line">              configuration:</span><br><span class="line">                default:</span><br><span class="line">                  key:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                cache:</span><br><span class="line">                  max:</span><br><span class="line">                    bytes:</span><br><span class="line">                      buffering: 0</span><br><span class="line">                commit:</span><br><span class="line">                  interval:</span><br><span class="line">                    ms: 1000 </span><br><span class="line">              brokers: localhost:9092</span><br><span class="line">              zk-nodes: localhost:2181</span><br><span class="line">            bindings:</span><br><span class="line">              pcout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              pcin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde         </span><br><span class="line">              scout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              scin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br></pre></td></tr></table></figure></p><p>多流合并的理念是把流两两之间的key处理成一样进行join处理，join的实现方法大家可以自行阅读文档。如果是三个流以上，需要先将两个流合并之后生成一个流再与第三流合并处理。</p><h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><ul><li><a href="https://docs.spring.io/spring-cloud-dataflow/docs/1.6.0.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">spring cloud data flow</a></li><li><a href="https://docs.spring.io/spring-cloud-stream/docs/Brooklyn.RELEASE/reference/html/index.html" target="_blank" rel="noopener">spring cloud stream</a></li><li><a href="https://spring.io/blog/2018/04/04/spring-tips-spring-cloud-stream-kafka-streams" target="_blank" rel="noopener">spring cloud stream kafka streams应用官方视频讲解</a></li><li><a href="https://www.jianshu.com/p/45ba430e59f6" target="_blank" rel="noopener">KTable与KStream的关系</a></li><li><a href="http://kafka.apache.org/documentation/" target="_blank" rel="noopener">kafka官方文档</a></li><li><a href="https://www.cnblogs.com/devos/p/5616086.html" target="_blank" rel="noopener">kafka streams window的概念翻译版</a></li><li>kafka权威指南</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;流式数据&quot;&gt;&lt;a href=&quot;#流式数据&quot; class=&quot;headerlink&quot; title=&quot;流式数据&quot;&gt;&lt;/a&gt;流式数据&lt;/h4&gt;&lt;p&gt;故名思义，即数据像开了小河里的流水般不停流动，除非水源出现问题，否则没有结束时间。&lt;br&gt;流式数据在行业内已经有非常多针对不
      
    
    </summary>
    
      <category term="大数据" scheme="https://super-sean.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="实时流" scheme="https://super-sean.github.io/tags/%E5%AE%9E%E6%97%B6%E6%B5%81/"/>
    
      <category term="spring" scheme="https://super-sean.github.io/tags/spring/"/>
    
      <category term="kafka" scheme="https://super-sean.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>内存与JVM</title>
    <link href="https://super-sean.github.io/2018/07/23/%E5%86%85%E5%AD%98%E4%B8%8EJVM/"/>
    <id>https://super-sean.github.io/2018/07/23/内存与JVM/</id>
    <published>2018-07-23T15:57:00.000Z</published>
    <updated>2018-08-11T03:19:05.556Z</updated>
    
    <content type="html"><![CDATA[<p>自己一边看书一边实践一边整理下来的知识思维导向图，个人感觉能够掌握自动内存管理机制、高效并发并加以应用，理解虚拟机执行子系统、程序编译与代码优化，才可以说熟悉JVM。<br><img src="/2018/07/23/内存与JVM/内存与JVM.png" title="内存与JVM"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己一边看书一边实践一边整理下来的知识思维导向图，个人感觉能够掌握自动内存管理机制、高效并发并加以应用，理解虚拟机执行子系统、程序编译与代码优化，才可以说熟悉JVM。&lt;br&gt;&lt;img src=&quot;/2018/07/23/内存与JVM/内存与JVM.png&quot; title=&quot;内存
      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="JVM" scheme="https://super-sean.github.io/tags/JVM/"/>
    
      <category term="内存" scheme="https://super-sean.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="java基础" scheme="https://super-sean.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>zk分布式任务队列交互设计</title>
    <link href="https://super-sean.github.io/2018/07/22/zk%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    <id>https://super-sean.github.io/2018/07/22/zk分布式任务队列交互设计/</id>
    <published>2018-07-22T15:12:00.000Z</published>
    <updated>2018-08-02T04:06:17.379Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/super-sean/task-pipeline" target="_blank" rel="noopener">https://github.com/super-sean/task-pipeline</a> </p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>近来公司业务上越来越多的跨进程比较耗时计算的场景出现，想用异步通信来解决长时间资源占用及等待问题，而基于多方的探讨，不考虑采用<em>mina</em>和<em>netty</em>这种异步通信的框架，最后决定使用<strong>zookeeper</strong>来实现</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>异步进行耗时较长的复杂计算请求，可随时获取请求执行进度</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>将这种请求的发起者当作是请求任务的生产者，每个请求其实就是一个计算任务。</li><li>后端接收请求的服务就是消费者，获得请求之后进行计算，并更新计算进度。</li><li>当任务完成时，请求发起者可以通过监听任务状态回调实现自己的逻辑。</li><li>过程中，请求发起者也可以主动获取计算讲求的进度。</li></ul><h3 id="实现设计"><a href="#实现设计" class="headerlink" title="实现设计"></a>实现设计</h3><p>基于实现思路，设计zk的path结构如下<br><img src="/2018/07/22/zk分布式任务队列交互设计/zk_path设计.png" title="zk_path设计"></p><p><em>/master</em><br>为程序高可用实现预留路径  </p><p><em>/apps</em><br>为业务连接节点，底下结构为/app/node，比如你有个业务叫a,有两个业务节点b1和b2，那就有/a/b1和/a/b2 路径。由业务节点启动时注册  </p><p><em>/workers</em><br>底下结构逻辑与/apps一致，只不过节点为服务端的节点，由服务端节点启动时注册  </p><p><em>/tasks</em><br>由业务提交注册的计算任务,以业务区分目录，以app-node-timestamp格式来命名taskid,每个节点拥有params,status和result三个节点  </p><ul><li>params 为请求参数，以文本格式存储，例如可以使用json格式传输</li><li>status 为task状态，默认有submit,running,done,noworker（无计算服务）,missapp（app节点断线）,consumed（已消费），resubmit（重分配）几种状态，worker可以添加自定义中间过程状态，任务提交时默认为submit状态。</li><li>result 为初始不存在，当status变更为done时添加，内容为文本格式，例如可以使用json，包括type和value,先只支持两种，第一种为直接返回为{“type”:”content”,”value”:”something”},考虑zk单个节点的容量问题，可能返回较大数据量，使用redis作为结果缓存层，返回{“type”:”redis_key”,”value”:”one redis key”} 当然不用redis也行，当数据量更大的时候可使用其它工具，这里先选用redis</li></ul><p>history目录下为完成的任务，定时持久化清理。 </p><p><em>/assign</em><br>由系统根据业务app分配作业给worker，以node-taskid来标识作业<br>history目录下为执行完的作业，定时持久化清理</p><h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><ol><li>调度系统<br> 实现基于zk的路径交互，负责与业务和服务两端交互</li><li>业务端接口包封装<br> 对于业务端来说，只需要提交服务端接口标识，接口参数之后返回taskId,根据需要通过taskId进行结果回调监听，支持查询task状态，需要屏蔽底层操作，透明化复杂操作。  </li><li>服务端接口包封装<br> 对于服务端来说，只需要继承某个类，声明服务标识，实现监听task队列的方法，处理被推送过来的任务，并根据需要更新自定义task状态，处理完成后在方法选择返回的内容类型即可  <img src="/2018/07/22/zk分布式任务队列交互设计/模块功能概览.png" title="模块功能概览">  </li></ol><h3 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h3><h4 id="正常交互流程"><a href="#正常交互流程" class="headerlink" title="正常交互流程"></a>正常交互流程</h4><p>(由于用的uml画图工具问题，画得不是很规范，见谅…)<br>正常交互流程<br><img src="/2018/07/22/zk分布式任务队列交互设计/normal_seq.png" title="正常交互流程"><br>worker断线重新分配任务流程<br><img src="/2018/07/22/zk分布式任务队列交互设计/worker_down_seq.png" title="worker断线重新分配任务流程">  </p><h3 id="核心模块类图"><a href="#核心模块类图" class="headerlink" title="核心模块类图"></a>核心模块类图</h3><p>基本操作都抽象成名为operation的类，基于不同角色做扩展，目前情况如下<br><img src="/2018/07/22/zk分布式任务队列交互设计/operation类图关系.png" title="operation类图关系"><br>baseOperation为zk的基本操作，operation为倾向原子性业务操作，分角色扩展的operation如serverOperation为封装角色实现本身的组合操作<br>监听器主要有以下监听器实现<br><img src="/2018/07/22/zk分布式任务队列交互设计/监听器的抽象类.png" title="监听器的抽象类"><br>每个角色都是基于以上两个核心模块加以逻辑处理来实现自己的功能</p><h3 id="其它相关设计"><a href="#其它相关设计" class="headerlink" title="其它相关设计"></a>其它相关设计</h3><h4 id="Task分发策略"><a href="#Task分发策略" class="headerlink" title="Task分发策略"></a>Task分发策略</h4><p>worker每当被分发task，便权重添加1，处理完则减1<br>分发Task时选择权重最小的节点<br>若权重都一样，则选择第一个节点  </p><h4 id="server主从实现"><a href="#server主从实现" class="headerlink" title="server主从实现"></a>server主从实现</h4><p>使用curator包的LeaderLatch</p><h4 id="zk-path-acl权限管理"><a href="#zk-path-acl权限管理" class="headerlink" title="zk path acl权限管理"></a>zk path acl权限管理</h4><p>使用三个角色，tp_server,tp_worker,tp_app<br>目前没有做细粒度控制，只是tp_server创建的给另外两个角色授权，tp_worker创建的给tp_server授权，tp_app创建的给tp_server授权</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/super-sean/task-pipeline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/super-sean/task-pipeline&lt;/a&gt;
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="zookeeper" scheme="https://super-sean.github.io/tags/zookeeper/"/>
    
      <category term="分布式" scheme="https://super-sean.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="队列" scheme="https://super-sean.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
