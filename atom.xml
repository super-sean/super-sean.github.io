<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Blog</title>
  
  <subtitle>今天加油，明天继续加油</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super-sean.github.io/"/>
  <updated>2020-08-31T07:14:36.091Z</updated>
  <id>https://super-sean.github.io/</id>
  
  <author>
    <name>Sean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>企业级搜索平台搭建(一期)</title>
    <link href="https://super-sean.github.io/2020/08/28/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%90%9C%E7%B4%A2%E5%B9%B3%E5%8F%B0%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA/"/>
    <id>https://super-sean.github.io/2020/08/28/企业级搜索平台初步搭建/</id>
    <published>2020-08-28T08:29:00.000Z</published>
    <updated>2020-08-31T07:14:36.091Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="背景">背景</span></h1><p>我们公司的推荐部门本来已经有一个功能比较完整的搜索平台，但是有以下问题</p><ol><li>原推荐平台原有一套基于solr搭建的搜索平台，虽然也比较完善，但是有以下问题<ul><li>solr对聚合分析能力和聚合分析api易用性的支持相对没那么好，solr集群大了之后机器成本、运维成本相对也比较高</li><li>搜索平台非推荐核心项目，主要目的是服务内部，顺带服务业务，目前推荐平台更希望可以将搜索平台独立出去，甚至是希望有公司级别的新搜索平台可供搜索平台使用</li></ul></li><li>对业务部门来说，缺少实时性支持的搜索服务，搜索平台在中大型企业发展过程承担着重要的角色与职能<ul><li>可以为业务分片数据（分表分库）检索及简单统计提供高性能服务</li><li>可以充当业务与大数据平台、智能平台三者进行数据共享的桥梁</li><li>可以为业务提供CQRS统一解决方案提供支撑，甚至非持久性业务数据需求可以直接对接</li></ul></li><li>对大数据平台来说，搜索平台是其规划中但未实现的架构板块之一</li><li>对运维部门来说，现有搜索引擎服务，原生的管理工具不够完善，且希望可以结合业务创造更多价值</li></ol><p>由于大数据部门并没有资源可以支持新搜索平台的搭建，个人主动拉通推荐部门、数据平台部门、运维部门及业务相关负责人商讨并最终推动新搜索平台的立项及落地。</p><h1><span id="落地过程">落地过程</span></h1><p>先说一下个人在推进项目上的思路，总体如下：</p><img src="/2020/08/28/企业级搜索平台初步搭建/1.png" title="p1"><p>一般来说，首次推进事情的入口有有可能是反馈问题，也有可能是直接确定目标（被安排得明明白白的情况）。正常来说在立项后比较少会阶段回退，在立项前的阶段是有比较大的回退可能性或交叉可能性。本次是从反馈问题开始，上面的背景其实也是就是反馈问题的内容。</p><h2><span id="反馈问题">反馈问题</span></h2><p>清晰直观的抓住要点，在反馈问题上须先获得内部认可，比如你需要比较多资源需要外部支持的情况，首先得你的上级领导认可了，才有机会推进后面的环节。本次项目的反馈内容如背景介绍一样。</p><h2><span id="确定目标">确定目标</span></h2><p>计划是划分多期实现完整的搜索平台功能，而第一期的目标简单直接，快速搭建，完成mysql及hive数据源对接，有管理后台，有查询代理层。</p><h2><span id="初步技术方案">初步技术方案</span></h2><img src="/2020/08/28/企业级搜索平台初步搭建/2.png"><h3><span id="source-and-processor">source and processor</span></h3><p>对搜索平台来说，数据是从哪来的，常见数据来源一般两种来源，一种是某种数据源（source），一种是某种数据加工渠道处理后的数据(processor)，就目前公司情况来说，大部分业务对接的source可能有mysql/hive/kafka等，对接的processor可能有业务服务变更请求。</p><h3><span id="sink">sink</span></h3><p>同步的数据需要有对应的角色进行落地(sink)。正常来说，从source或者是processor都是有相应的数据同步工具（自带或第三方）可以将数据直接落地到存储层，我们还需要在这中间支持权限管理、监控告警、流量控制以及搜索引擎升级或变更等需求。<br>数量同步初始方案简单为通过现有工具进行数据来源的对接，减少启动成本。后续待大数据平台flink上线后，可转为直接使用flink，flink其实是包含了source/processor/sink为一体的，这里暂时先放在sink这一层。<br>mysql增量数量同步方案初步定为使用canal Sync es adapter，因为dba目前在使用canal。全量数据同步方案旧搜索平台用的sqoop，这里根据运维的elk组件推荐了logstash-input-jdbc，具体看运维同事选择哪种。<br>hive数据批量同步使用公司现有调度平台，直接在hive中安装es-hadoop jar包，使用外部表配置。</p><h3><span id="store-and-search">store and search</span></h3><p>数据存储搜索层，使用es 7.x</p><h4><span id="为什么要用es-为什么不是solr或者其它">为什么要用es ? 为什么不是solr或者其它?</span></h4><ol><li>基于业务需求特性，目前大部分业务对单表数据查询的场景非常多，少量简单聚合查询场景，极少数复杂聚合查询场景。</li><li>基于既有经验推荐，推荐部门的搜索平台原来的负责人表示solr在使用存在的一些问题，包括分区备份失败后需要手动触发恢复等。也表示推荐使用es。</li><li>基于搜索引擎间的比较 Solr es Hermes Sphinx Nutch LGTE，从数据量规模、oltp场景支撑及公司研发人员技术栈特性出发，直接就筛选剩下solr与es，进而参考es与solr的对比资料<ul><li>性能及特性，solr不太适合频繁变更数据，更适合落地不变的数据<ol><li>单纯对已有数据进行搜索时</li></ol></li></ul> <img src="/2020/08/28/企业级搜索平台初步搭建/image.png"><pre><code> 2. 当实时进行索引时进行查询</code></pre> <img src="/2020/08/28/企业级搜索平台初步搭建/image-2.png"><pre><code> 3. 随着数据量增加对应的查询情况</code></pre> <img src="/2020/08/28/企业级搜索平台初步搭建/image-3.png"><ul><li>社区活跃度及市场关注度。两款搜索引擎都是市场上成熟且都使用面比较广的，但是es作为更受年轻市场欢迎，各大厂都是优先选型es，如阿里、腾讯、360等。截止2019年6月，这两种产品在谷歌上的搜索趋势trend如下</li></ul></li></ol><img src="/2020/08/28/企业级搜索平台初步搭建/image-4.png"><ol start="4"><li>考虑现有支撑。相对运维部门的资源支撑，es的对接成本会比较低。</li><li>考虑非搜索引擎解决方案。与大数据平台负责人沟通过tidb及其它数据库的支持方案，tidb在数据平台之前的技术探研下，在数据检索这方面不算特别优秀，兼容了olap和oltp的支持，但是相对来说能力都不算特别突出，其它db的话基于现有资源及经验不作展开。</li></ol><h4><span id="是否一定要用es">是否一定要用es?</span></h4><p>可以看到层次划分，在数据存储搜索层往前架了类似代理这样的角色，为数据存储搜索层本身的升级及扩展预留空间，es只是作为搜索平台第一阶段的解决方案，以后可以接入更多其它技术。</p><h3><span id="service">service</span></h3><p>服务层主要包括两个方面，一方面是管理服务，一方面查询服务。</p><h4><span id="manager">manager</span></h4><p>独立的管理服务，基本功能包括 业务及数据集合(如es的index)的映射关系、基本信息和权限的管理，关联数据同步任务，审核流程及数据查询页面。高级功能包括监控告警功能，流控等。</p><h4><span id="query-service">query-service</span></h4><ol><li>查询服务对外应该提供一套标准化查询规范，使用方不应感知到存储及搜索层具体使用的是什么技术。</li><li>查询服务服务质量情况需要有监控大盘，可通过cat打点对接grafana实现。</li><li>查询服务应支持对数据集合粒度进行流控，确保服务质量。</li></ol><h3><span id="职能边界问题">职能边界问题</span></h3><h4><span id="运维部门">运维部门</span></h4><p>负责资源管理、监控告警相关功能管理以及业务对接的审批流程的最后环节</p><h4><span id="业务部门">业务部门</span></h4><p>主要协助初始版本搜索平台的搭建相关的研发工作，以及业务对接审批的前置环节</p><h4><span id="大数据平台">大数据平台</span></h4><p>待新搜索平台能够支撑至少业务基本的数据流水线运作之后，视数据平台资源情况安排交接事项，后续更多的迭代功能由大数据平台主导推进。</p><h2><span id="核心技术方案">核心技术方案</span></h2><h3><span id="对接流程">对接流程</span></h3><img src="/2020/08/28/企业级搜索平台初步搭建/dj1.png"><img src="/2020/08/28/企业级搜索平台初步搭建/dj2.png"><h3><span id="查询服务">查询服务</span></h3><p>一期主要解决以下需求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">普通数据检索，即 select ... from ... where ... order by ... limit n offset m</span><br><span class="line">简单数据聚合，即 select agg_func(xxx),.. from ... where ... (group by ...) having ... order by ... limit n offset m</span><br></pre></td></tr></table></figure><h4><span id="主流程">主流程</span></h4><img src="/2020/08/28/企业级搜索平台初步搭建/cx1.png"><h4><span id="构造查询">构造查询</span></h4><img src="/2020/08/28/企业级搜索平台初步搭建/cx2.png"><h4><span id="结果预处理">结果预处理</span></h4><p>主要是针对请求返回数据的处理，包括别名与格式化。格式化主要是针对指标的数值类型和日期类型进行支持，数值类型主要是支持浮点数小数位长度格式化，日期类型支持对长整型或字符串类型（普通及UTC格式）进行格式化，语法与正常日期格式一致，如yyyy-MM-dd HH:mm:ss。</p><h4><span id="案例">案例</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * select user_id,date(last_update_time) day,sum(total) total_sum,max(total) total_max,min(total) total_min,avg(total) total_avg,count(id) id_count</span><br><span class="line"> * from `order`</span><br><span class="line"> * group by user_id,date(last_update_time)</span><br><span class="line"> * having sum(total) &gt; 500</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void aggFiledGroupByAndHavingSimpleConditionQueryTest() throws Exception &#123;</span><br><span class="line">Query.Builder query = Query.newBuilder();</span><br><span class="line">query.setDataset(&quot;vod_trade_order&quot;);</span><br><span class="line">query.setToken(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">Field.Builder field = Field.newBuilder();</span><br><span class="line"></span><br><span class="line">field.setName(&quot;total&quot;);</span><br><span class="line">field.setAggregationType(AggregationType.SUM);</span><br><span class="line">field.setAlias(&quot;total_sum&quot;);</span><br><span class="line">query.addField(field.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;total&quot;);</span><br><span class="line">field.setAggregationType(AggregationType.MAX);</span><br><span class="line">field.setAlias(&quot;total_max&quot;);</span><br><span class="line">query.addField(field.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;total&quot;);</span><br><span class="line">field.setAggregationType(AggregationType.MIN);</span><br><span class="line">field.setAlias(&quot;total_min&quot;);</span><br><span class="line">query.addField(field.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;total&quot;);</span><br><span class="line">field.setAggregationType(AggregationType.AVG);</span><br><span class="line">field.setAlias(&quot;total_avg&quot;);</span><br><span class="line">query.addField(field.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;id&quot;);</span><br><span class="line">field.setAggregationType(AggregationType.COUNT);</span><br><span class="line">field.setAlias(&quot;id_count&quot;);</span><br><span class="line">query.addField(field.build());</span><br><span class="line"></span><br><span class="line">AggField.Builder aggField = AggField.newBuilder();</span><br><span class="line">field.setName(&quot;user_id&quot;);</span><br><span class="line">field.clearAggregationType();</span><br><span class="line">field.clearAlias();</span><br><span class="line">aggField.setField(field.build());</span><br><span class="line">aggField.setType(AggFieldType.Filed);</span><br><span class="line">query.addGroupByField(aggField.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;last_update_time&quot;);</span><br><span class="line">field.clearAggregationType();</span><br><span class="line">field.setAlias(&quot;day&quot;);</span><br><span class="line">aggField.setField(field.build());</span><br><span class="line">aggField.setType(AggFieldType.Date_Range);</span><br><span class="line">aggField.setDateAggUnit(DateAggUnit.Day);</span><br><span class="line">aggField.setInterval(1);</span><br><span class="line">query.addGroupByField(aggField.build());</span><br><span class="line"></span><br><span class="line">field.setName(&quot;total&quot;);</span><br><span class="line">field.clearAggregationType();</span><br><span class="line">field.setAlias(&quot;total_sum&quot;);</span><br><span class="line">FilterCriteria.Builder criteria = FilterCriteria.newBuilder();</span><br><span class="line">criteria.setField(field.build());</span><br><span class="line">criteria.setCompare(FilterCompare.GreaterEqual);</span><br><span class="line">criteria.addFilterCritValue(&quot;500&quot;);</span><br><span class="line"></span><br><span class="line">FilterCondition.Builder condition =FilterCondition.newBuilder();</span><br><span class="line">condition.setCriteriaFirst(criteria.build());</span><br><span class="line"></span><br><span class="line">query.setHavingCondition(condition);</span><br><span class="line">Result&lt;ResponseQuery&gt; result = service.query(query.build());</span><br><span class="line">printResult(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="注意点">注意点</span></h4><p>1 聚合查询不返回命中总数，这跟大部分搜索引擎的性能考虑相关，如有需要，根据具体业务场景需要另外查询总数。<br>2 分页必须带有排序，分页不支持跳页，由于搜索引擎限制及性能考虑，统一使用滚动分页after的方式，需要业务自管理前一页的游标。</p><h2><span id="资源计划">资源计划</span></h2><p>根据技术方案进行资源评估，预计两周完成并上线。</p><h3><span id="人员">人员</span></h3><p>开发、运维人员及大数据平台人员相关资源支持</p><h3><span id="硬件">硬件</span></h3><p>使用现有机器（额外采购需要1个月左右时间）<br>一期资源申请机器3台，以下为单台配置<br>CPU:32核<br>内存:64G<br>硬盘: 每台机器两块960G ssd盘  做raid1<br>网卡：万兆（考虑数据副本移动情况）</p><h2><span id="寻求认可">寻求认可</span></h2><p>拿着相应的技术方案及资源计划进行沟通</p><h3><span id="内部">内部</span></h3><p>部门及小组leader 沟通确认</p><h3><span id="外部">外部</span></h3><p>各依赖部门及小组leader 沟通确认</p><h2><span id="立项及项目执行">立项及项目执行</span></h2><h3><span id="正式的立项邮件">正式的立项邮件</span></h3><p>项目的正式启动需要仪式感引起项目组成员及干系人的感知及严肃对待。</p><h3><span id="项目执行">项目执行</span></h3><p>每天日报，每周周报，同步进度、问题及风险。</p><h3><span id="项目上线">项目上线</span></h3><p>最终项目顺利上线，并在生产环境回归验证通过</p><h2><span id="业务试点">业务试点</span></h2><p>在线上找了mysql + 实时数据 和 hive + 批量同步的业务场景对接。</p><h3><span id="对接过程中出现过的问题">对接过程中出现过的问题</span></h3><h4><span id="大数据量同步问题">大数据量同步问题</span></h4><h5><span id="规模">规模</span></h5><p>数据量 全量 2.3亿+数据，大小为800G左右，增量80w左右。数据存放在hive</p><h5><span id="connection-error">Connection error</span></h5><p>EsHadoopNoNodesLeftException: Connection error (check network and/or proxy settings)- all nodes failed;<br>ES初始线程线数配置是32，队列为200。看es集群的监控大盘，发现是跑满了，分配不了新的线程，导致reject了。</p><img src="/2020/08/28/企业级搜索平台初步搭建/es-q1.png">  <ul><li>线程多说明并发，说明并发处理的多，故先尝试调大hive单个map的值，调整到1G尝试map数量依然有500多个，最终调整为2G数量130多，可以接受，但是依然会触发reject。</li><li>不停调整线程和队列参数重试（每跑一次至少要20-40分钟才会出现问题，过程有点痛苦），最终调整到单机500线程，5k任务数。</li><li>经过上面两步从监控上已经没有reject的情况了，但是hive依然报这个错，所以估计是客户端超时导致，加长hive外部表连接http超时时间为10分钟，至此不报connection error。</li></ul><h5><span id="circuit_breaking_exception">circuit_breaking_exception</span></h5><p>EsHadoopRemoteException: circuit_breaking_exception: [parent] Data too large, data for [&lt;http_request&gt;] would be [29457035464/27.4gb], which is larger than the limit of [29391011840/27.3gb], real usage: [29426154328/27.4gb], new bytes reserved: [30881136/29.4mb] {“index”:{&quot;_id&quot;:“99000983254644”}}<br>解决第一个问题之后出现了由于内存不足的情况，从监控大盘上看到</p><img src="/2020/08/28/企业级搜索平台初步搭建/es-q2.png">  <p>居然忘记了大数量操作要先关闭refresh，罪过，再看一遍<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-indexing-speed.html" target="_blank" rel="noopener">es官方的建议</a>。。。<br>refresh是内存操作，关于refresh和flush在网上拿了张图，巩固下基础。。。</p><img src="/2020/08/28/企业级搜索平台初步搭建/es-q4.png"> <h4><span id="too-many-requests">Too Many Requests</span></h4><p>EsHadoopInvalidRequest: [HEAD] on [xxx] failed; server[192.168.50.252:9200] returned [429|Too Many Requests:]<br>主要是受第二点影响，关闭refresh之后就不出现了<br>其实第一点也受到refresh影响，refresh占用了部分的线程数，但是不多</p><img src="/2020/08/28/企业级搜索平台初步搭建/es-q3.png"> <h1><span id="回顾及规划">回顾及规划</span></h1><h2><span id="回顾">回顾</span></h2><p>由于一期功能比较简单，只是简单满足了数据查询要求，其实还算比较顺利，但是对比大厂的搜索平台，依然还有很长的路要走。</p><h2><span id="规划">规划</span></h2><h3><span id="功能">功能</span></h3><h4><span id="高级搜索">高级搜索</span></h4><p>目前只是实现了普通的bool查询及聚合查询场景，随着业务发展，需要支持function_score之类专业性较强的高级查询</p><h4><span id="接口配置化">接口配置化</span></h4><p>使用类似sqlBuilder的方法提供api给业务使用，从代码优雅性及效率上来说依然是有很大提升空间。可通过将查询结构体配置化的方式来解决。</p><h4><span id="flink接入">flink接入</span></h4><p>目前公司的flink刚好在试行阶段，初步与大数据平台负责人沟通过，可进行对接实验。</p><h3><span id="性能">性能</span></h3><h4><span id="分片与副本">分片与副本</span></h4><p>缺乏分片与副本的科学定制理论。<br>分片数官方建议单分片10-20亿条，20GB 到 40GB存储大小为最佳，但是事实上在业务真实情况及资源限制方面不是简单的一概而论，假设写入的qps比较高，需要适当提高分片数，但是分片太多会给es主节点带来更高的负载。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/avoid-oversharding.html" target="_blank" rel="noopener">避免过度分片</a></p><h4><span id="es数据写入">ES数据写入</span></h4><h5><span id="性能提升">性能提升</span></h5><p>目前数据同步分为各个渠道各自写入，没有统一的代理，对es的写请求缺乏全局控制的能力，es在无规划写的性能上是存在较大风险的。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-disk-usage.html" target="_blank" rel="noopener">官方推荐提升索引速度的方法</a></p><h5><span id="磁盘利用率">磁盘利用率</span></h5><p>数据写入时对占用物理空间的把控目前也是没有考虑的，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-disk-usage.html" target="_blank" rel="noopener">官方推荐提升磁盘利用率的方法</a></p><h4><span id="es数据读取">ES数据读取</span></h4><h5><span id="性能提升">性能提升</span></h5><p>目前对于查询的语法使用是比较简单的，还未有性能优化相关的考虑点。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html" target="_blank" rel="noopener">官方推荐提升查询速度的方法</a><br>在流控方面接入了公司在用的阿里的sentinel，但是目前控制粒度还比较粗</p><h4><span id="其它">其它</span></h4><p>像缓存、预热器、路由、查询偏好等相关方面的应用</p><h3><span id="高可用">高可用</span></h3><p>其实这里主要是想强调应用侧的物理隔离，利用好分片及路由的特性，ES本身官方有相应的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/high-availability.html" target="_blank" rel="noopener">高可用解决方案</a>，主要是关于弹性扩容、集群备份及跨集群副本</p><h1><span id="参考文档">参考文档</span></h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="noopener">es官方文档</a><br><a href="https://segmentfault.com/a/1190000016266836" target="_blank" rel="noopener">有赞搜索系统的架构演进</a><br><a href="https://www.cnblogs.com/cuiyubo/p/11756781.html" target="_blank" rel="noopener">基于MySQL Binlog的Elasticsearch数据同步实践-马蜂窝</a><br><a href="https://www.jianshu.com/p/fd9aef9b124b" target="_blank" rel="noopener">ES集群优化 之 海量时序数据处理</a><br><a href="https://ezlippi.com/blog/2018/04/elasticsearch-translog.html" target="_blank" rel="noopener">Elasticsearch translog文件介绍</a><br>还有一些零碎的文档没及时保留引用来源，请见谅。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;背景&quot;&gt;背景&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;我们公司的推荐部门本来已经有一个功能比较完整的搜索平台，但是有以下问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原推荐平台原有一套基于solr搭建的搜索平台，虽然也比较完善，但是有以下问题
&lt;ul&gt;
&lt;li&gt;solr对聚合
      
    
    </summary>
    
      <category term="大数据" scheme="https://super-sean.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="分布式" scheme="https://super-sean.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="实时流" scheme="https://super-sean.github.io/tags/%E5%AE%9E%E6%97%B6%E6%B5%81/"/>
    
      <category term="ETL" scheme="https://super-sean.github.io/tags/ETL/"/>
    
      <category term="搜索平台" scheme="https://super-sean.github.io/tags/%E6%90%9C%E7%B4%A2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>GIAC深圳站</title>
    <link href="https://super-sean.github.io/2020/08/14/GIAC%E6%B7%B1%E5%9C%B3%E7%AB%99/"/>
    <id>https://super-sean.github.io/2020/08/14/GIAC深圳站/</id>
    <published>2020-08-14T08:03:00.000Z</published>
    <updated>2020-08-28T08:21:15.404Z</updated>
    
    <content type="html"><![CDATA[<p>今年8月份，又有幸申请到参加GIAC互联网大会，一年参加一次互联网大会，这次现场参加架构演进、中台建设、devops专场，了解市场主流技术方向，概念理论和通用解决方案挺好的，也能了解到大厂的动向，挺好的。话不多说，献上大会所有PPT材料和个人拍的图片。</p><p><a href="https://pan.baidu.com/s/1bxWH8QmDsOoSjfsA-GO_ZQ" target="_blank" rel="noopener">ppt下载地址</a> 密码: m7il</p><img src="/2020/08/14/GIAC深圳站/1.jpg" title="p1"><p>门头照是肯定要照的</p><img src="/2020/08/14/GIAC深圳站/2.jpg" title="p2"> <p>准备开始，人超多，这次场地稍微小了一些，热门的专场都有挺多人站着听。</p><img src="/2020/08/14/GIAC深圳站/3.jpg" title="p3"> <p>参会礼包送的笔记本</p><img src="/2020/08/14/GIAC深圳站/4.jpg" title="p4"> <p>午餐的环境很酷炫</p><img src="/2020/08/14/GIAC深圳站/5.jpg" title="p5"> <p>提问问题有幸拿奖，获得角色地图一本</p><p>本次还是挺有收获的，后面准备架构演进和中台整理一下沉淀一篇文章，基于devops理解研发效能沉淀一篇文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年8月份，又有幸申请到参加GIAC互联网大会，一年参加一次互联网大会，这次现场参加架构演进、中台建设、devops专场，了解市场主流技术方向，概念理论和通用解决方案挺好的，也能了解到大厂的动向，挺好的。话不多说，献上大会所有PPT材料和个人拍的图片。&lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
      <category term="随笔" scheme="https://super-sean.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="互联网大会" scheme="https://super-sean.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>JVM G1垃圾收集器</title>
    <link href="https://super-sean.github.io/2020/05/26/JVM-G1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://super-sean.github.io/2020/05/26/JVM-G1垃圾收集器/</id>
    <published>2020-05-26T12:14:00.000Z</published>
    <updated>2020-05-31T15:46:50.800Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="背景">背景</span></h1><p>最近公司在大力推动服务容器化，而默认配套的JVM 垃圾收集器是G1，故此整理一下G1相关的知识点。</p><h1><span id="基础知识">基础知识</span></h1><h2><span id="主要步骤">主要步骤</span></h2><ul><li>初始标记(Initial Marking)</li><li>并发标记(Concurrent Marking)</li><li>最终标记(Final Marking)</li><li>筛选回收(Live Data Counting and Evacuation)<br>运行流程大致如下</li></ul><img src="/2020/05/26/JVM-G1垃圾收集器/1.png"> <p>对比下CMS流程的流程</p><img src="/2020/05/26/JVM-G1垃圾收集器/2.png"> <h2><span id="基本特性">基本特性</span></h2><p>G1在hotspot开发团队的定位就是替换CMS的收集器，与其它收集器相比，G1有如下特点：</p><ul><li><p>并行与并发<br>并行：多线程执行垃圾回收操作。<br>并发：在执行GC运作时，仍然可以通过并发的方式让java程序继续执行。</p></li><li><p>分代收集<br>年轻代与老年垃圾回收都可以由G1管理</p></li><li><p>空间整合<br>G1是基于标记-整理算法，与CMS标记-清除不同。是基于Region的概念管理内存空间，从局部来看会有点像复制算法。不用纠结于概念，最终都是意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。G1的这个特性，分配大对象时在总内存空间足够前提下，不会因为无法找到连续内存空间而触发下一次GC。</p></li><li><p>可预测的停顿<br>G1的一大优势，G1除了追求低停顿外，相比CMS还建立了可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过n毫秒。</p></li></ul><h2><span id="region内存管理">Region内存管理</span></h2><p>        上面提到Region，在G1之前其它收集器的范围都是整个新生代或者老年代，而对于G1将整个java堆划分为多个大小不相等的独立区域(Region)，虽然还保留着新告一段落和老年代的概念，但是新生代和老年代不再是物理隔离，都是一部分Region（不需要连续）的集合。<br>以往的垃圾回收器从物理划分上的模型如下:</p><img src="/2020/05/26/JVM-G1垃圾收集器/9fig1small.jpg">   <p>基于region，G1在堆内存的模型可以理解如下:</p><img src="/2020/05/26/JVM-G1垃圾收集器/fig2largeB.jpg"> <p>        G1之所以能建立停顿时间模型，是因为它跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，保证了G1在有限时间内可以获取尽可能高的收集效率。<br>        G1的Region之间的对象引用以及其它收集器中的新生代和老年代之间的对象引用，jvm都是使用RememberedSet来避免全堆扫描的。G1每个Region都有一个与之对应的RememberedSet，虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier暂时中断写操作，检查Reference引用的对象是否处于不同的Region中（拿其它收集器的分代来说就是检查是否老年代中的对象引用了新生代中的对象），如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的RememberedSet中。当内存回收时，在GC根节点的枚举范围中加入RememberedSet即可保证不对全堆扫描，也不会有遗漏。</p><h2><span id="分区模型">分区模型</span></h2><p>参考<a href="https://blog.csdn.net/coderlius/article/details/79272773" target="_blank" rel="noopener">文章</a></p><img src="/2020/05/26/JVM-G1垃圾收集器/4.jpg"> <p>G1对内存的使用以分区(Region)为单位，而对对象的分配则以卡片(Card)为单位。</p><h3><span id="巨型对象-humongous-region">巨型对象 Humongous Region</span></h3><p>一个大小达到甚至超过分区大小一半的对象称为巨型对象(Humongous Object)。当线程为巨型分配空间时，不能简单在TLAB进行分配，因为巨型对象的移动成本很高，而且有可能一个分区不能容纳巨型对象。因此，巨型对象会直接在老年代分配，所占用的连续空间称为巨型分区(Humongous Region)。G1内部做了一个优化，一旦发现没有引用指向巨型对象，则可直接在年轻代收集周期中被回收。</p><p>巨型对象会独占一个、或多个连续分区，其中第一个分区被标记为开始巨型(StartsHumongous)，相邻连续分区被标记为连续巨型(ContinuesHumongous)。由于无法享受Lab带来的优化，并且确定一片连续的内存空间需要扫描整堆，因此确定巨型对象开始位置的成本非常高，如果可以，应用程序应避免生成巨型对象。</p><h3><span id="已记忆集合-remember-set-rset">已记忆集合 Remember Set (RSet)</span></h3><p>在串行和并行收集器中，GC通过整堆扫描，来确定对象是否处于可达路径中。然而G1为了避免STW式的整堆扫描，在每个分区记录了一个已记忆集合(RSet)，内部类似一个反向指针，记录引用分区内对象的卡片索引。当要回收该分区时，通过扫描分区的RSet，来确定引用本分区内的对象是否存活，进而确定本分区内的对象存活情况。</p><p>事实上，并非所有的引用都需要记录在RSet中，如果一个分区确定需要扫描，那么无需RSet也可以无遗漏的得到引用关系。那么引用源自本分区的对象，当然不用落入RSet中；同时，G1 GC每次都会对年轻代进行整体收集，因此引用源自年轻代的对象，也不需要在RSet中记录。最后只有老年代的分区可能会有RSet记录，这些分区称为拥有RSet分区(an RSet’s owning region)。</p><h3><span id="per-region-table-prt">Per Region Table (PRT)</span></h3><p>RSet在内部使用Per Region Table(PRT)记录分区的引用情况。由于RSet的记录要占用分区的空间，如果一个分区非常&quot;受欢迎&quot;，那么RSet占用的空间会上升，从而降低分区的可用空间。G1应对这个问题采用了改变RSet的密度的方式，在PRT中将会以三种模式记录引用：</p><p>稀少：直接记录引用对象的卡片索引<br>细粒度：记录引用对象的分区索引<br>粗粒度：只记录引用情况，每个分区对应一个比特位<br>由上可知，粗粒度的PRT只是记录了引用数量，需要通过整堆扫描才能找出所有引用，因此扫描速度也是最慢的。</p><h3><span id="收集集合-cset">收集集合 CSet</span></h3><img src="/2020/05/26/JVM-G1垃圾收集器/5.jpg"><p>收集集合(CSet)代表每次GC暂停时回收的一系列目标分区。在任意一次收集暂停中，CSet所有分区都会被释放，内部存活的对象都会被转移到分配的空闲分区中。因此无论是年轻代收集，还是混合收集，工作的机制都是一致的。年轻代收集CSet只容纳年轻代分区，而混合收集会通过启发式算法，在老年代候选回收分区中，筛选出回收收益最高的分区添加到CSet中。</p><p>候选老年代分区的CSet准入条件，可以通过活跃度阈值<span style="color:red">-XX:G1MixedGCLiveThresholdPercent</span>(默认85%)进行设置，从而拦截那些回收开销巨大的对象；同时，每次混合收集可以包含候选老年代分区，可根据CSet对堆的总大小占比<span style="color:red">-XX:G1OldCSetRegionThresholdPercent</span>(默认10%)设置数量上限。</p><p>由上述可知，G1的收集都是根据CSet进行操作的，年轻代收集与混合收集没有明显的不同，最大的区别在于两种收集的触发条件。</p><h3><span id="年轻代收集集合-cset-of-young-collection">年轻代收集集合 CSet of Young Collection</span></h3><p>应用线程不断活动后，年轻代空间会被逐渐填满。当JVM分配对象到Eden区域失败(Eden区已满)时，便会触发一次STW式的年轻代收集。在年轻代收集中，Eden分区存活的对象将被拷贝到Survivor分区；原有Survivor分区存活的对象，将根据任期阈值(tenuring threshold)分别晋升到PLAB中，新的survivor分区和老年代分区。而原有的年轻代分区将被整体回收掉。</p><p>同时，年轻代收集还负责维护对象的年龄(存活次数)，辅助判断老化(tenuring)对象晋升的时候是到Survivor分区还是到老年代分区。年轻代收集首先先将晋升对象尺寸总和、对象年龄信息维护到年龄表中，再根据年龄表、Survivor尺寸、Survivor填充容量<span style="color:red">-XX:TargetSurvivorRatio</span>(默认50%)、最大任期阈值<span style="color:red">-XX:MaxTenuringThreshold</span>(默认15)，计算出一个恰当的任期阈值，凡是超过任期阈值的对象都会被晋升到老年代。</p><h3><span id="混合收集集合-cset-of-mixed-collection">混合收集集合 CSet of Mixed Collection</span></h3><p>年轻代收集不断活动后，老年代的空间也会被逐渐填充。当老年代占用空间超过整堆比IHOP阈值<span style="color:red">-XX:InitiatingHeapOccupancyPercent</span>(默认45%)时，G1就会启动一次混合垃圾收集周期。为了满足暂停目标，G1可能不能一口气将所有的候选分区收集掉，因此G1可能会产生连续多次的混合收集与应用线程交替执行，每次STW的混合收集与年轻代收集过程相类似。</p><p>为了确定包含到年轻代收集集合CSet的老年代分区，JVM通过参数混合周期的最大总次数<span style="color:red">-XX:G1MixedGCCountTarget</span>(默认8)、堆废物百分比<span style="color:red">-XX:G1HeapWastePercent</span>(默认5%)。通过候选老年代分区总数与混合周期最大总次数，确定每次包含到CSet的最小分区数量；根据堆废物百分比，当收集达到参数时，不再启动新的混合收集。而每次添加到CSet的分区，则通过计算得到的GC效率进行安排。</p><h2><span id="softreference-weakreference-和-phantomreference的区别">SoftReference 、 WeakReference 和 PhantomReference的区别</span></h2><p>讲GC日志前需要行了解引用类型的相关知识<br>参考<a href="https://www.jianshu.com/p/fdd4c16601f9" target="_blank" rel="noopener">文章</a> 直接搬过来了</p><h3><span id="javalangref包">java.lang.ref包</span></h3><img src="/2020/05/26/JVM-G1垃圾收集器/3.png"> <h3><span id="finalreference强引用">FinalReference（强引用）</span></h3><p>平时编程最长用到的是强引用如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o=new Object();   Object o1=o;</span><br></pre></td></tr></table></figure><p>第一句是在heap堆中创建新的Object对象通过o引用这个对象，第二句是通过o建立o1到new Object()这个heap堆中的对象的引用，这两个引用都是强引用. JVM 系统采用 Finalizer 来管理每个强引用对象 , 并将其被标记要清理时加入 ReferenceQueue, 并逐一调用该对象的 finalize() 方法。</p><p>但是如果通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o=null; o1=null;</span><br></pre></td></tr></table></figure><p>显式地设置o和o1为null，或超出范围，则gc认为该对象不存在引用，这时就可以收集它了。可以收集并不等于就一会被收集，什么时候收集这要取决于gc的算法，这要就带来很多不确定性。例如你就想指定一个对象，希望下次gc运行时把它收集了，那就没办法了，有了其他的三种引用就可以做到了。其他三种引用在不妨碍gc收集的情况下，可以做简单的交互。<br>heap中对象有强可及对象、软可及对象、弱可及对象、虚可及对象和不可到达对象。应用的强弱顺序是强、软、弱、和虚。对于对象是属于哪种可及的对象，由他的最强的引用决定。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String abc=new String(&quot;abc&quot;);  //1   </span><br><span class="line">SoftReference&lt;String&gt; abcSoftRef=new SoftReference&lt;String&gt;(abc);  //2   </span><br><span class="line">WeakReference&lt;String&gt; abcWeakRef = new WeakReference&lt;String&gt;(abc); //3   </span><br><span class="line">abc=null; //4   </span><br><span class="line">abcSoftRef.clear();//5</span><br></pre></td></tr></table></figure><p>上面的代码中： 第一行在heap对中创建内容为“abc”的对象，并建立abc到该对象的强引用,该对象是强可及的。 第二行和第三行分别建立对heap中对象的软引用和弱引用，此时heap中的对象仍是强可及的。 第四行之后heap中对象不再是强可及的，变成软可及的。同样第五行执行之后变成弱可及的。</p><h3><span id="softreference软引用">SoftReference(软引用)</span></h3><p>软引用是主要用于内存敏感的高速缓存。在jvm报告内存不足之前会清除所有的软引用，这样以来gc就有可能收集软可及的对象，可能解决内存吃紧问题，避免内存溢出。什么时候会被收集取决于gc的算法和gc运行时可用内存的大小。当gc决定要收集软引用是执行以下过程,以上面的abcSoftRef为例：</p><ul><li>首先将abcSoftRef的referent设置为null，不再引用heap中的new String(“abc”)对象。</li><li>将heap中的new String(“abc”)对象设置为可结束的(finalizable)。</li><li>当heap中的new String(“abc”)对象的finalize()方法被运行而且该对象占用的内存被释放， abcSoftRef被添加到它的ReferenceQueue中。<br>注:对ReferenceQueue软引用和弱引用可有可无，但是虚引用必须有，参见：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reference(T paramT, ReferenceQueue&lt;? super T&gt;paramReferenceQueue)</span><br></pre></td></tr></table></figure><p>被 Soft Reference 指到的对象，即使没有任何 Direct Reference，也不会被清除。一直要到 JVM 内存不足且没有 Direct Reference 时才会清除，SoftReference 是适合用来设计 object-cache 之用的。如此一来SoftReference 不但可以把对象 cache 起来，也不会造成内存不足的错误 （OutOfMemoryError）。<br>SR( Soft Reference)用于object-cache是非常低效率的.运行时缺少信息去决定哪些引用被清理或保持。仅适用于实现简单的对象cache。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A obj = new A();</span><br><span class="line">SoftRefenrence sr = new SoftReference(obj);</span><br><span class="line">//引用时</span><br><span class="line">if(sr!=null)&#123;</span><br><span class="line">  obj = sr.get();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  obj = new A();</span><br><span class="line">  sr = new SoftReference(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="weakreference弱引用">WeakReference（弱引用）</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String abc=new String(&quot;abc&quot;);   </span><br><span class="line">WeakReference&lt;String&gt; abcWeakRef = new WeakReference&lt;String&gt;(abc);  </span><br><span class="line">abc=null;</span><br><span class="line">System.out.println(&quot;before gc: &quot;+abcWeakRef.get());   </span><br><span class="line">System.gc();   </span><br><span class="line">System.out.println(&quot;after gc: &quot;+abcWeakRef.get());   </span><br><span class="line">运行结果:   before gc: abc   after gc: null</span><br></pre></td></tr></table></figure><p>gc收集弱可及对象的执行过程和软可及一样，只是gc不会根据内存情况来决定是不是收集该对象。<br>如果你希望能随时取得某对象的信息，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象，而不是用一般的 reference。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A obj = new A();</span><br><span class="line">WeakReference wr = new WeakReference(obj);</span><br><span class="line">obj = null;</span><br><span class="line">//等待一段时间，obj对象就会被垃圾回收</span><br><span class="line">...</span><br><span class="line">if (wr.get()==null) &#123;</span><br><span class="line">　　System.out.println(&quot;obj 已经被清除了 &quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">　　System.out.println(&quot;obj 尚未被清除，其信息是 &quot;+obj.toString());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3><span id="phantomreference虚引用">PhantomReference（虚引用）</span></h3><p>虚顾名思义就是没有的意思，建立虚引用之后通过get方法返回结果始终为null,通过源代码你会发现,虚引用通向会把引用的对象写进referent,只是get方法返回结果为null.先看一下和gc交互的过程在说一下他的作用.</p><ul><li>不把referent设置为null, 直接把heap中的new String(“abc”)对象设置为可结束的(finalizable). * 与软引用和弱引用不同, 先把PhantomRefrence对象添加到它的ReferenceQueue中.然后在释放虚可及的 对象.<br>你会发现在收集heap中的new String(“abc”)对象之前,你就可以做一些其他的事情.通过以下代码可以了解他的作用。一般作用在于跟踪垃圾回收过程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> String abc = new String(&quot;abc&quot;);   </span><br><span class="line"> System.out.println(abc.getClass() + &quot;@&quot; + abc.hashCode());   </span><br><span class="line"> final ReferenceQueue referenceQueue = new ReferenceQueue&lt;String&gt;();   </span><br><span class="line"> new Thread() &#123;   </span><br><span class="line">     public void run() &#123;   </span><br><span class="line">         while (isRun) &#123;   </span><br><span class="line">             Object o = referenceQueue.poll();   </span><br><span class="line">             if (o != null) &#123;   </span><br><span class="line">                 try &#123;   </span><br><span class="line">                     Field rereferent = Reference.class.getDeclaredField(&quot;referent&quot;);   </span><br><span class="line">                     rereferent.setAccessible(true);   </span><br><span class="line">                     Object result = rereferent.get(o);   </span><br><span class="line">                     System.out.println(&quot;gc will collect:&quot;   </span><br><span class="line">                             + result.getClass() + &quot;@&quot;   </span><br><span class="line">                             + result.hashCode());   </span><br><span class="line">                 &#125; catch (Exception e) &#123;   </span><br><span class="line"></span><br><span class="line">                     e.printStackTrace();   </span><br><span class="line">                 &#125;   </span><br><span class="line">             &#125;   </span><br><span class="line">         &#125;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;.start();   </span><br><span class="line"> PhantomReference&lt;String&gt; abcWeakRef = new PhantomReference&lt;String&gt;(abc,   </span><br><span class="line">         referenceQueue);   </span><br><span class="line"> abc = null;   </span><br><span class="line"> Thread.currentThread().sleep(3000);   </span><br><span class="line"> System.gc();   </span><br><span class="line"> Thread.currentThread().sleep(3000);   </span><br><span class="line"> isRun = false;   </span><br><span class="line"></span><br><span class="line">结果为class java.lang.String@96354   gc will collect:class java.lang.String@96354</span><br></pre></td></tr></table></figure><h3><span id="jni-weak-reference">JNI Weak Reference</span></h3><p>Jni/NDK 中弱全局引用，不会阻止GC,/跨线程，跨方法使用<br>jclass g_weak_cls</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL Java_com_createWeakRef</span><br><span class="line">(JNIEnv * env, jobject jobj) &#123;</span><br><span class="line">    jclass cls_string = (*env)-&gt;FindClass(env, &quot;java/lang/String&quot;);</span><br><span class="line">    g_weak_cls = (*env)-&gt;NewWeakGlobalRef(env, cls_string);</span><br><span class="line">    return g_weak_cls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="日志分析">日志分析</span></h1><p>参考<a href="https://blogs.oracle.com/poonam/understanding-g1-gc-logs" target="_blank" rel="noopener">文章1</a><br>参考<a href="https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All/" target="_blank" rel="noopener">文章2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G1 GC uses a marking algorithm called Snapshot-At-The-Beginning (SATB) that takes a logical snapshot of the set of live objects in </span><br><span class="line">the heap at the ‘beginning’ of the marking cycle. This algorithm uses a pre-write barrier to record and mark the objects that are </span><br><span class="line">a part of the logical snapshot</span><br></pre></td></tr></table></figure><p>第一行日志会有几种情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:08.926+0800: 27.749:[GC pause (young), 0.15877971 secs]</span><br></pre></td></tr></table></figure><p>最常见的，27.749是jvm进程启动后经历的时间，标明了 GC pause (young)，一次清理停顿（Evacuation Pause）开始时间及消耗时间，只会清理eden和survivor相关的region</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:08.926+0800: 27.749:[GC pause (mixed), 0.32714353 secs]</span><br></pre></td></tr></table></figure><p>清理停顿（Evacuation Pause）有时也会是Mix类型，mix类型的话是会把老年代相关的region也包含进来进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:08.926+0800: 27.749: [GC pause (young) (initial-mark)</span><br></pre></td></tr></table></figure><p>(initial-mark) 说明是发生在Young GC，初始标记阶段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:08.966+0800: 27.789: [SoftReference, 0 refs, 0.1215730 secs]</span><br><span class="line">2020-05-26T21:17:09.087+0800: 27.911: [WeakReference, 80 refs, 0.0008870 secs]</span><br><span class="line">2020-05-26T21:17:09.088+0800: 27.912: [FinalReference, 2394 refs, 0.0032540 secs]</span><br><span class="line">2020-05-26T21:17:09.091+0800: 27.915: [PhantomReference, 6 refs, 0.0010320 secs]</span><br><span class="line">2020-05-26T21:17:09.092+0800: 27.916: [JNI Weak Reference, 0.0008020 secs], 0.1689180 secs]</span><br></pre></td></tr></table></figure><p>SoftReference/WeakReference/FinalReference/PhantomReference/JNI Weak Reference 对应的是各种引用的数量，以及清理所用的时长，是参数  -XX:+PrintReferenceGC 的结果</p><p>看下这环节的相关子任务情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Parallel Time: 37.6 ms, GC Workers: 12]</span><br><span class="line"> [GC Worker Start (ms):  27749.2  27749.3  27749.3  27749.3  27749.3  27749.4  27749.4  27749.4  27749.4  27749.4  27749.5  27749.5</span><br><span class="line">    Min: 27749.2, Avg: 27749.4, Max: 27749.5, Diff: 0.3]</span><br></pre></td></tr></table></figure><p>Parallel Time – 是并行GC worker线程运行消耗的整体时间<br>GC WORKERS - GC worker线程个数<br>Worker Start – 并行GC的各个工作线程(workers)启动时的时间戳(Timestamp)，距离程序启动来说<br>日志是根据 thread id 排序,并且每条记录都是一致的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Ext Root Scanning (ms):  26.2  26.6  3.6  25.7  25.8  3.8  26.4  27.1  27.1  2.0  3.7  25.1</span><br><span class="line"> Min: 2.0, Avg: 18.6, Max: 27.1, Diff: 25.1, Sum: 223.1]</span><br></pre></td></tr></table></figure><p>External root scanning - 扫描外部根花费的时间，包括globals，registers,线程栈和虚拟机数据结构 ，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Code Root Marking (ms):  0.0  0.0  0.0  0.9  0.2  0.4  0.0  0.0  0.0  0.0  0.0  0.0</span><br><span class="line"> Min: 0.0, Avg: 0.1, Max: 0.9, Diff: 0.9, Sum: 1.5]</span><br></pre></td></tr></table></figure><p><span style="color:red">还未找到资料</span> 按字面理解应该是代码根路径标识。code root指的是经过JIT编译后的代码里，引用了heap中的对象。引用关系保存在RSet中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Update RS (ms):  0.0  0.8  0.3  1.3  1.6  1.0  1.0  0.3  0.6  2.2  0.0  1.4</span><br><span class="line"> Min: 0.0, Avg: 0.9, Max: 2.2, Diff: 2.2, Sum: 10.6]</span><br></pre></td></tr></table></figure><p>Update Remembered Set - rs是用于保存访问堆region的指针的引用轨迹的数据结构。赋值线程保持更新对象图因此可以保持引用指向指定的region。堆通常可以使用对象图（object graph）的方式来描述，它一般是一个有向图（directed graph），图的节点（node）是堆中的对象，有向边是对象之间的引用。用于保存这些引用变化的缓冲区叫更新缓冲区（Update Buffers）。Update RS 子任务主要是会访问这些更新缓冲区（不支持并发访问），并更新所有region相应的RS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Processed Buffers:  1  8  2  5  1  10  3  3  1  1  0  3</span><br><span class="line">        Min: 0, Avg: 3.2, Max: 10, Diff: 10, Sum: 38]</span><br></pre></td></tr></table></figure><p>每个worker线程处理的Update Buffers的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Scan RS (ms):  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0</span><br><span class="line"> Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2]</span><br></pre></td></tr></table></figure><p>每个线程查找指向 Remembered Set 的指针(pointers)的时间。RS中保存着指向region的引用指针集合称为卡片(cards)，这个阶段就是扫描卡片，卡片寻找所有Region集合(all the<br>regions of the collection set)的指针引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Code Root Scanning (ms):  0.0  0.1  0.0  0.0  0.0  0.1  0.0  0.0  0.0  0.0  0.0  0.0</span><br><span class="line"> Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.2]</span><br></pre></td></tr></table></figure><p>扫描code root耗时。code root指的是经过JIT编译后的代码里，引用了heap中的对象。引用关系保存在RSet中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Object Copy (ms):  10.9  9.7  33.3  9.2  9.5  31.7  9.7  9.7  9.3  32.8  33.3  10.4</span><br><span class="line"> Min: 9.2, Avg: 17.5, Max: 33.3, Diff: 24.2, Sum: 209.4]</span><br></pre></td></tr></table></figure><p>Object copy – 每个独立的线程在拷贝和转移对象时所消耗的时间.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Termination (ms):  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0</span><br><span class="line"> Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2]</span><br><span class="line">   [Termination Attempts:  1  1  1  1  1  1  1  1  1  1  1  1</span><br><span class="line">    Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 12]</span><br></pre></td></tr></table></figure><p>Termination time - 当worker线程完成了自己那部分对象的复制和扫描,就进入终止协议(termination protocol)。它查找未完成的工作(looks for work to steal), 一旦它完成就会再进入终止协议。 终止尝试记录(Termination attempt counts)所有查找工作的尝试次数(attempts to steal work).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[GC Worker Other (ms):  0.1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.1  0.0  0.0  0.0</span><br><span class="line"> Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.5]</span><br></pre></td></tr></table></figure><p>GC worker other – 每个GC线程中不能归属到之前列出的worker阶段的其他时间. 这个值应该很低. 有可能会有很高的值,是由于JVM的其他部分的瓶颈引起的(例如在分层[Tiered]代码缓存[Code Cache]占有率的增加)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[GC Worker Total (ms):  37.4  37.2  37.2  37.2  37.2  37.1  37.1  37.1  37.2  37.0  37.0  37.0</span><br><span class="line"> Min: 37.0, Avg: 37.1, Max: 37.4, Diff: 0.4, Sum: 445.7]</span><br></pre></td></tr></table></figure><p>每个GC worker线程耗时总时长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[GC Worker End (ms):  27786.6  27786.5  27786.5  27786.5  27786.5  27786.5  27786.5  27786.5  27786.6  27786.5  27786.5  27786.5</span><br><span class="line"> Min: 27786.5, Avg: 27786.5, Max: 27786.6, Diff: 0.1]</span><br></pre></td></tr></table></figure><p>GC worker end time – 独立的 GC worker 停止时的时间戳.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Code Root Fixup: 0.2 ms]   </span><br><span class="line">[Code Root Migration: 0.2 ms]</span><br></pre></td></tr></table></figure><p>清理用于管理并行处理的相关数据及其它过程相关数据的阶段，这个阶段一般都得比较短，得接近于0才比较正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Clear CT: 0.4 ms]</span><br></pre></td></tr></table></figure><p>清理 RSet 关联的 Card Table(CT)的GC worker相关线程扫描元数据所耗费的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Other: 130.5 ms]</span><br><span class="line">   [Choose CSet: 0.0 ms]</span><br><span class="line">   [Ref Proc: 129.6 ms]</span><br><span class="line">   [Ref Enq: 0.3 ms]</span><br><span class="line">   [Redirty Cards: 0.1 ms]</span><br><span class="line">   [Humongous Register: 0.0 ms]</span><br><span class="line">   [Humongous Reclaim: 0.0 ms]</span><br><span class="line">   [Free CSet: 0.1 ms]</span><br></pre></td></tr></table></figure><p>Choose CSet（Choose Collection Set） - 垃圾回收周期中，在CSet中回收Region集合的阶段（the sets of regions in the CSet）.这个阶段会暂停相关CSet中所有存活数据的回收/迁移动作。这里的时间是指停止添加相关region集合到CSet所耗费的时间。<br>Ref Proc（Reference Processing）- 优先回收阶段对上面所提的引用不包括强引用的处理（排列前置处理）<br>Ref Enq（Reference En-queuing） - 在引用列表中排列引用<br>Redirty Cards：重新脏化卡片。排队引用可能会更新RSet，所以需要对关联的Card重新脏化(Redirty Cards)。<br>Humongous Register、Reclaim 主要是对巨型对象回收的信息，youngGC阶段会对RSet中有引用的短命的巨型对象进行回收，巨型对象会直接回收而不需要进行转移（转移代价巨大，也没必要）<br>Free CSet - 释放刚刚回收的Region集合的空间，包括它们的RSet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  [Eden: 112.0M(112.0M)-&gt;0.0B(84.0M) Survivors: 20.0M-&gt;20.0M Heap: 204.6M(256.0M)-&gt;123.0M(256.0M)]</span><br><span class="line">[Times: user=0.25 sys=0.03, real=0.17 secs]</span><br></pre></td></tr></table></figure><p>Eden: 使用量(eden区总量)-&gt;回收后使用量(eden区总量)     Survivors: 回收前使用量-&gt;回收后使用量    Heap: 回收前使用量(Heap总量)-&gt;回收后使用量(Heap总量)，可以看出这个Heap 总量就是配置的量,Times三个指标的概念在另外一篇文章已经讲过了</p><p>** initial mark 阶段主要是标识 相关roots，会stw **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:09.095+0800: 27.918: [GC concurrent-root-region-scan-start]</span><br><span class="line">2020-05-26T21:17:09.102+0800: 27.926: [GC concurrent-root-region-scan-end, 0.0074660 secs]</span><br></pre></td></tr></table></figure><p>region根扫描，如果标识是young，会将initial mark扫描出来的survivor相关的region的内容转移到老年代，这个阶段是并行的，在下次年代代回收开始前会保证这个阶段先完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:09.102+0800: 27.926: [GC concurrent-mark-start]</span><br><span class="line">2020-05-26T21:17:09.157+0800: 27.980: [GC concurrent-mark-end, 0.0544330 secs]</span><br></pre></td></tr></table></figure><p>扫描堆中可触达的存活对象。这个阶段是可被中断的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:09.157+0800: 27.981: [GC remark </span><br><span class="line">2020-05-26T21:17:09.158+0800: 27.982: [GC ref-proc</span><br><span class="line">    2020-05-26T21:17:09.158+0800: 27.982: [SoftReference, 0 refs, 0.0086570 secs]</span><br><span class="line">        2020-05-26T21:17:09.167+0800: 27.990: [WeakReference, 24 refs, 0.0024750 secs]</span><br><span class="line">        2020-05-26T21:17:09.169+0800: 27.993: [FinalReference, 1 refs, 0.0037370 secs]</span><br><span class="line">        2020-05-26T21:17:09.173+0800: 27.997: [PhantomReference, 1 refs, 0.0025040 secs]</span><br><span class="line">        2020-05-26T21:17:09.176+0800: 27.999: [JNI Weak Reference, 0.0029650 secs], 0.0209600 secs], 0.0293260 secs]</span><br><span class="line"> [Times: user=0.14 sys=0.00, real=0.03 secs]</span><br></pre></td></tr></table></figure><p>remark阶段，stw，将SATB 还存留的缓冲区清理干净，追踪还没访问到的存活对象，也处理相关引用对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-05-26T21:17:09.187+0800: 28.010: [GC cleanup 124M-&gt;80M(256M), 0.0015900 secs]</span><br><span class="line"> [Times: user=0.00 sys=0.01, real=0.00 secs] </span><br><span class="line">2020-05-26T21:17:09.189+0800: 28.012: [GC concurrent-cleanup-start]</span><br><span class="line">2020-05-26T21:17:09.189+0800: 28.012: [GC concurrent-cleanup-end, 0.0001930 secs]</span><br></pre></td></tr></table></figure><p>cleanup阶段，部分stw，当进行存活对象统计和清除RSet时会stw。部分并发，当G1 GC重置及返回空的region给空闲列表时为并发的。</p><h1><span id="参数">参数</span></h1><p>核心参数</p><ul><li>-XX:+UseG1GC  使用 G1 (Garbage First) 垃圾收集器</li><li>-XX:G1ReservePercent=n 设置堆内存保留为假天花板的总量,以降低提升失败的可能性. 默认值是 10.</li><li>-XX:G1HeapRegionSize=n 此参数可以指定每个region的大小. 默认值将根据 heap size 算出最优解. 最小值为 1Mb, 最大值为 32Mb.</li><li>-XX:G1NewSizePercent 新生代最小值，默认值5%</li><li>-XX:G1MaxNewSizePercent 新生代最大值，默认值60%</li><li>-XX:G1MixedGCLiveThresholdPercent 候选老年代分区的CSet准入条件,分区模型有说，拦截那些回收开销巨大的对象，默认85%</li><li>-XX:G1OldCSetRegionThresholdPercent 每次混合收集可以包含候选老年代分区，可根据CSet对堆的总大小占比，默认10% 分区模型有说</li><li>-XX:G1MixedGCCountTarget JVM通过参数混合周期的最大总次数，默认8 分区模型有说</li><li>-XX:G1HeapWastePercent 堆废物百分比，默认5% 分区模型有说</li></ul><p>从网上抄了比较全的参数列表下来，虽然之前CMS GC调优的时候也整理过，貌似不是很很全，配合着看.<a href="/2019/05/19/GC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%97%E8%B7%AF/">GC问题解决的那些套路</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">-server    指定是server 模式</span><br><span class="line">-XX:+UseG1GC  使用 G1 (Garbage First) 垃圾收集器</span><br><span class="line">-XX:MaxGCPauseMillis=n  设置最大GC停顿时间(GC pause time)指标(target)。这是一个软性指标(soft goal), JVM 会尽量去达成这个目标.</span><br><span class="line">-XX:+PrintGC  输出GC日志</span><br><span class="line">-XX:+PrintGCDetails  输出GC的详细日志</span><br><span class="line">-XX:+PrintGCTimeStamps  输出GC的时间戳（以基准时间的形式）</span><br><span class="line">-XX:+PrintGCDateStamps  输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）</span><br><span class="line">-XX:+PrintHeapAtGC  在进行GC的前后打印出堆的信息</span><br><span class="line">-Xloggc:/home/jamin/logs/gc.log                  日志文件的输出路径</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError    如果出现OutOfMemoryError 打印堆的快照</span><br><span class="line">-XX:TargetSurvivorRatio Survivor填充容量，默认50%</span><br><span class="line">-XX:MaxTenuringThreshold=n 提升年老代的最大临界值(tenuring threshold). 默认值为 15.</span><br><span class="line">-XX:ParallelGCThreads=n 设置垃圾收集器在并行阶段使用的线程数,默认值随JVM运行的平台不同而不同.</span><br><span class="line">-XX:ConcGCThreads=n 并发垃圾收集器使用的线程数量. 默认值随JVM运行的平台不同而不同.</span><br><span class="line">-XX:G1ReservePercent=n 设置堆内存保留为假天花板的总量,以降低提升失败的可能性. 默认值是 10.</span><br><span class="line">-XX:G1HeapRegionSize=n 此参数可以指定每个region的大小. 默认值将根据 heap size 算出最优解. 最小值为 1Mb, 最大值为 32Mb.</span><br><span class="line">-XX:G1NewSizePercent 新生代最小值，默认值5%</span><br><span class="line">-XX:G1MaxNewSizePercent 新生代最大值，默认值60%</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent=n</span><br><span class="line">启动并发GC周期时的堆内存占用百分比. G1垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示&quot;一直执行GC循环&quot;. </span><br><span class="line">默认值为 45.</span><br><span class="line"></span><br><span class="line">-XX:+AlwaysPreTouch      系统不会真正分配内存给jvm，而是在使用的时候才分配，设置此参数后JVM就会先访问所有分配给它的内存,</span><br><span class="line">让操作系统把内存真正的分配给JVM.后续JVM就可以顺畅的访问内存了。</span><br><span class="line">-XX:GCLogFileSize=31457280           GC log 文件大小</span><br><span class="line">-XX:+UseGCLogFileRotation  打开或关闭GC日志滚动记录功能，要求必须设置 -Xloggc参数</span><br><span class="line">-XX:NumberOfGCLogFiles=5              设置滚动日志文件的个数，必须大于1。</span><br><span class="line">日志文件命名策略是，&lt;filename&gt;.0, &lt;filename&gt;.1, ..., &lt;filename&gt;.n-1，其中n是该参数的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-XX:InitialHeapSize=268435456     初始堆大小</span><br><span class="line">-XX:MaxDirectMemorySize=16106127360  使用直接内存大小</span><br><span class="line">-XX:MaxHeapSize=268435456         最大堆大小      </span><br><span class="line">-XX:MaxNewSize=134217728  新生代最大大小</span><br><span class="line">-XX:NewSize=134217728  新生代初始大小</span><br><span class="line">-XX:-OmitStackTraceInFastThrow  强制要求JVM始终抛出含堆栈的异常，编译优化后抛出的异常是没有堆栈信息的。（注意前面是 - 号）</span><br><span class="line">-XX:+PrintAdaptiveSizePolicy  打印自适应收集的大小。默认关闭。</span><br><span class="line">-XX:+PrintGCApplicationStoppedTime      打印gc一共停顿了多长时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=0           </span><br><span class="line">软连接对象并且可达，在最后一次被引用后将保持存活一段时间。默认值是堆中每空闲兆字节生存期的一秒钟</span><br><span class="line"></span><br><span class="line">-XX:-UseBiasedLocking  禁用偏向锁（存在大量锁对象的创建并高度并发的环境下禁用偏向锁能够带来一定的性能优化）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-XX:LargePageSizeInBytes=10m   内存分页大小调整</span><br><span class="line">-XX:-UseLargePages 启用大内存页支持（JDK是在1.5 update5以前的需要加这个参数）</span><br><span class="line">-XX:+UseCompressedClassPointers  启用压缩类的指针</span><br><span class="line">-XX:+UseCompressedOops </span><br><span class="line">启用压缩普通对象指针（Oop=普通对象指针,64位机器指针会比32位占用的多，因为寻址更宽了）     </span><br><span class="line">可以让跑在64位平台下的JVM，不需要因为更宽的寻址，而付出Heap容量损失的代价。不过，它的实现方式是在机器码中植入压缩与解压指令，可能会给JVM增加额外的开销。</span><br></pre></td></tr></table></figure><h1><span id="g1-gc调优">G1 GC调优</span></h1><p>参考之前写的文章<a href="/2019/05/19/GC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%97%E8%B7%AF/">GC问题解决的那些套路</a>  对比CMS GC的优化来看G1 GC调优注意点。  参考<a href="https://docs.oracle.com/javase/9/gctuning/garbage-first-garbage-collector-tuning.htm#JSGCT-GUID-90E30ACA-8040-432E-B3A0-1E0440AB556A" target="_blank" rel="noopener">oracle官网</a>、<a href="https://blog.csdn.net/lijingyao8206/article/details/80566384?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">文章</a></p><h2><span id="年轻代调优">年轻代调优</span></h2><p>因为G1 GC是启发式算法，会动态调整年轻代的空间大小。目标也就是为了达到接近预期的暂停时间。年轻代调优中比较重要的就是对暂停时间的处理。一般都是根据MaxGCPauseMillis以及年轻代占比G1NewSizePercent、G1MaxNewSizePercent，结合应用的特点和GC数据进行接近期望pause time的调整。为了能观察到详细的暂停时间信息，可以添加调试的启动参数 <strong>-XX:+PrintAdaptiveSizePolicy</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">26.139: [GC pause (G1 Evacuation Pause) (young) 26.139: [G1Ergonomics (CSet Construction) </span><br><span class="line">start choosing CSet, _pending_cards: 3484, predicted base time: 5.51 ms, remaining time: 194.49 ms, target pause time: 200.00 ms]</span><br><span class="line"> 26.139: [G1Ergonomics (CSet Construction) </span><br><span class="line"> add young regions to CSet, eden: 54 regions, survivors: 9 regions, predicted young region time: 5.98 ms]</span><br><span class="line"> 26.139: [G1Ergonomics (CSet Construction) </span><br><span class="line"> finish choosing CSet, eden: 54 regions, survivors: 9 regions, old: 0 regions, predicted pause time: 11.49 ms, </span><br><span class="line"> target pause time: 200.00 ms], 0.0163685 secs]</span><br></pre></td></tr></table></figure><p>target也即目标是200ms,实际的pause time是16ms。远远小于目标暂停时间。并且再CSet中的分区数是“eden: 54 regions, survivors: 9 regions”，可以适当增加CSet中的年轻代分区,也可以适当缩短暂停时间，让实际值和期望值不断接近。</p><h2><span id="并发标记和mixgc-调优">并发标记和MixGC 调优</span></h2><p>InitiatingHeapOccupancyPercent就是触发并发标记的一个决定阀值。当Java堆空间占用到45%便开启并发周期。并发标记的初始标记阶段伴随着一次YoungGC的暂停。会看到如下log记录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-26T19:50:57.256-0800: 78.480: [GC pause (G1 Evacuation Pause) (young) (initial-mark), 0.0076560 secs]</span><br></pre></td></tr></table></figure><p>IHOP如果阀值设置过高，可能会遇到转移失败的风险，比如对象进行转移时空间不足。如果阀值设置过低，就会使标记周期运行过于频繁，并且有可能混合收集期回收不到空间。<br>IHOP值如果设置合理，但是在并发周期时间过长时，可以尝试增加并发线程数，调高ConcGCThreads。</p><h2><span id="引用处理">引用处理</span></h2><p>G1 GC对于虚引用、弱引用、软引用的处理会比一般对象多一些收集任务。如果在引用处理占用了很长时间，需要更进一步排查。<strong>-XX:+PrintReferenceGC</strong>打印更详细的引用计数信息。一般在Ref Proc时间超过GC暂停时间的10%时就要关注。<br>如果SoftReference过多，会有频繁的老年代收集。-XX:SoftRefLRUPolicyMSPerMB参数，可以指定每兆堆空闲空间的软引用的存活时间，默认值是1000，也就是1秒。可以调低这个参数来触发更早的回收软引用。如果调高的话会有更多的存活数据，可能在GC后堆占用空间比会增加。<br>对于软引用，还是建议尽量少用，会增加存活数据量，增加GC的处理时间。</p><h2><span id="其它">其它</span></h2><h3><span id="rset的处理">RSet的处理</span></h3><p>UpdateRS:更新RSet的时间信息。-XX:MaxGCPauseMill<br>is参数是限制G1的暂停之间，一般RSet更新的时间小于10%的目标暂停时间是比较可取的。如果花费在RSetUpdate的时间过长，可以修改其占用总暂停时间的百分比-XX:G1RSetUpdatingPauseTimePercent。这个参数的默认值是10。<br>如果观察到RS的处理时间较长，可以使用-XX:+G1SummarizeRSetStats参数，在GC结束后打印RSet的详细信息。一般在debug环境排查用。还有一个辅助参数G1SummarizeRSetStatsPeriod=0用来控制第几次GC后统计一次RSet信息。</p><h3><span id="object-copy">Object Copy</span></h3><p>该任务主要是对CSet中存活对象进行转移（复制）。对象拷贝的时间一般占用暂停时间的主要部分。如果拷贝时间和”预测暂停时间“有相差很大，也可以调整年轻代尺寸大小。</p><h3><span id="full-gc">Full GC</span></h3><p>曾经有同事问我G1有没有Full GC，目前所知没有不存在支持不Full gc垃圾回收器的jdk版本。详见以下资料。<br>oracle - <a href="https://docs.oracle.com/javase/9/gctuning/garbage-first-garbage-collector-tuning.htm#JSGCT-GUID-0DD93225-0BCF-4605-B365-E9833F5BD2FC" target="_blank" rel="noopener">Observing Full Garbage Collections</a><br>网友对<a href="https://blog.csdn.net/a860MHz/article/details/98494732" target="_blank" rel="noopener">G1源码分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;背景&quot;&gt;背景&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;最近公司在大力推动服务容器化，而默认配套的JVM 垃圾收集器是G1，故此整理一下G1相关的知识点。&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;基础知识&quot;&gt;基础知识&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=
      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="java基础" scheme="https://super-sean.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JVM" scheme="https://super-sean.github.io/tags/JVM/"/>
    
      <category term="内存" scheme="https://super-sean.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>一次服务分离的经历</title>
    <link href="https://super-sean.github.io/2020/05/19/%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%88%86%E7%A6%BB%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>https://super-sean.github.io/2020/05/19/一次服务分离的经历/</id>
    <published>2020-05-19T06:34:00.000Z</published>
    <updated>2020-05-25T12:13:32.647Z</updated>
    
    <content type="html"><![CDATA[<p>自从那次的迭代做完后（抽象优化交易服务的那个项目），公司刚好有个比较大型的服务分离项目需要支持，刚好业务上没那么忙，爱折腾的我义无反顾就加入了。一搞就搞了一个月有多，作为这个项目的一线执行角色回过头来总结一下自己所学习到的内容。</p><h1><span id="背景">背景</span></h1><p>一家公司旗下经常会有多个APP的情况，除去中台、基础服务等，一般业务服务在理想的情况下都应该是根据APP服务分离的，但是往往公司在全新子业务的验证上想要快，在技术上可能会做出一些让步，比如两个团队共用项目，一些两个app都能用的功能就共用，需要区分的业务的时候在代码里面硬编码逻辑分支。刚好这次接触的项目是这种情况，涉及的规模比较大，有80个左右服务需要处理及一些旧服务处理，总的来说超过百个相关服务。</p><img src="/2020/05/19/一次服务分离的经历/1.png"><p>主业务就是核心业务应用APP，子业务就是独立子APP，接入器可以简单理解为对外网关服务（我们公司用的长链，自研接入层）。两个环境通信通过自研内部网关服务。<br>这样的架构会存在以下问题:</p><ul><li>服务质量问题，整条链路某个环节一出问题便互相两个app，不管是哪方出的问题。</li><li>业务发展相互制约，多个团队多个需求难免会有冲突的时候，在迭代过程需要考虑的成本较大。</li><li>代码膨胀问题，由于两边的业务特性不同，会有很多硬编码的情况存在。</li></ul><h1><span id="渐进式还是一刀切">渐进式还是一刀切？</span></h1><p>其实一般来说，从稳健推进的角度来说，可能会很多人想选择渐进式迁移，但是我们这个项目最终决策者选择了一刀切，经过了解，主要理由有如下：</p><ul><li>业务一边快速发展，一边迁移的话基本很难操作，有可能会分离的不干净  ，返工机率可能也会比较大。</li><li>时间线会被拉得很长，而来自团队内外的压力，要求着得快速根本的解决存在的问题。</li></ul><h1><span id="解决方案">解决方案</span></h1><img src="/2020/05/19/一次服务分离的经历/2.png"><h2><span id="三个环境">三个环境</span></h2><p>可以看到增加多一个全新的子业务环境，这样做的目的主要是减少迁移工作对正在进行的子业务迭代的影响，迁移工作可以独立的进行，不影响子业务正常迭代。</p><h2><span id="独立环境相关工作">独立环境相关工作</span></h2><ul><li>独立外部网关及协议梳理和web入口域名梳理</li><li>fork业务项目代码并按规则修改项目名</li><li>新项目代码改造<ul><li>接口服务限定名改造，上游调用者改造（cat）</li><li>消息消费链路改造,生产者及消费者(grafana)</li><li>修改相关启动脚本</li><li>移除会对主业务有影响的但是对子业务无用的相关模块，比如quartz定时任务</li></ul></li><li>配置分离（apollo配置中心）</li><li>存储分离 （统一修改数据源相关元数据）<ul><li>redis</li><li>mysql</li><li>memcached</li></ul></li><li>xxl-job任务迁移</li><li>主业务服务调用子业务服务调用链的清理（cat）</li></ul><h1><span id="推进过程核心问题">推进过程核心问题</span></h1><h2><span id="测试环境问题">测试环境问题</span></h2><p>按环境来讲，我们推进的节奏是 预发-&gt; 线上-&gt;开发。直接使用预发环境进行子业务的测试回归，主要是因为我们公司的开发环境是自研的一套持续集成的管理平台，对接有一定成本，在相关的压力下，最终选择了这样的节奏。</p><h2><span id="上线前子业务是否要将旧环境停服">上线前子业务是否要将旧环境停服</span></h2><p>为了避免对数据层的影响以及避免消息重复消费问题，决定还是得把旧环境的服务都停掉</p><h2><span id="存储层操作节奏">存储层操作节奏</span></h2><ul><li>存储第一次同步（将旧环境相应服务的相关存储同步一份到新的存储层）</li><li>断开同步</li><li>进行新环境预发测试及线上测试</li><li>将新环境预发及线上服务全部关停</li><li>清除所有数据重新同步</li><li>同步完成之后，在新环境未正式上线前保持增量同步</li><li>新环境正式上线后断开增量同步</li></ul><h2><span id="基础服务配合问题">基础服务配合问题</span></h2><p>关于基础服务调用业务相关接口的情况，在预发环境测试过程没有大的问题，可当我们需要在线上回归测试时，这个时候得要基础服务上线才能测，可基础服务上线生产环境的流量是不能调用新环境的服务。使用了流量开关加白名单的方式来处理，基础服务及业务服务双方都针对性的加上。<br>测试阶段开关打开，只放行测试流量到新环境，其它流量都走原来的通道。</p><img src="/2020/05/19/一次服务分离的经历/3.png"><p>上线阶段开关关闭，基础服务区分主/子业务流量，子业务流量全部走新环境。</p><img src="/2020/05/19/一次服务分离的经历/5.png"><p>开关详细逻辑如下:</p><img src="/2020/05/19/一次服务分离的经历/4.png"><h2><span id="主业务服务对子业务旧环境的调用链处理">主业务服务对子业务旧环境的调用链处理</span></h2><h3><span id="梳理">梳理</span></h3><p>由于我们公司rpc框架是基于dubbo做的二次开发，跨环境调用都是通过内部网关服务，有日志可追踪，可以看到调用provider的全限定名，然后通过cat二次开发的cross功能进行上游排查，再通过机器ip所属环境及代码定位判断是否有区分业务流量调用，没有的需要补上。</p><h3><span id="移除">移除</span></h3><p>主业务对子业务服务的依赖链路，能去掉得尽量去掉，必要时候业务需要做出一定的牺牲。</p><h3><span id="保留及改造">保留及改造</span></h3><p>去不掉的调用，存在两个问题</p><h4><span id="调整环境访问顺序">调整环境访问顺序</span></h4><p>主业务环境对子业务服务的请求，假设子业务服务不改服务限定名的情况下，会在子业务新旧环境乱窜，所以需要处理环境调用优先级问题。所幸，我们公司对基于dubbo封装的rpc框架上支持这样的特性，针对项目级别的可配置。其实主要是利用了dubbo provider的前缀来与网关访问的环境绑定。大体流程如下：</p><img src="/2020/05/19/一次服务分离的经历/6.png"><h4><span id="停服的兼容处理">停服的兼容处理</span></h4><p>子业务旧环境上线时需要停服，针对无法移除的大流量接口需要添加流量屏蔽开关，并在停服前打开，上线完成后关闭。</p><h2><span id="消息通信改造">消息通信改造</span></h2><p>我们公司业务上大多用的kafka进行消息通信，在迁移的项目中，我们需要去梳理使用到的内外部流程的topic，内部流程的topic一律改名字重新开通，外部流程topic（旧环境的服务也一样会监听）修改group，一样加开关及白名单进行测试避免重复消费，涉及基础服务的也是改topic，区分逻辑处理，也是加开关和白名单进行消费，具体见 基础服务配合问题 的流程。</p><h1><span id="补充">补充</span></h1><h2><span id="把不确定项尽早确定">把不确定项尽早确定</span></h2><p>在开始的阶段，其实项目负责人是给不出具体的计划的，直到我们梳理出跨环境调用链，kafka消息改造，需要迁移的存储列表、涉及的网关协议及域名列表等才能确定最终的计划。当然这些事项每一项单独拎出来都是需要一定的时间去梳理的。团队的兄弟们确实也给力。</p><h2><span id="繁杂的跟进事项">繁杂的跟进事项</span></h2><p>事情很多，而且涉及人员很多，基本上我们做的每个环节都在一个在线文档进行统一的备注跟进，每个tab是单独一个文档，每个文档基本上都有很多内容，但是梳理清楚，分清楚负责人，大家做起事情来都有条不紊。</p><h2><span id="减少变化的风险">减少变化的风险</span></h2><p>前期工作做得比较充分，其实在过程紧急的变化项并不多，基本上项目进度都比较健康。</p><h2><span id="注重细节">注重细节</span></h2><p>比较佩服项目负责人的一点是，把计划细节都梳理很清晰。比如说我们因为要停服，是凌晨上线的，需要通宵，那么他会安排前一天休息，上完线后的排班人员，另外给通宵的成员争取一天调休，整体上线前后的细节考虑得很周到。</p><h1><span id="arthas">Arthas</span></h1><p>我在这个项目中推动了项目成员使用arthas，也算是第一次在项目中比较频繁及较深入的使用解决问题，效果很不错，最近打算学习一下arthas源码，后面再出写一个arthas的源码解读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从那次的迭代做完后（抽象优化交易服务的那个项目），公司刚好有个比较大型的服务分离项目需要支持，刚好业务上没那么忙，爱折腾的我义无反顾就加入了。一搞就搞了一个月有多，作为这个项目的一线执行角色回过头来总结一下自己所学习到的内容。&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;背景&quot;&gt;
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>通用交易服务架构设计</title>
    <link href="https://super-sean.github.io/2020/03/31/%E9%80%9A%E7%94%A8%E4%BA%A4%E6%98%93%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://super-sean.github.io/2020/03/31/通用交易服务架构设计/</id>
    <published>2020-03-31T14:32:00.000Z</published>
    <updated>2020-04-07T12:29:41.699Z</updated>
    
    <content type="html"><![CDATA[<p>自从年前写了商业化、serverless和活动通用模板设计，又是几个月没写文章了，对不起自己。<br>刚好年后一复工就来一个比较大的项目，忙到3月下旬才算是竣工。btw，活动通用模板被坑了应该是没后续了，<br>后来经过了解，是有现成服务可对接的，之前听产品说不适合就没多加了解，还是万事留个心，多了解一下。</p><h1><span id="背景">背景</span></h1><p>在开始做商业化需求实现时，发现APP内有不少其它交易场景，刚好部门商业化业务刚起步，后期肯定会有越来越多的交易场景。故此，统一交易流程，降低开发及维护成本，是很有必要去推进的事情。</p><h1><span id="愿景">愿景</span></h1><p>可以快速支持买家购买卖家商品新的支付场景，大量减少业务开发及维护成本。</p><h1><span id="项目职能">项目职能</span></h1><p>将公司支付平台视为第三方服务进行封装，提供通用支付场景支撑，包括商品管理、支付流程管理、订单生命周期管理、自动对账、数据分析五个核心板块。以下为具体职能</p><h2><span id="商品">商品</span></h2><h3><span id="创建">创建</span></h3><pre><code> 针对商品支付方式，收益分成规则，基本的销售属性（如打包销售数量等）等内容进行初始化。</code></pre><h3><span id="更新">更新</span></h3><pre><code> 针对商品基本属性进行更改。</code></pre><h3><span id="下架">下架</span></h3><pre><code>商品数据不能物理删除，只能下架。     </code></pre><h3><span id="营销">营销</span></h3><pre><code>可以给商品添加通用的营销属性，比如是否支持优惠券扣减，是否打折，是否特价等</code></pre><h3><span id="套餐">套餐</span></h3><pre><code>业务往往需要在商品之上有套餐的概念，便于运营维护。套餐的概念其实是多个商品基本信息的模板，便于业务服务在把商品信息跟业务实体绑定时进行使用。</code></pre><h2><span id="支付">支付</span></h2><h3><span id="安全">安全</span></h3><pre><code>统一支付流程，使用预下单环节生成验证参数，在进行真正支付时检验</code></pre><h3><span id="支付方式">支付方式</span></h3><pre><code>针对不同的支付渠道，如虚拟币/微信/支付宝等，提供便捷的API服务，包括支付及第三方签约。支持自动续费等支付场景，业务无需自己实现。</code></pre><h3><span id="用户侧资金流水格式">用户侧资金流水格式</span></h3><pre><code>买家及卖家流水统一管理，业务不需要进行维护。</code></pre><h3><span id="收益分成">收益分成</span></h3><pre><code>结合商品分成属性，对业务研发透明。</code></pre><h3><span id="退款流程">退款流程</span></h3><pre><code>统一业务退款流程管理。</code></pre><h2><span id="订单">订单</span></h2><h3><span id="生命周期">生命周期</span></h3><pre><code>支持订单查询，根据支付流程，将订单状态划分为预下单（创建）、未支付、已完成、进行中（待确认、不确定是否已扣费）、异常（因各种系统原因未支付成功）、超时（已支付在指定时间范围内没有进行业务操作）、待补偿（不确定是否支付成功的订单）、人工关单（运营人员操作）</code></pre><h3><span id="自动补偿">自动补偿</span></h3><h3><span id="支付结果未最终确定">支付结果未最终确定</span></h3><pre><code>支付流程异常时，未确认支付结果的订单，统一定时扫描结果通知业务</code></pre><h3><span id="业务操作未成功">业务操作未成功</span></h3><pre><code>交易服务支持统一管理订单的业务操作状态，业务可选择接入，会定时通知业务处理不成功的订单给业务</code></pre><h3><span id="订单流水">订单流水</span></h3><pre><code>订单的每一步操作都会记录下来，通过流水可以看到一张订单经过了哪些环节，包括异常情况及补偿的记录</code></pre><h2><span id="对账">对账</span></h2><h3><span id="报表及明细数据">报表及明细数据</span></h3><pre><code>提供通用统计报表及明细数据给运营人员及财务人员进行对账</code></pre><h3><span id="自动对账">自动对账</span></h3><pre><code>与上游平台（支付平台）进行定时自动进行数据比对，将比对结果及异常情况通知相关人员。</code></pre><h2><span id="数据分析">数据分析</span></h2><h3><span id="商业化通用分析指标">商业化通用分析指标</span></h3><p>基于通用商品及订单数据结构，数据分析人员在进行数据处理时的数据指标可以应用于所有接入的业务，无需额外开发。可以让数分人员把重点放在分析模型的提升上。</p><h1><span id="核心设计">核心设计</span></h1><h2><span id="商品">商品</span></h2><p>商品这块其实也比较简单，就增查改，需要注意的主要是苹果商品，我们的做法是一个业务一个价位共用一个IAP商品id，来关联多个业务商品。kylin是上游的交易服务，可以当成第三方支付服务来看。商品的分成模式管理，在业务对接时确定是按固定比例还是每个商品个性化定义，为固定比例时，业务调用相关接口可以忽略分成数量的相关设置，反之，就必须设置，否则接口返回参数错误。</p><h3><span id="商品管理">商品管理</span></h3><img src="/2020/03/31/通用交易服务架构设计/商品管理.png">  <h3><span id="商品营销属性套餐属性新增">商品营销属性/套餐属性新增</span></h3><img src="/2020/03/31/通用交易服务架构设计/商品衍生属性管理.png">  <h2><span id="支付">支付</span></h2><p>普通接口就不详细介绍了，根据业务常见场景抽象实现即可。主要聊一下高级接口，通过对外提供的接口包，实现提供一个接口，多个功能的实现，包括幂等/异常锁定不可重复支付/支付/业务处理状态透明管理。</p><h3><span id="用法">用法</span></h3><p>提供的服务类类名为TradeCoinFlow。<br>创建xxxTradeManager继承并实现TradeCoinFlow，继承该类构造方法，并添加@Inject声明，注入TradeService实例。<br>创建xxxTradeHandler实现PayByCoinHandler接口并实现orderBizOpt(ResponsePayByCoin payByCoin)方法。<br>业务流程中在调用预下单接口之后，调用xxxTradeManager.payByCoin(PreOrder preOrder, PayByCoinHandler payByCoinHandler) 进行金币扣费<br>针对返回状态码进行结果处理</p><h3><span id="交互流程">交互流程</span></h3><img src="/2020/03/31/通用交易服务架构设计/购买.png">  <p>交易过程会针对 用户-商品 进行加锁，默认半小时，正常交易完之后解除，若交易异常，会针对不需要补偿的情况解锁，需要补偿的订单会在订单模块的监听实现业务补偿完成之后自动解锁。</p><h2><span id="订单">订单</span></h2><p>订单是在预下单中生成（防刷接了风控），并在支付时验证更新状态。针对订单模块主要想讲的是关于订单监听及补偿订单监听的相关内容。</p><img src="/2020/03/31/通用交易服务架构设计/订单补偿.png"> <p>其实主要思想还是把补偿的逻辑实现放到通用服务，让业务使用更简单舒服。</p><h1><span id="心得">心得</span></h1><h2><span id="技术方案">技术方案</span></h2><ul><li>除了面向业务开发，更要面向领域及能力开发</li><li>需求初期就做通用服务有可能会比较痛苦，但是一开始不做，后面基本也不会做，除非是外部压力。</li></ul><h2><span id="迭代优化">迭代优化</span></h2><p>时间往往有限，需要多留意以下方面</p><ul><li>数据结构的设计</li><li>接口协议的设计</li><li>明确职能，高内聚，慎重引入外部依赖</li></ul><h2><span id="持续优化">持续优化</span></h2><ul><li>尽可能完善服务领域的能力</li><li>留意迭代中遗留下的性能风险</li></ul><h2><span id="业务大局观">业务大局观</span></h2><ul><li>清晰认知自己所在业务的大模块，挑选某个模块进行深入思考研究，稳定之后再慢慢转移其它模块</li><li>尝试预估业务走向，多些与产品交流及多方争取资源，合理的事情大家都会支持及认可。</li></ul><h2><span id="技术债">技术债</span></h2><p>由于在迭代中跟随业务需求节奏，总会有为了时间在技术方案上让步的时候，所以需要清晰到底有哪些技术点没做好，以便新的迭代来临时评估是否可以带上</p><h2><span id="流程规范以外的发挥空间">流程规范以外的发挥空间</span></h2><ul><li>别让工具成为限制能力的绊脚石<br>不是说工具/流程规范不好，而是说不要因为现有团队有这些东西，就限制对外提供的能力。举个例子，我们对外提供接口包使用的是一个叫autoapi的工具，你把pb文件定义好，就能自动生成接口包的接口及协议结构体，是非常好用的工具，但是也因此很多人不会在接口包上再思考太多，像上面提供的TradeCoinFlow和监听回调的类，其实就是对基本接口的及配置的封装，如锁、kafka的group和topic分配等，对外提供一个流程的完整交互，而对接方只需要关心他自己的业务实现，其它都他来说都是透明的，这样对接方就会非常舒服。</li></ul><h1><span id="项目以外">项目以外</span></h1><p>个人由于业务发展问题，接下来会去参与支持公司直播版块的内容，期望能学习更多内容，更多积累。原本负责的商业化的内容也会持续关注跟进。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从年前写了商业化、serverless和活动通用模板设计，又是几个月没写文章了，对不起自己。&lt;br&gt;
刚好年后一复工就来一个比较大的项目，忙到3月下旬才算是竣工。btw，活动通用模板被坑了应该是没后续了，&lt;br&gt;
后来经过了解，是有现成服务可对接的，之前听产品说不适合就没
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>赛程-活动-榜单模板实现方案(一)</title>
    <link href="https://super-sean.github.io/2019/12/22/%E8%B5%9B%E7%A8%8B-%E6%B4%BB%E5%8A%A8-%E6%A6%9C%E5%8D%95%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88-%E4%B8%80/"/>
    <id>https://super-sean.github.io/2019/12/22/赛程-活动-榜单模板实现方案-一/</id>
    <published>2019-12-22T13:38:00.000Z</published>
    <updated>2019-12-25T08:12:51.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继<a href="/2019/10/20/商业化产品规划与服务架构思考/">商业化产品架构及技术规划</a>后续，与团队及部门各方大佬探讨都得到高度认可，接下来便是如何落地。由于身在业务部门，不可能本末倒置，在业务能够按计划发展的同时进行技术沉淀是最好的方向。个人的思路是很多事情都不是一蹴而就，模块先划分好，每个模块贴合业务迭代进行技术迭代。  </p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>其实无论商业化还是普通平台都比较大机率会有赛程/活动/榜单的运营需求，以往本人所在的团队有这种需求的时候有两种运作方式，一种是定向开发，来一个做一个，做完就丢，一种是使用另外一个部门的公共活动模板。这其中定向开发的自然不用说有什么问题，使用公共活动模板本身没什么问题，但是问题是跨团队跨部门，当运营有超出公共活动模板本身能力需求的时候，就会满足不了，跨部门进行支持的话还会带来几个问题，主要是后期维护及责任边界问题，还有服务升级的问题对原有的功能影响，故此决定着手做适合自己部门特性的模板服务。   </p><p>契机刚好是在有年底活动需求，评估需求定向开发工作量及模板开发工作量相关不会太多，决定于这个项目落地第一期的设计。  </p><h2 id="实体划分"><a href="#实体划分" class="headerlink" title="实体划分"></a>实体划分</h2><p>由于个人所在公司是做媒体UGC平台，当然模板本身的设计不会受这个影响，只是举例方面我会用平台特性来讲解。<br><img src="/2019/12/22/赛程-活动-榜单模板实现方案-一/实体属性抽象.png" title="实体属性抽象">  </p><p>根据特性，先抽象成赛制/活动/榜单三种实体，赛制一对多活动，活动一对多榜单，榜单可脱离赛制/活动独立存在，活动可脱离赛制。活动有模块概念，一个活动模块可以有多种类型，其中一种榜单，本次主要也是先实现榜单类型。  </p><h3 id="榜单属性说明"><a href="#榜单属性说明" class="headerlink" title="榜单属性说明"></a>榜单属性说明</h3><h4 id="展示类型"><a href="#展示类型" class="headerlink" title="展示类型"></a>展示类型</h4><p>根据本次需求有pk榜/普通排行榜，其实只要是榜单，都是普通排行榜+不同的展示形式，pk榜便是多了pk组及PK指标信息。</p><img src="/2019/12/22/赛程-活动-榜单模板实现方案-一/pk组原型.png" title="pk组原型">   <h4 id="元数据结构"><a href="#元数据结构" class="headerlink" title="元数据结构"></a>元数据结构</h4><p>榜单是本次项目的承载核心，主要包括基本信息、指标等元数据。</p><p>榜单基本信息表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ranking_list` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;榜单id&apos;,  </span><br><span class="line">  `biz_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务类型&apos;,</span><br><span class="line">  `biz_name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;业务名称&apos;,</span><br><span class="line">  `name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;榜单名称&apos;,</span><br><span class="line">  `rank_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0:列表榜单,1:PK榜&apos;,</span><br><span class="line">  `start_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;开始时间&apos;,</span><br><span class="line">  `end_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;结束时间&apos;,</span><br><span class="line">  `opt_type` bit(10)  NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;数值操作类型，低位第一位表示是否需要自动淘汰，第二表示是否业务结算&apos;,</span><br><span class="line">  `opt_time_type` int(2)  NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;数值按操作类型执行频率类型，0为不指定，1为每小时，2为每天，3为每周，4为每月，5为每年，6为指定时间（最小粒度小时）&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;状态：0-正常 1-下架 2-系统结算中 3-业务结算中&apos;,</span><br><span class="line">  `extra` varchar(1000) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;扩展参数，json格式存储，比如自动淘汰相关参数，榜单分块展示信息等&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;通用排行榜&apos;;</span><br></pre></td></tr></table></figure></p><p>指标信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `activity_indicator` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;指标id&apos;,</span><br><span class="line">  `biz_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务类型&apos;,</span><br><span class="line">  `sub_biz_type` smallint(6) NOT NULL DEFAULT 0 COMMENT &apos;业务子类型，用来区分具体的指标类型&apos;</span><br><span class="line">  `biz_name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;业务名称&apos;,</span><br><span class="line">  `item_id` bigint(20) NOT NULL COMMENT &apos;元素id，如榜单id&apos;,  </span><br><span class="line">  `name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;指标名称&apos;,</span><br><span class="line">  `prefix_unit_name` varchar(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;前置指标单位&apos;,</span><br><span class="line">  `suffix_unit_name` varchar(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;后置置指标单位&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,  </span><br><span class="line">  `seq` smallint(3) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;序号&apos;,  </span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_item` (`item_id`) USING BTREE,</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;通用活动指标&apos;;</span><br></pre></td></tr></table></figure><p>指标来源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `activity_indicator_source` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;来源id&apos;,</span><br><span class="line">  `indicator_id` bigint(20) NOT NULL COMMENT &apos;记录id&apos;,</span><br><span class="line">  `source_type` int(10)  NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;指标来源类型，1表示xxx，2表示xxx，3表示xxx&apos;,  </span><br><span class="line">  `extra` varchar(500) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;扩展参数，json格式存储，比如来源的计算规则&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,  </span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  INDEX `idx_indicator_id_source_type`(`indicator_id`, `source_type`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;通用活动指标来源&apos;;</span><br></pre></td></tr></table></figure></p><p>PK分组元信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ranking_list_pk_group_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;分组id&apos;,   </span><br><span class="line">  `biz_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务类型&apos;,</span><br><span class="line">  `biz_name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;业务名称&apos;,  </span><br><span class="line">  `item_id` bigint(20) NOT NULL COMMENT &apos;元素id，如榜单id&apos;,  </span><br><span class="line">  `name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;小组名称&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,  </span><br><span class="line">  `seq` smallint(3) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;序号&apos;,  </span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  INDEX `idx_item_id`(`item_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;排行pk分组元信息&apos;;</span><br></pre></td></tr></table></figure></p><p>PK分组成员信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ranking_list_pk_group_member_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;小组成员信息记录id&apos;,   </span><br><span class="line">  `group_id` bigint(20) NOT NULL COMMENT &apos;分组id&apos;,  </span><br><span class="line">  `target_id` bigint(20) NOT NULL COMMENT &apos;对象id&apos;,        </span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,  </span><br><span class="line">  `seq` smallint(3) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;序号&apos;,  </span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  INDEX `idx_group_id_target_id`(`group_id`, `target_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;pk分组成员信息&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><p>榜单从参与者角度来说分为无限及有限两种需求场景，本次需求主要为有限场景。其实很多业务会用到关联对象这个概念，比如本次的活动榜单参与者，流量入口的指定者等等。  </p><p>表设计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `common_target_pool` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;记录id&apos;,</span><br><span class="line">  `biz_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务类型&apos;,</span><br><span class="line">  `biz_name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;业务名称&apos;,</span><br><span class="line">  `item_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务元素id&apos;,</span><br><span class="line">  `target_type` smallint(1) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务目标类型&apos;,</span><br><span class="line">  `target_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;目标id&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_biz_item` (`biz_type`,`item_id`) USING BTREE,</span><br><span class="line">  KEY `idx_biz_target` (`biz_type`,`target_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;通用目标关联池&apos;;</span><br></pre></td></tr></table></figure></p><p>对象池作为通用模块读多写少，缓存层按CAP（cache aside pattern）来设计。<br>根据数据量大小做对应的分表策略，分表策略及实践另外文章再谈。  </p><h3 id="数值服务"><a href="#数值服务" class="headerlink" title="数值服务"></a>数值服务</h3><p>榜单最基本的功能之一就是数值累加，刚好我们接下来也有积分相关的需求，所以也趁着这次抽象出来。数值服务的职能提供数值增加/减少/排序服务，是一个写多/读多的服务。</p><p>表设计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `common_value_pool` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;记录id&apos;,</span><br><span class="line">  `biz_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务类型&apos;,</span><br><span class="line">  `biz_sub_type` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务子类型&apos;,</span><br><span class="line">  `biz_name` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;业务名称&apos;,</span><br><span class="line">  `item_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务元素id&apos;,</span><br><span class="line">  `target_type` smallint(1) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;业务目标类型&apos;,</span><br><span class="line">  `target_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;目标id&apos;,</span><br><span class="line">  `target_value` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;目标值&apos;,</span><br><span class="line">  `seq` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;排序&apos;,</span><br><span class="line">  `opt_start_time` datetime  NOT NULL DEFAULT &apos;2019-01-01&apos; COMMENT &apos;数值可操作开始时间&apos;,</span><br><span class="line">  `opt_end_time` datetime  NOT NULL DEFAULT &apos;2119-01-01&apos; COMMENT &apos;数值可操作结束时间&apos;,</span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,</span><br><span class="line">  `action_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;行为时间&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_biz_item` (`biz_type`,`item_id`) USING BTREE,</span><br><span class="line">  KEY `idx_biz_target` (`biz_type`,`target_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;通用数值池&apos;;</span><br></pre></td></tr></table></figure></p><p>数值服务读取数据方面也是使用缓存CAP设计，难度主要是在写方面，重点如下:  </p><ul><li>由于是面向通用服务开发，所以使用消息异步写的方法，使用有界线程池限定服务支撑量，超过服务支撑量的请求丢到待处理请求池，如果待处理请求池写入失败，丢回队列重新排队，风险是有可能会造成消息堆积  </li><li>幂等控制。接口预留业务传入会话id，以会话id为维度进行控制</li><li>数值变更安全问题使用原始值加版本号乐观锁设计。数值加减涉及先读后写，在写入前需要对比原始值，避免ABA问题，使用版本号。</li><li>为保证数值安全在并发高的时候有比较大的机率会出现操作失败，而对于业务来说，不应该让业务处理并发失败的结果，返回处理中状态，记录并发失败数据，使用定时补偿策略。  </li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><p>活动本身没什么，除了基本属性就是预留模块的概念，本次主要是榜单和奖金池(对应榜单的总数加和)。</p><p>活动模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `activity_module_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &apos;记录id&apos;,  </span><br><span class="line">  `acivity_id` bigint(20) NOT NULL DEFAULT 0 COMMENT &apos;活动id&apos;,  </span><br><span class="line">  `module_group` smallint(2) NOT NULL DEFAULT 0 COMMENT &apos;模块组&apos;,  </span><br><span class="line">  `module_type` smallint(2) NOT NULL DEFAULT 0 COMMENT &apos;模块类型，1为榜单&apos;,  </span><br><span class="line">  `module_seq` smallint(2) NOT NULL DEFAULT 0 COMMENT &apos;模块排序&apos;,</span><br><span class="line">  `target_id` bigint(20) NOT NULL DEFAULT 0 COMMENT &apos;关联对象id，当type为1，为榜单id&apos;,  </span><br><span class="line">  `target_seq` smallint(2) NOT NULL DEFAULT 0 COMMENT &apos;关联对象排序&apos;,  </span><br><span class="line">  `status` smallint(1) NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;状态：0-正常 1-下架&apos;,</span><br><span class="line">  `extra` varchar(1000) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;扩展参数，json格式存储&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `last_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</span><br><span class="line">  `last_operator_id` bigint(20) NOT NULL COMMENT &apos;最后更新人id&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;活动模块信息&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="人工干预"><a href="#人工干预" class="headerlink" title="人工干预"></a>人工干预</h3><p>做榜单很常见的就会有人工干预的需求，比如榜单初始值等，或者“运营手段”策略支持也有，这里我们抽象了人工干预的常用属性，目标值/平均数/次数/频率/总时长 进行控制。基本上对数值的干预用以上属性能够覆盖许多需求了。  </p><h2 id="模块交互"><a href="#模块交互" class="headerlink" title="模块交互"></a>模块交互</h2><p>简单的模块如下<br><img src="/2019/12/22/赛程-活动-榜单模板实现方案-一/服务层次.jpg" title="服务层次">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次服务己上线，稳定运行。本次主要是针对服务端进行设计优化，前端还未接入，还是有很大一部分定向开发，在下次活动需求来之时，将后台及前端进行接入和服务端进行完善。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;继&lt;a href=&quot;/2019/10/20/商业化产品规划与服务架构思考/&quot;&gt;商业化产品架构及技术规划&lt;/a&gt;后续，与团队及部门各方大佬探讨
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="商业化" scheme="https://super-sean.github.io/tags/%E5%95%86%E4%B8%9A%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>商业化产品规划与服务架构思考</title>
    <link href="https://super-sean.github.io/2019/10/20/%E5%95%86%E4%B8%9A%E5%8C%96%E4%BA%A7%E5%93%81%E8%A7%84%E5%88%92%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83/"/>
    <id>https://super-sean.github.io/2019/10/20/商业化产品规划与服务架构思考/</id>
    <published>2019-10-20T12:09:00.000Z</published>
    <updated>2019-12-22T15:29:29.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>近来有幸负责了公司自己部门一个商业化小组的研发事项，结合自己的工作经验对产品将来走向和服务架构规划梳理自己的见解，希望可以让小组目标一致，高效地进行积累进行沉淀。  </p><h3 id="业务理解及规划"><a href="#业务理解及规划" class="headerlink" title="业务理解及规划"></a>业务理解及规划</h3><p>按个人愚见商业化前期主要分为几个核心模块，GMV短期快速增长/基础设施搭建/用户消费习惯培养/渠道引流变现能力，每个模块并非独立，而是相互交叉相互依赖。</p><ul><li><p>GMV短期快速增长是团队运作过程中常见的场景，单独划分模块往往是因为支持团队在指定时间内可以达到相应指标而需要低成本快速支持运营手段达到指标。其中需要流量管控/活动属性管控/玩法沉淀配套/交易流程动态调整营销策略  </p></li><li><p>基础设施主是为实现商业化整套玩法的服务支撑，包括并不限于流量入口/交易流程/会员体系/特权体系/积分体系/活动体系/营销体系/租赁体系等  </p></li><li><p>用户消费习惯培养主要需要对用户进行分层，需要在数据层面制定好分析模型，统一业务指标数据字典及统计口径，在研发过程预留足够的空间给后期分析。</p></li><li><p>渠道引流变现一般为与外部渠道，通过流量付费或利益分成的形式进行合作  </p></li></ul><img src="/2019/10/20/商业化产品规划与服务架构思考/busi_product_module.png" title="业务常见架构">  <h3 id="团队行事基准"><a href="#团队行事基准" class="headerlink" title="团队行事基准"></a>团队行事基准</h3><p>各行各业，不同的团队行事基准可能很多不同，但是基本都离开不了一种通用原则，领域模型。积累方法论及实践方法，抽象领域分析模型及执行策略。团队就以此进行需求迭代，产品研发，运营事项及日常工作交流指导。  </p><p>领域模型一般两种来源，专家或行业通用模型修改加上经验积累。大多数公司不像大厂会有专门的专家，绝大多数公司更是没有领域模型的发展概念。  </p><p>领域模型一般先按团队内对产品理解较深的人制定第一版框架，后续不停通过迭代优化。前期可选择通用模型进行指标组建，再细化模块。如决策可尝试使用SWOT，人人都会的RFM用户分层模型（事实上维度选择及划分非常有学问），用户行为漏斗分析模型，盘面分析模型等。盘面分析及用户行为分析是最基本。</p><p>简单举个例子，通过接口数据发现付费转化率低，即发起了预下单，但是却没有最终成功支付，那猜测主要要嘛是付费内容质量问题，要嘛是充值流程问题，那可以从用户到底有没有充值来判断，然后进行下步策略。</p><img src="/2019/10/20/商业化产品规划与服务架构思考/data_exam.png" title="data_exam">  <p>当然有理论支撑之后，必须在基础设施上能支持得上，在研发过程需要预埋一些点。</p><h3 id="技术服务架构"><a href="#技术服务架构" class="headerlink" title="技术服务架构"></a>技术服务架构</h3><p>有以上前提的理解下，对总体的服务架构进行了个初步的划分</p><img src="/2019/10/20/商业化产品规划与服务架构思考/busi_server_structure.png" title="server_str">  <h4 id="业务网关"><a href="#业务网关" class="headerlink" title="业务网关"></a>业务网关</h4><p>负责外部交互，web对应http rest, as是我们公司自己封装的一套通信交互标准,消息网关用于与公司其它内部服务通信。  </p><p>在这一层，需要注意的是协议层的相关模型定义，整个系统对内对外通信，吸取DDD的指导思想，定义好业务领域模型。一家公司发展到一定程度之后，代码功能模块会经过很多人维护研发，想保证成本（结构封装，接口适配、沟通学习等），就必须梳理沉淀相关的业务领域模型，不然越往后越难控制。  </p><p>除了定义模型，协议规范也是必须，请求体/返回体结构、状态码约定、分页/聚合/规则查询方式等。</p><h4 id="商业化核心服务"><a href="#商业化核心服务" class="headerlink" title="商业化核心服务"></a>商业化核心服务</h4><h5 id="商业化通用逻辑"><a href="#商业化通用逻辑" class="headerlink" title="商业化通用逻辑"></a>商业化通用逻辑</h5><p>可以看到在商业化发展过程中可以抽象的服务其实有可能会很多，可以有一个汇总服务，作为母体孵化其它模块，当达到比较成熟或遇到业务机遇时可进行抽离独立。  </p><h5 id="服务间的通信"><a href="#服务间的通信" class="headerlink" title="服务间的通信"></a>服务间的通信</h5><h6 id="领域模型事件驱动"><a href="#领域模型事件驱动" class="headerlink" title="领域模型事件驱动"></a>领域模型事件驱动</h6><p>服务只关注领域内事项处理，将处理结果通过消息总线广播出去，有需要的服务自行进行定阅，参考ddd的设计理念，在发送消息和解析加入工具包，封装领域模型及相应的事件状态和流程。  </p><p>系统规模大了之后往往需要考虑事件流的问题，需要对事件顺序编排，有可能会多个上游依赖的情况，为了避免这种情况，可以只关注核心一个事件，主动查询其它模块结果的处理方式，这样保证了一个事件流是树状结构。  </p><p>研发事件管理服务及后台，拿kafka为例，可以在应用层面添加工具包，为producer添加生产标识，consumer添加消费标识，可以用注解和扫描，并发送给事件管理服务，这样事件流的结构就可以被绘画。这样只要稍微做下支持，就可以知道整个事件流每个环节的处理情况，数据统计等，甚至可以自动/人工进行介入消息失败/异常处理策略的实现。  </p><p>当然前期可简单的先各个模块自维护各自的消息发送，消费和补偿实现。比如只是定义各自的消息的队列名、结构和行为状态定义，让下游各自监听处理。在服务完善之后再进行迁移。</p><h6 id="补偿模块"><a href="#补偿模块" class="headerlink" title="补偿模块"></a>补偿模块</h6><p>凡是依赖消息通知的实现，在完整性和稳定性上考虑，必须加上补偿模块，凡是需要依赖消费事件的服务都需要制定主动询问上流的策略，比如开通会员触发了特权发放，除了正常消息通知以外，特权服务需要主动询问会员服务最近一段时间内有哪些用户开通了会员但是还没发放特权，并进行发放，当然也需要做好幂等控制。  </p><p>而补偿也可以像事件流管理平台一样，提供工具包，支持补偿发起者注册到平台上，可以对系统中的补偿行为进行监控以及介入。</p><h4 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h4><p>一般商业化会需要一些基础服务支撑，这一层会尽量剥离业务特性，专注专业领域上的研发。本文主要介绍业务层面的实现，便不多加介绍这一环节。 </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>目前在公司内只是把以上的相关业务理解及设计思考与团队的产品/研发同事进行了同步，在每个点上都有相应的积累，但是还是任重而道远，而要独步完善及验证。</p><p>今天加油，明天也加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;近来有幸负责了公司自己部门一个商业化小组的研发事项，结合自己的工作经验对产品将来走向和服务架构规划梳理自己的见解，希望可以让小组目标一致，高
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>一种serverless的实现方案</title>
    <link href="https://super-sean.github.io/2019/09/16/%E4%B8%80%E7%A7%8Dserverless%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://super-sean.github.io/2019/09/16/一种serverless的实现方案/</id>
    <published>2019-09-16T07:30:00.000Z</published>
    <updated>2019-11-16T09:41:43.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>自从上次参加qcon开发者大会，一直在思考serviceless的可执行方案，一路上也在公司推进中，虽然进度有点慢，没办法，业务太忙了。。。  </p><h3 id="架构总览"><a href="#架构总览" class="headerlink" title="架构总览"></a>架构总览</h3><img src="/2019/09/16/一种serverless的实现方案/vod_serviceless.png" title="架构">  <h3 id="服务模块"><a href="#服务模块" class="headerlink" title="服务模块"></a>服务模块</h3><h4 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h4><p>需要实现配置化扩展及热更新接口服务，主要需要支持数据的curd场景。抽象的说其实只有2种场景，就是数据的查询和变更。    </p><p>抽象交互场景，制定一套接口使用规范  </p><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>查询一般分明细查询和聚合查询，核心结构如下：</p><ul><li>字段列表<br>  支持别名，数据格式定义</li><li>请求参数列表（过滤）<br>  支持别名，请求参数类型（如日期、范围、字段值匹配等）</li><li>排序<br>  支持别名，排序类型（升序降序）</li><li>分页<br>  游标或者页码</li></ul><p>之前已经有 <a href="/2019/05/15/基于solr服务提供通用配置化接口服务/">基于solr服务提供通用配置化接口服务</a>  可以参考  </p><h5 id="变更"><a href="#变更" class="headerlink" title="变更"></a>变更</h5><p>变更一般有replace和del场景，del比较简单，只需要请求参数列表即可。replace的核心结构如下：</p><ul><li>变更数据<br>  以key value的形式传参，支持伪cas，传key的原值，如果不是原值放弃修改  </li><li>请求参数列表（过滤）<br>  支持别名，请求参数类型（如日期、范围、字段值匹配等）</li></ul><h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><p>需要针对使用方提供租赁服务，查询接口限流，变更接口安全参数派发及验证</p><h4 id="语法引擎"><a href="#语法引擎" class="headerlink" title="语法引擎"></a>语法引擎</h4><p>需要根据接口配置模板选择不同的数据源的语法进行转译，最基本的支持sql查询模板（<a href="/2018/10/07/JAVA动态编译-解析文本的简易方法/">JAVA动态编译/解析文本的一种简易方法</a>）,如果存储层有不支持sql的中间件或者引擎，就需要定向开发。参考<a href="/2018/11/23/datax源码解析及分布式实现思路/">datax的设计</a>，抽象组件,只针对reader和writer编程，以插件的形式加入项目对应的目录和修改对应的配置文件即可。  </p><h4 id="存储及查询引擎"><a href="#存储及查询引擎" class="headerlink" title="存储及查询引擎"></a>存储及查询引擎</h4><p>其实最简单在这一层添加个db，就已经能把一个简单的serviceless架构跑起来了</p><h5 id="apache-kudu-impala"><a href="#apache-kudu-impala" class="headerlink" title="apache kudu + impala"></a>apache kudu + impala</h5><p>考虑到高可用、高性能、扩展性和成本的问题，又要支持oltp和olap，选择普通db的话很快就会到整套服务各方面的天花板，参考<a href="http://www.clickhouse.com.cn/topic/5c453371389ad55f127768ea" target="_blank" rel="noopener">开源OLAP引擎测评报告</a>  </p><p>联表查询性能<br><img src="/2019/09/16/一种serverless的实现方案/multi_table_report.jpeg" title="多表"></p><p>单表查询性能<br><img src="/2019/09/16/一种serverless的实现方案/single_table_report.jpeg" title="单表"></p><p>综合对比<br><img src="/2019/09/16/一种serverless的实现方案/all_consider.jpeg" title="对比"></p><p>综合考虑下选择impala  </p><p>考虑kudu的原因，参考<a href="https://cloud.tencent.com/developer/news/391226" target="_blank" rel="noopener">有了HBase为什么还要Kudu</a>  </p><p>其实选型上也是考虑到大厂都有在使用，impala不用说了，很多公司都用到tx/ali/神策等，kudu像京东/小米都有在用。正准备在公司申请开发环境进行探研。</p><h5 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h5><p>搜索引擎在明细查询上有很优秀的支持，如es、solr</p><h5 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h5><p>业务很常用的，在数据存储上没太高要求的前提下的性能最优选择  </p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>以上模块的运作需要有一套元数据设计来支持，元数据主要包括几方面：</p><ul><li>应用信息</li><li>安全信息，比如盐信息</li><li>接口描述</li><li>针对sql及特定语法的接口配置信息，之前已经有 <a href="/2019/05/15/基于solr服务提供通用配置化接口服务/">基于solr服务提供通用配置化接口服务</a>  可以参考  </li><li>数据源信息</li><li>异常策略等</li></ul><h5 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h5><p>sql和代码加载（代码块及jar包上传）两种实现思路，sql是成本最低，但是也限制比较多，代码热加载会有一些性能和安全隐患问题，需要额外的成本去维护。</p><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p>使用了非普通db存储的方案，而且serviceless的目标并不是也不可能覆盖所有的场景，那就肯定存在需要进行数据同步的情况，数据同步行业内主要分批处理和流处理两种，当然直接服务对接也可以，不过不建议，因为会对接服务多了，会比较很难把控。  </p><h5 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h5><p>使用azkaban进行离线调度是现在很多公司会做的，我们公司的大数据部门也即将提供基于azkaban改造的调度系统，可直接对接使用  </p><h5 id="流数据"><a href="#流数据" class="headerlink" title="流数据"></a>流数据</h5><p>如果是面向业务的场景的，其实并没有像大数据场景那种实时更新模型推荐的需要，主要是想支持实时更新，使用kafka 和kafka streams 基本能满足(<a href="/2018/08/11/spring-cloud-stream-基于kafka的使用简析/">spring cloud stream 基于kafka的使用简析</a>)。还有其它工具，如kettle或者apache nifi，但是考虑到是面向研发特性不建议直接使用这种数据处理流工具。这里更想提的其实是管道处理和管理的能力搭建。  </p><p>数据的产生之后（source），会经过一到多层的中间处理（processor），最终将结果落地到某个地方（sink），基于这样的理念，可以很容易基于kafka抽象一套服务出来。但是缺少平台把控能力。  </p><p><a href="https://dataflow.spring.io/docs/concepts/architecture/" target="_blank" rel="noopener">spring cloud data flow</a> 就是管道管理平台，有很多现成的组件。SCDF (Spring Cloud Data Flow)的核心功能是ETL （Extract, Transform, Load ），Extract，Transform，Load 分别对应上图的Source，Processor 和Sink，这三个组件是Spring Boot 微服务，部署运行在SCDF之上的，三个微服务放在一起构成一个Stream（pipeline）用来实现数据处理，它们之间通过AMQP进行异步的消息传递。</p><p>架构简析<br><img src="/2019/09/16/一种serverless的实现方案/spring_cloud_data_flow.png" title="spring">  </p><p>SCDF 由下面的Spring Cloud家族成员组成<br><img src="/2019/09/16/一种serverless的实现方案/spring_cloud_data_flow_modules.png" title="spring">  </p><p>服务组件<br>  </p><p>流处理<br>  </p>  <p>批处理支持  </p>  <p>后台支持语言定义流程及拖拽操作<br><img src="/2019/09/16/一种serverless的实现方案/spring_cloud_data_flow_back.png" title="spring">  </p><p>但是实践下来发现两个问题，一个是不能有通用组件环节，它是以cicd流水线管理方式，每条流水线的应用都得重新部署,没有公共流水线的概念（有可能我使用姿势不对?）,另一个问题是如果使用SCDF，就得跟公司现有的使用框架及发布部署平台对接，需要进行改造，这其中的成本也不小。  </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>基本上serviceless的一种实现思路及方案已经描述完了，这其中会有很多技术难点及问题，之后在推进过程中再一一细述。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;自从上次参加qcon开发者大会，一直在思考serviceless的可执行方案，一路上也在公司推进中，虽然进度有点慢，没办法，业务太忙了。。。
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="serviceless" scheme="https://super-sean.github.io/tags/serviceless/"/>
    
  </entry>
  
  <entry>
    <title>Qcon广州站</title>
    <link href="https://super-sean.github.io/2019/07/14/Qcon%E5%B9%BF%E5%B7%9E%E7%AB%99%E5%A4%A7%E4%BC%9A%E4%B8%AA%E4%BA%BA%E7%BA%AA%E8%A6%81/"/>
    <id>https://super-sean.github.io/2019/07/14/Qcon广州站大会个人纪要/</id>
    <published>2019-07-14T07:25:00.000Z</published>
    <updated>2020-08-28T07:55:49.298Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ppt.geekbang.org/list/qcongz2019?from=singlemessage" target="_blank" rel="noopener">大会ppt下载地址</a></p><p>      今年5月27号在举行的qcon全球开发者大会广州站，在下有幸，公司安排参加，就着大会的内容，个人闲聊一下看法。（工作比较忙，导致拖了一个半月才回过头来聊这次大会）</p><img src="/2019/07/14/Qcon广州站大会个人纪要/p1.jpeg" title="p1"> <img src="/2019/07/14/Qcon广州站大会个人纪要/p2.jpeg" title="p2"> <h3><span id="service-mesh">Service Mesh</span></h3><p>      qcon的大会安排是有不同卖场同时进行，自己优先选择了后端相关的微服务实战及高可用高性能架构专场参加。<br>有幸见到arthas的作者，阿里在专场中更多针对他们是如何在微服务这块提升研发效能进行分享，网易及唯品会对service mesh的落地踩坑改善经验进行了讲解。<br>      对于service mesh，先感谢大厂和很多大牛在一些新的方向或者是旧技术点翻新上，给行业领头踩坑及推广。江南白衣说了句大实话，目前看来无论是哪里的service mesh的实践方案都还不够成熟，不适合生产环境大面积推广。<br>      个人认为service mesh虽然不一定会在公司落地，但是作为架构知识，还是有必要掌握，主要是针对服务云化之后的能力支持。目前国内市场上主要是Linkerd和Istio两个方案，个人准备就着Istio进行研究。</p><h3><span id="火爆的实时流">火爆的实时流</span></h3><p>      在大会上刚好有空档，去听了一下阿里的flink改造版本，7月份已经将合并入官方主干且发版，真的是很厉害。然而在会议上透露着一些问题依然无法很好被解决，那便是数据初始化需求、与批处理比较的稳定性和多表聚合的复杂性问题。</p><h3><span id="service-less的思考">service less的思考</span></h3><p>虽然service less与本次大会无直接关联，但是近几年我一直在研究service less及推荐落地，细想之下，其实service less的落地离不开成熟的微服务架构用于实例的管理及云函数的实现，成熟的存储方案及计算能力和数据流方案。接下来将会梳理一篇关于service less落地的文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ppt.geekbang.org/list/qcongz2019?from=singlemessage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大会ppt下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;      今年5月27号在举
      
    
    </summary>
    
      <category term="随笔" scheme="https://super-sean.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="互联网大会" scheme="https://super-sean.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>一次App首页代码优化纪要</title>
    <link href="https://super-sean.github.io/2019/07/06/%E4%B8%80%E6%AC%A1App%E9%A6%96%E9%A1%B5%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%BA%AA%E8%A6%81/"/>
    <id>https://super-sean.github.io/2019/07/06/一次App首页代码优化纪要/</id>
    <published>2019-07-06T14:19:00.000Z</published>
    <updated>2019-07-14T07:38:02.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近在负责公司APP首页性能优化相关项目，就着原来的技术方案及代码进行了重构，原来接口中存在的问题如下：  </p><ul><li>代码问题，瀑布式编码，导致单个类的代码很容易膨胀，最大体积的类已经快接近2000行代码，还是之前有优化过的。  </li><li>代码问题，方法参数问题，方法参数没有封装，有一些通用方法的参数已经有十几个，不容易进行扩展，维护成本比较高。</li><li>性能问题，由于涉及到多种数据构造来源，没有进行批量处理，有很多rpc请求。  </li></ul><p>很多公司在发展过程中为了能快速满足业务，很多点并不是当时写代码的人没有考虑，而是根本没时间考虑，这都很正常，既然安排到这块的工作，就尽力做到最好。</p><p>先来看一下app当前的大概效果<br><img src="/2019/07/06/一次App首页代码优化纪要/WechatIMG167.jpeg" title="app">  </p><p>可以看到app的设计是卡片加瀑布流的交互形式，旧的设计是每种卡片一种结构体，目前有28种卡片，给客户端和服务端都带来性能问题和维护成本，新的设计是将卡片抽象成统一结构体，主要分展示字段和预留扩展字段，有点像BI的结构设计，在这里就不展开讲。主要先记一下这个结构体命名为section。</p><h3 id="旧代码流程简析"><a href="#旧代码流程简析" class="headerlink" title="旧代码流程简析"></a>旧代码流程简析</h3><img src="/2019/07/06/一次App首页代码优化纪要/old_flow.jpeg" title="app">  <h3 id="优化内容"><a href="#优化内容" class="headerlink" title="优化内容"></a>优化内容</h3><h4 id="责任划分"><a href="#责任划分" class="headerlink" title="责任划分"></a>责任划分</h4><p>整理下来，其实接口处理流程可以划分为</p><ul><li>获取卡片数据</li><li>获取实体数据，即卡片内容模板数据</li><li>构造结构体</li><li>补充卡片数据</li><li>位置调整</li></ul><h4 id="上下文内容作为链路参数"><a href="#上下文内容作为链路参数" class="headerlink" title="上下文内容作为链路参数"></a>上下文内容作为链路参数</h4><p>将请求的内容进行处理后作为上下文内容参数传递进责任链，每个环节各自进行加工传递下个环节，比如section列表、推荐section个数等</p><h4 id="卡片模板"><a href="#卡片模板" class="headerlink" title="卡片模板"></a>卡片模板</h4><p>使用抽象模板，每种卡片的构造抽象成一种模板，持有通用接口，各自实现不同，包括获取实体id信息和构造section的方法等</p><h4 id="使用桥接减少指定卡片调用的代码复杂度"><a href="#使用桥接减少指定卡片调用的代码复杂度" class="headerlink" title="使用桥接减少指定卡片调用的代码复杂度"></a>使用桥接减少指定卡片调用的代码复杂度</h4><p>其实根据卡片类型即可知道使用哪种模板，使用桥接即可方便获取对应模板的实例进行处理</p><h4 id="减少外部请求"><a href="#减少外部请求" class="headerlink" title="减少外部请求"></a>减少外部请求</h4><p>抽象实体环节，很方便可变多个单次为批量<br>原来的接口中由于实现方案的问题，需要每次都获取DB配置数据及推荐数据，通过客户端回传的方式，改为当开启了推荐数据就不需要进行DB配置数据请求</p><h3 id="改造后数据流程"><a href="#改造后数据流程" class="headerlink" title="改造后数据流程"></a>改造后数据流程</h3><img src="/2019/07/06/一次App首页代码优化纪要/new_flow.png" title="app">  <p>代码功能模块更为内聚，入口类从原有的近2000行代码缩减为200行左右。<br>每个扩展类的代码简洁清晰，大多不超过200行，其它不超过300行，便于维护。<br>改造后的接口响应时间为旧接口的2/3，还待压测看具体数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近在负责公司APP首页性能优化相关项目，就着原来的技术方案及代码进行了重构，原来接口中存在的问题如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="JAVA基础" scheme="https://super-sean.github.io/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="优化" scheme="https://super-sean.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="设计模式" scheme="https://super-sean.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GC问题解决的那些套路</title>
    <link href="https://super-sean.github.io/2019/05/19/GC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%97%E8%B7%AF/"/>
    <id>https://super-sean.github.io/2019/05/19/GC问题解决的那些套路/</id>
    <published>2019-05-19T12:57:00.000Z</published>
    <updated>2020-05-31T15:26:51.127Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="利器介绍">利器介绍</span></h3><p>       <a href="https://gceasy.io/" target="_blank" rel="noopener">gceasy</a> 是一个国外在线的gc日志分析工具，可以帮你快速定位到gc问题，并且博客内容也有一些高级的gc问题排查分析文章，<a href="http://xn--blog-ux0g.gceasy.io" target="_blank" rel="noopener">即blog.gceasy.io</a></p><h3><span id="简单问题">简单问题</span></h3><h4><span id="gc异常">GC异常</span></h4><p>      主要是GC日志中有明确标明异常类型的情况，如</p><img src="/2019/05/19/GC问题解决的那些套路/crawler_old_GC_cause.png" title="cause_old">  <p>      针对每种异常情况，某度和某歌都有很多资料带你飞，一般都由内存泄露及不合理的内存分配导致。<a href="https://tier1app.files.wordpress.com/2014/12/outofmemoryerror2.pdf" target="_blank" rel="noopener">OOM不同情况及解决方法</a></p><h4><span id="合理的内存分配及降低gc频次">合理的内存分配及降低GC频次</span></h4><p>      针对mirror gc,major gc,full gc的频次管理，只要不是内存泄露引起，一般可以通过调整内存大小来解决，而合理的内存分配，在不考虑代码优化的情况下，需要进行一版参数配置之后观察GC情况之后，结合各个区域的回收机制可以调整改善。如果初期不知道怎么进行参数配置，根据应用所需，分配堆内存2-4G，新生代/老年代以1:2的比例配置。如果需要调整新生代的内存分配情况，记得默认情况下是eden:s0:s1为8:1:1<br>这种问题要求对垃圾回收器的策略及jvm堆内存模型比较清楚</p><h3><span id="进阶问题">进阶问题</span></h3><h4><span id="调整某个阶段时长">调整某个阶段时长</span></h4><p>      并非所有GC阶段都可以直接配置时长，像parnew gc的单次时长无法直接控制，像这种情况一般可以通过内存大小调整，gc线程数的配置来间接改善，总时长可以通过频次来间接改善。</p><p>      而有直接时长配置的参数，通过日志观察，不断进行调整，调整的套路基本为</p><ul><li>观察原来的情况，取一个合理值进行配置观察</li><li>观察想调整的阶段情况及其它阶段，看是否会影响其它阶段的时长，比如减少preclean时长可能会影响remark的时长</li><li>是否有策略可以解决影响到的阶段，比如影响了remark时长，那就配合major gc 前进行一次mirror gc，但有可能会影响总的mirror次数及时长</li><li>跳转步骤1<br>这种问题要求对垃圾回收器具体的执行内容及步骤要比较清晰，清楚知道垃圾回收器在做什么操作以及会带来什么影响  ，了解安全点的概念及日志分析</li></ul><h4><span id="基于gc日志时间参数进行调整">基于GC日志时间参数进行调整</span></h4><p>      主要是针对 user,sys,real这三个值进行调整</p><h5><span id="user时间长导致real比较长">user时间长导致real比较长</span></h5><p>这种情况好处理，说明gc花费时间比较，从内存分配及并行线程数量分配角度入手</p><h5><span id="sys时间长导致real比较长">sys时间长导致real比较长</span></h5><p>      这种情况比较复杂，大多数情况下跟业务代码无直接关系，在后面的扫盲知识里有对应的字段意义说明及<a href="https://super-sean.github.io/2019/05/04/long-gc%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/">排障贴</a>里面有对应的跟进情况，可以了解一下。基本思路是排除法，到最终需要strace抓进程的系统调用情况或跟进系统级别的情况如内存页，CPU，IO等。在系统各方面都正常情况下，可能Gc的时候向OS申请内存的时候导致的，启动参数加上-XX:+AlwaysPreTouch。<br>      如果没有提前申请好内存，gc时年轻代向老年代copy对象的时候，老年代需要临时向OS申请内存。AlwaysPreTouch意味着在Jvm启动的时候申请好heap内存，堆内的每个page在启动的时候初始化为0，避免Jvm运行过程中临时向OS申请内存。<br>      这种问题要求能够查看hotspot源码，能大概知道有什么操作，了解gc过程中单个gc操作时间的分配情况，如何进行调整及跟进，也得了解一些系统相关的知识</p><p>      按公司某大神的说法，有时候只能靠玄学了，一路猜想及排除定位</p><h3><span id="简易方法论">简易方法论</span></h3><p>      GC问题可能还有很多情况是大家没遇到过，结合以上的问题类型，基本都是以下套路去跟进解决：</p><ul><li><p>查看GC情况</p></li><li><p>定位问题</p></li><li><p>确定目标</p></li></ul><p>      最好是单个目标进行，不要同时调整多个内容，到头来不知道是哪个影响哪个，比如减少preclean时间，然后不增加remark时间，然后是不增加总体pause的时间，或者是减少full gc的次数，或者是减少mirror gc的次数</p><ul><li><p>查询解决方案及实践</p></li><li><p>持续观察改进</p></li></ul><h2><span id="知识扫盲">知识扫盲</span></h2><p>      基于公司GC调优会涉及到的点，整理了对应的知识</p><h3><span id="gc日志时间概念">GC日志时间概念</span></h3><ul><li><p>real —— 程序从开始到结束所用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等待 I/O 完成）</p></li><li><p>user —— 进程执行用户态代码（核心之外）所使用的时间。这是执行此进程所使用的实际 CPU 时间，其他进程和此进程阻塞的时间并不包括在内。在垃圾收集的情况下，表示 GC 线程执行所使用的 CPU 总时间</p></li><li><p>sys —— 进程在内核态消耗的 CPU 时间，即在内核执行系统调用或等待系统事件所使用的 CPU 时间</p></li></ul><h3><span id="安全点safepoint概念及日志简析">安全点SafePoint概念及日志简析</span></h3><p>概念</p><ul><li>安全点是在程序执行期间的所有GC Root已知并且所有堆对象的内容一致的点。</li><li>从全局的角度来看，所有线程必须在GC运行之前在安全点阻塞。 （作为一种特殊情况，运行JNI代码的线程可以继续运行，因为它们只使用句柄。但在安全点期间，它们必须阻塞而不是加载句柄的内容。）</li><li>从本地的角度来看，安全点是一个显着的点，它位于执行线程可能阻止GC的代码块中。 大多数调用点都能当做安全点。</li><li>在每个安全点都存在强大的不变量永远保持true不变，而在非安全点可能会被忽视。 编译的Java代码和C / C ++代码都在安全点之间进行了优化，但跨安全点时却不那么优化。 JIT编译器在每个安全点发出GC映射。 VM中的C / C ++代码使用程式化的基于宏的约定（例如，TRAPS）来标记潜在的安全点。<br>类型</li><li>GC safepoint需要知道在那个程序位置上，调用栈、寄存器等一些重要的数据区域里什么地方包含了GC管理的指针；如果要触发一次GC，那么JVM里的所有Java线程都必须到达GC safepoint。</li><li>Deoptimization safepoint需要知道在那个程序位置上，原本抽象概念上的JVM的执行状态（所有局部变量、临时变量、锁，等等）到底分配到了什么地方，是在栈帧的具体某个slot还是在某个寄存器里，之类的。</li></ul><p>如果要执行一次deoptimization，那么需要执行deoptimization的线程要在到达deoptimization safepoint之后才可以开始deoptimize。HotSpot中，安全点位置主要在：</p><ul><li>方法返回之前</li><li>调用某个方法之后</li><li>抛出异常的位置</li><li>循环的末尾<br>为什么把这些位置设置为jvm的安全点呢,主要目的就是避免程序长时间无法进入safepoint,比如JVM在做GC之前要等所有的应用线程进入到安全点后VM线程才能分派GC任务 ,如果有线程一直没有进入到安全点,就会导致GC时JVM停顿时间延长,比如写了一个超大的循环导致线程一直没有进入到安全点,GC前停顿了8秒。</li></ul><p>之所以只在选定的位置放置安全点是因为：</p><ul><li>挂在安全点的调试符号信息要占用空间。如果允许每条机器码都可以是安全点的话，需要存储的数据量会很大（当然这有办法解决，例如用delta存储和用压缩）</li><li>安全点会影响优化。特别是deoptimization 安全点，会迫使JVM保留一些只有解释器可能需要的、JIT编译器认定无用的变量的值。本来JIT编译器可能可以发现某些值不需要而消除它们对应的运算，如果在安全点需要这些值的话那就只好保留了。这才是更重要的地方，所以要尽量少放置安全点</li><li>像HotSpot VM这样，在安全点会生成polling代码询问VM是否要“进入安全点”，polling也有开销所以要尽量减少。</li></ul><p>还有一种情况是当某个线程在执行native函数的时候。此时该线程在执行JVM管理之外的代码，不能对JVM的执行状态做任何修改，因而JVM要进入安全点不需要关心它。所以也可以把正在执行native函数的线程看作“已经进入了安全点”，或者把这种情况叫做“在safe-region里”。JVM外部要对JVM执行状态做修改必须要通过JNI。所有能修改JVM执行状态的JNI函数在入口处都有安全点检查，一旦JVM已经发出通知说此时应该已经到达安全点，就会在这些检查的地方停下来把控制权交给JVM。</p><p>日志<br>开启参数<br>-XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime</p><p>-XX:+PrintSafepointStatistics  -XX:PrintSafepointStatisticsCount=1</p><p>-XX:+UnlockDiagnosticVMOptions -XX:-DisplayVMOutput -XX:+LogVMOutput</p><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vmop [threads: total initially_running wait_to_block]    [time: spin block sync cleanup vmop] page_trap_count</span><br><span class="line">66935.969: GenCollectForAllocation [    1782          0              0    ]      [     0     0     0     3    15    ]  0</span><br></pre></td></tr></table></figure> <p>除了GC，其他触发安全点的VM Operation包括：</p><ol><li><p>Biased lock revocation 取消偏向锁</p></li><li><p>Class redefinition (e.g. javaagent，AOP的代码植入)</p></li><li><p>Various debug operation (e.g. thread dump 一条或所有线程，heapduump等)</p></li></ol><p>线程情况</p><ul><li>total: 所有的java线程数</li><li>initially_running: 号召进入安全点时，还是Running状态的线程数</li><li>wait_to_block: 所有线程都不Running时，仍不是Block状态的线程数</li></ul><p>时间情况</p><ul><li>spin: VMOP线程使用自旋，等待所有线程都不是Running的时间</li><li>block: VMOP线程基于锁，等待所有线程都是Block的时间</li><li>sync: spin+block +其他，这是从开始到进入安全点的总耗时</li><li>cleanup: 退出清理所用时间</li><li>vmop: 真正执行VM Operation的时间</li></ul><h3><span id="full-gc">Full GC</span></h3><p>触发条件</p><ol><li><p>由System.gc调用</p></li><li><p>老年代空间不足</p></li><li><p>永久代空间不足</p></li><li><p>gc 担保失败<br>在发生MinorGC前,检查老年代是否有连续空间,如果有,则执行,如果没有,根据设置:-XX:-HandlePromotionFailure 指定,如果打开,那么继续检查,当前老年代最大可用连续空间大于平均历次晋升到老年代大小,如果大于,则进行MinorGC,否则进行FullGC,如果HandlePromotionFailure 不设置 直接进行FullGC.</p></li><li><p>Cocurrent mode failure</p></li></ol><p>发生在cms的清理sweep阶段,发现有新的垃圾产生,而且老年代没有足够空间导致的</p><h3><span id="parnew">parnew</span></h3><p>使用的是复制算法，并行回收</p><p>并行：多条垃圾回收线程并行工作，用户线程仍处于等待状态</p><p>并发: 垃圾收集线程跟用户线程同时执行，不一定是并行，可能交替执行，垃圾收集程序运行在区分业务线程的另外一个CPU上</p><p>serial共用配置参数</p><p>-XX:SurvivorRatio</p><p>-XX:PretenureSizeThreshold</p><p>-XX:HandlePromotionFailure</p><p>启用参数</p><p>-XX：+UseConcMarkSweepGC</p><p>-XX: +UseParNewGC</p><p>性能参数</p><p>-XX:ParallelGCThreads &lt;=8?8:3+5n/8</p><p>触发条件</p><p>eden满了就进行</p><p>晋升条件</p><p>大对象直接进入老年代 PretenureSizeThreshold</p><p>长期存活对象将进入老年代 -XX:MaxTenuringThreshold=15</p><p>动态对象年龄判定 在Survivor空间相同年龄所有对象大小总和大于Survivor空间一半就会进入老年代</p><h3><span id="cms">cms</span></h3><h4><span id="gc-stage">gc stage</span></h4><p>1. CMS-initial-mark 初始标记</p><p>此阶段是初始标记阶段，是stop the world阶段，因此此阶段标记的对象只是从root集最直接可达的对象</p><p>2. CMS-concurrent-mark 并发标记</p><p>此阶段是和应用线程并发执行的，所谓并发收集器指的就是这个，主要作用是标记可达的对象</p><p>3. CMS-concurrent-preclean 执行预清理</p><p>此阶段主要是进行一些预清理，因为标记和应用线程是并发执行的，因此会有些对象的状态在标记后会改变，此阶段正是解决这个问题</p><p>4. CMS-concurrent-abortable-preclean 执行可中止预清理</p><p>加入此阶段的目的是使cms gc更加可控一些，作用也是执行一些预清理，以减少Rescan阶段造成应用暂停的时间</p><p>5. CMS-remark 重新标记</p><p>第二个stop the world阶段了，即Rescan阶段，此阶段暂停应用线程，对对象进行重新扫描并标记，主要是标记并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象</p><p>6. CMS-concurrent-sweep 并发清除</p><p>Start of sweeping of dead/non-marked objects. Sweeping is concurrent phase performed with all other threads running.</p><p>7. CMS-concurrent-reset 并发重设状态等待下次CMS的触发</p><p>In this phase, the CMS data structures are reinitialized so that a new cycle may begin at a later time. In this case, it took 0.127 secs.</p><h4><span id="线上用到的相关参数及新增参数">线上用到的相关参数及新增参数</span></h4><p>-XX:+CMSParallelInitialMarkEnabled</p><p>可以开启该阶段的并行标记，使用多个线程进行标记，减少暂停时间</p><p>-XX:+CMSParallelRemarkEnabled</p><p>同上，针对remark阶段</p><p>-XX:+UseCMSInitiatingOccupancyOnly</p><p>指定HotSpot VM总是使用-XX:CMSInitiatingOccupancyFraction的值作为old的空间使用率限制来启动CMS垃圾回收。</p><p>如果没有使用-XX:+UseCMSInitiatingOccupancyOnly，那么HotSpot VM只是利用这个值来启动第一次CMS垃圾回收，后面都是使用HotSpot VM自动计算出来的值。</p><p>-XX:CMSInitiatingOccupancyFraction=80</p><p>结合上面的参数使用，当老年代使用率达到百分之几的时候使用</p><p>-XX:+CMSScavengeBeforeRemark</p><p>这个选项强制HotSpot VM在CMS GC之前执行MinorGC，在再标记步骤之前做MinorGC，可以减少再标记的工作量，目的是减少young代的对象数</p><p>-XX:CMSMaxAbortablePrecleanTime：当abortable-preclean阶段执行达到这个时间时才会结束</p><p>-XX:CMSScheduleRemarkEdenSizeThreshold（默认2m）：控制abortable-preclean阶段什么时候开始执行，即当eden使用达到此值时，才会开始abortable-preclean阶段</p><p>-XX:CMSScheduleRemarkEdenPenetratio（默认50%）：控制abortable-preclean阶段什么时候结束执行</p><p>-XX:CMSWaitDuration=5010</p><p>保证了最晚每 X 毫秒进行一次判断是否要进行CMS GC，默认2S</p><p>-XX:+CMSClassUnloadingEnabled</p><p>允许CMS对永久代不再使用的对象进行回收</p><h4><span id="cms碎片整理">CMS碎片整理</span></h4><p>由于cms是基于标记-清理算法，会导致空间碎片，难以分配新的连续内存，所以要进行内存空间整理，保证可分配的连续性内存，要不然会触发full gc</p><p>-XX:+UseCMSCompactAtFullCollection</p><p>用于在full  GC之后增加一个碎片整理过程</p><p>-XX:CMSFullGCsBeforeCompaction=0</p><p>设置执行多少次不压缩的full  GC之后，跟着来一次碎片整理过程</p><h4><span id="线上其它参数">线上其它参数</span></h4><p>-XX:LargePageSizeInBytes=128M</p><p>系统内存页相关参数</p><p>详细资料 <a href="https://www.cnblogs.com/bonelee/p/6207037.html" target="_blank" rel="noopener">https://www.cnblogs.com/bonelee/p/6207037.html</a></p><p>-XX:+UseFastAccessorMethods</p><p>设置关闭快速调用成员方法，这里表述可能不是太准确。首先说明一下什么方法叫做AccessorMethods，</p><p>1必须是成员方法，静态方法不行，</p><p>2返回值类型必须是引用类型或者int，其它都不算，</p><p>3方法体的代码必须满足aload_0; getfield #index; areturn或ireturn这样的模式，方法名是什么都没关系，是不是get、is、has开头都不重要。</p><p>因为类方法方法体很简单，而且没有方法计数器，开启此设置后可以跳过对该类方法的编译。</p><p>但是貌似不推荐使用，详见以下链接</p><p><a href="http://cr.openjdk.java.net/~never/6385687/" target="_blank" rel="noopener">http://cr.openjdk.java.net/~never/6385687/</a></p><p>-XX:SoftRefLRUPolicyMSPerMB=0</p><p>设置每兆堆空闲空间中SoftReference的存活时间，默认值是1s</p><h4><span id="cms-gc-触发条件">CMS GC 触发条件</span></h4><ol><li><p>FullGC</p></li><li><p>预计完成CMS回收所需要的时间小于预计的老年代填满的时间</p></li><li><p>判断老年代内存使用率是否大于初始化参数，如果为true，则触发GC，如果为false，且UseCMSInitiatingOccupancyOnly 为true，则返回false</p></li><li><p>判断年轻代存活的对象晋升是否可能会失败，如果失败，触发GC。</p></li><li><p>如果metaSpace认为需要回收metaSpace区域，也会触发一次cms回收</p></li></ol><h2><span id="qampa">Q&amp;A</span></h2><p>在公司进行了分享，最后给听客问了几个问题，感觉算是分享的小考核吧，如果您有幸看到这篇文章并且看到这里不妨尝试着回答下:</p><ol><li><p>实测新生代使用率90%左右会触发mirror gc,为什么？</p></li><li><p>为什么线上不将CMSParallelInitialMarkEnabled作为默认参数?</p></li><li><p>mirror gc ,young gc,major gc ,full gc的区别</p></li><li><p>结合jvm内存模型讲一下GC过程在每个区域的变化</p></li><li><p>CMSWaitDuration的值为什么要这样设置？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;利器介绍&quot;&gt;利器介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;       &lt;a href=&quot;https://gceasy.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gceasy&lt;/a&gt; 是一个国外在线的gc日志分析工具，可以帮你快
      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="java基础" scheme="https://super-sean.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JVM" scheme="https://super-sean.github.io/tags/JVM/"/>
    
      <category term="内存" scheme="https://super-sean.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>基于solr服务提供通用配置化接口服务</title>
    <link href="https://super-sean.github.io/2019/05/15/%E5%9F%BA%E4%BA%8Esolr%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1/"/>
    <id>https://super-sean.github.io/2019/05/15/基于solr服务提供通用配置化接口服务/</id>
    <published>2019-05-15T06:24:00.000Z</published>
    <updated>2019-05-15T09:22:34.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&ensp; &ensp;&ensp; &ensp;公司内部有基于solr搜索平台服务，在做需求的过程中，对接了搜索平台，发现可以将搜索平台的交互抽象并使用配置化的方式进行数据请求，这样一来，可以通过配置化的方式达到数据查询需求的快速实现，提高开发效率，于是进行了技术方案的设计与评估。  </p><h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><img src="/2019/05/15/基于solr服务提供通用配置化接口服务/architecture.png" title="architecture">  <h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><img src="/2019/05/15/基于solr服务提供通用配置化接口服务/sequence.png" title="sequence">  <h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><img src="/2019/05/15/基于solr服务提供通用配置化接口服务/class_diagram.png" title="class_diagram">  <h4 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h4><img src="/2019/05/15/基于solr服务提供通用配置化接口服务/config_model.png" title="config_model">  <h3 id="项目落地情况"><a href="#项目落地情况" class="headerlink" title="项目落地情况"></a>项目落地情况</h3><p>&ensp; &ensp;&ensp; &ensp;经过一个3天快速开发及2天自测，开发好了第一个版本，service+http服务，不带可视化配置支持，紧接着对接了一个新需求，有直接对接http接口的，也有对接service的，在对接过程中情况如下  </p><h4 id="好处-优点"><a href="#好处-优点" class="headerlink" title="好处/优点"></a>好处/优点</h4><ul><li>业务服务不用多次对接数据源层的实现，可以做到只要导入数据即可通过通用接口查询，节省调试的时间</li><li>因为配置化，支持热变更，快速调整入参及结果，节省联调时间</li><li>添加通用额外业务实体关联配置支持扩展源数据  </li><li>最大的好处直接提供配置即可提供http接口，无需开发</li><li>配置模板一般比较简单，复杂需求才有可能会稍微比较复杂  </li></ul><h4 id="坏处-缺点"><a href="#坏处-缺点" class="headerlink" title="坏处/缺点"></a>坏处/缺点</h4><ul><li>前期服务还未完善前，联调链变长，会有在业务开发和搜索平台中间多一层服务需要调试的错觉</li><li>基于solr本身的特点，在数据分页的方式上会有特殊要求，是基于游标滚动的形式翻页，导致前端需要支持多一种分页查询的方法  </li><li>还不能支持过于复杂的聚合查询,比如group by 字段A ,聚合查询count(带条件 字段B) 这样的查询目前还支持不了，只能支持group by 字段A ，count(B的各种值)，比如按分类（字段A）的聚合后推荐状态为1(字段B)的个数这样的支持不了，但是可以支持按分类（字段A）的聚合后不同推荐状态(字段B)的个数  </li><li>目前还没有可视化的配置支持，接口一但多起来便会很难管理  </li><li>业务如果对通用接口做熔断，只能涉及到的操作都统一处理，除非可以做到按参数熔断，公司目前的熔断器还不支持  </li><li>solr的数据更新延迟问题  <h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4>&ensp; &ensp;&ensp; &ensp;看起来貌似问题多多，但是好处的吸引力很大，而且遇到的问题貌似并没有不可解决的</li></ul><h3 id="项目计划"><a href="#项目计划" class="headerlink" title="项目计划"></a>项目计划</h3><ul><li>支持可视化配置，区分业务模块及api Id,后期支持对业务及api id限流</li><li>支持dataset的缓存策略配置</li><li>结合前端，可自研BI系统，这样连前端的后台活动类开发工作都可以减少</li><li>支持修改更新配置操作，支持事务操作  </li><li>支持不同数据源</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>&ensp; &ensp;&ensp; &ensp;查询某个集合的原始字段,通过stat_date_s及nj_id_l两个字段过滤及自定义排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;id&quot;:xxx,</span><br><span class="line">&quot;key&quot;:&quot;xxx&quot;,</span><br><span class="line">&quot;searchToken&quot;:&quot;xxx&quot;,</span><br><span class="line">&quot;type&quot;:&quot;list&quot;,</span><br><span class="line">&quot;fields&quot;:[</span><br><span class="line">],</span><br><span class="line">&quot;queries&quot;:[</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;stat_date_s&quot;,&quot;type&quot;:&quot;mix&quot;&#125;,</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;nj_id_l&quot;,&quot;type&quot;:&quot;field&quot;&#125; </span><br><span class="line">],</span><br><span class="line">&quot;sorts&quot;:[</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;nj_id_l&quot;,&quot;type&quot;:&quot;asc&quot;&#125;,</span><br><span class="line">&#123;&quot;fieldName&quot;:&quot;stat_date_s&quot;,&quot;type&quot;:&quot;asc&quot;&#125;</span><br><span class="line">],</span><br><span class="line"> &quot;facets&quot;:&#123;&#125;,</span><br><span class="line"> &quot;extInfo&quot;:[ </span><br><span class="line"> ],</span><br><span class="line"> &quot;fieldValueTransfer&quot;:[</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><p>&ensp; &ensp;&ensp; &ensp;复杂一点的列表查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;id&quot;:xxx,</span><br><span class="line">&quot;key&quot;:&quot;xxx&quot;,</span><br><span class="line">&quot;searchToken&quot;:&quot;xxx&quot;,</span><br><span class="line">&quot;type&quot;:&quot;list&quot;,</span><br><span class="line">&quot;fields&quot;:[</span><br><span class="line">&#123;&quot;fieldName&quot;:&quot;id&quot;,&quot;alias&quot;:&quot;recordId&quot;&#125;,</span><br><span class="line">&#123;&quot;fieldName&quot;:&quot;nj_id_l&quot;,&quot;alias&quot;:&quot;anchorId&quot;&#125;,</span><br><span class="line">...</span><br><span class="line">],</span><br><span class="line">&quot;queries&quot;:[</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;stat_date_s&quot;,&quot;alias&quot;:&quot;statDate&quot;,&quot;type&quot;:&quot;field&quot;&#125;,</span><br><span class="line"> ... </span><br><span class="line">],</span><br><span class="line">&quot;sorts&quot;:[</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;nj_id_l&quot;,&quot;type&quot;:&quot;asc&quot;&#125;</span><br><span class="line">],</span><br><span class="line"> &quot;facets&quot;:&#123;&#125;,</span><br><span class="line"> &quot;extInfo&quot;:[</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;connectFieldName&quot;:&quot;anchorId&quot;,</span><br><span class="line"> &quot;type&quot;:&quot;user&quot;,</span><br><span class="line"> &quot;field&quot;:[</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;name&quot;&#125;,</span><br><span class="line"> &#123;&quot;fieldName&quot;:&quot;thumb&quot;&#125; </span><br><span class="line"> ]</span><br><span class="line"> &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;fieldValueTransfer&quot;:[</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;fieldName&quot;:&quot;anchorGroup&quot;,</span><br><span class="line"> &quot;items&quot;:[</span><br><span class="line"> &#123;&quot;og&quot;:&quot;xxx主播&quot;,&quot;biz&quot;:0&#125;,</span><br><span class="line"> &#123;&quot;og&quot;:&quot;xxxx主播&quot;,&quot;biz&quot;:1&#125; </span><br><span class="line">            ]</span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//看下http接口的请求及返回  </span><br><span class="line">参数</span><br><span class="line">&#123;</span><br><span class="line">&quot;statDate&quot;:&quot;2019-05-07T00:00:00Z&quot;,</span><br><span class="line">&quot;regTime&quot;:&#123;&quot;start&quot;:&quot;2013-07-30&quot;,&quot;end&quot;:&quot;2013-08-30&quot;&#125;,    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;anchorIndex&quot;: xxx,</span><br><span class="line">      &quot;replayCountDaily&quot;: 0,</span><br><span class="line">      &quot;anchorCover&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;hasPay&quot;: xx,</span><br><span class="line">      &quot;fansCount&quot;: xxx,</span><br><span class="line">      &quot;anchorGroup&quot;: &quot;&quot;,</span><br><span class="line">      &quot;source&quot;: &quot;&quot;,</span><br><span class="line">      &quot;anchorId&quot;: xxx,</span><br><span class="line">      &quot;anchorName&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;anchorLevel&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;recordId&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;regTime&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;anchorCategory&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;replayCount&quot;: 0,</span><br><span class="line">      &quot;voiceCount&quot;: xxx,</span><br><span class="line">      &quot;replayCountWeekly&quot;: 0,</span><br><span class="line">      &quot;band&quot;: xxx,</span><br><span class="line">      &quot;lived&quot;: 0,</span><br><span class="line">      &quot;recommendStatus&quot;: &quot;&quot;,</span><br><span class="line">      &quot;lastUpdateTime&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;firstVoiceTime&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;,...</span><br><span class="line">  ],</span><br><span class="line">  &quot;msg&quot;: &quot;OK&quot;,</span><br><span class="line">  &quot;page&quot;: &#123;</span><br><span class="line">    &quot;cursor&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;isLastPage&quot;: true,</span><br><span class="line">    &quot;pageSize&quot;: 30,</span><br><span class="line">    &quot;totalCount&quot;: 13,</span><br><span class="line">    &quot;type&quot;: &quot;cursor&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><p>&ensp; &ensp;&ensp; &ensp;聚合查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: xxx,</span><br><span class="line">&quot;key&quot;: &quot;xxx&quot;,</span><br><span class="line">&quot;searchToken&quot;: &quot;xxx&quot;,</span><br><span class="line">&quot;type&quot;: &quot;agg&quot;,</span><br><span class="line">&quot;fields&quot;: [],</span><br><span class="line">&quot;queries&quot;: [&#123;</span><br><span class="line">&quot;fieldName&quot;: &quot;stat_date_s&quot;,</span><br><span class="line">&quot;alias&quot;: &quot;statDate&quot;,</span><br><span class="line">&quot;type&quot;: &quot;field&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;fieldName&quot;: &quot;user_type_ti&quot;,</span><br><span class="line">&quot;alias&quot;: &quot;userType&quot;,</span><br><span class="line">&quot;type&quot;: &quot;field&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;sorts&quot;: [],</span><br><span class="line">&quot;facets&quot;: &#123;</span><br><span class="line">&quot;groupByFieldName&quot;: &quot;xxxx&quot;,</span><br><span class="line">&quot;groupByFieldAlias&quot;: &quot;xxxx&quot;,</span><br><span class="line">&quot;alias&quot;: [&#123;</span><br><span class="line">&quot;fieldName&quot;: &quot;status_0_count&quot;,</span><br><span class="line">&quot;alias&quot;: &quot;recommendCount&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;fieldName&quot;: &quot;status_1_count&quot;,</span><br><span class="line">&quot;alias&quot;: &quot;forbiddenCount&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;items&quot;: [&#123;</span><br><span class="line">&quot;type&quot;: &quot;agg&quot;,</span><br><span class="line">&quot;fieldName&quot;: &quot;status_s&quot;,</span><br><span class="line">&quot;aggName&quot;: &quot;status&quot;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;extInfo&quot;: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http请求无参数,返回结果</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;anchorClassTotal&quot;: xxx,</span><br><span class="line">      &quot;anchorClass&quot;: &quot;xxx&quot;,</span><br><span class="line">      &quot;noStatusCount&quot;: xxx</span><br><span class="line">    &#125;,...</span><br><span class="line">  ],</span><br><span class="line">  &quot;msg&quot;: &quot;OK&quot;,</span><br><span class="line">  &quot;page&quot;: &#123;</span><br><span class="line">    &quot;cursor&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;isLastPage&quot;: false,</span><br><span class="line">    &quot;pageNo&quot;: 0,</span><br><span class="line">    &quot;pageSize&quot;: 30,</span><br><span class="line">    &quot;totalCount&quot;: xxx,</span><br><span class="line">    &quot;type&quot;: &quot;pagination&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&amp;ensp; &amp;ensp;&amp;ensp; &amp;ensp;公司内部有基于solr搜索平台服务，在做需求的过程中，对接了搜索平台，发现可以将搜索平台
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="数据平台" scheme="https://super-sean.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>long-gc案例分析</title>
    <link href="https://super-sean.github.io/2019/05/04/long-gc%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://super-sean.github.io/2019/05/04/long-gc案例分析/</id>
    <published>2019-05-04T09:41:00.000Z</published>
    <updated>2019-05-19T13:01:23.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="long-gc优化"><a href="#long-gc优化" class="headerlink" title="long gc优化"></a>long gc优化</h3><p>&ensp; &ensp;&ensp; &ensp;近来发现负责研发的项目总是会收到long-gc的告警，比如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">major GC: - 2 (No GC) start: 2019-05-06 06:18:47.678, end: 2019-05-06 06:18:53.125 </span><br><span class="line">[Par Survivor Space] init:209664K; used:19.7%(41348K) -&gt; 19.7%(41348K); committed: 100.0%(209664K) -&gt; 100.0%(209664K) </span><br><span class="line">[Code Cache] init:2496K; used:19.7%(48450K) -&gt; 19.7%(48430K); committed: 19.9%(49088K) -&gt; 19.9%(49088K) </span><br><span class="line">[Compressed Class Space] init:0K; used:0.7%(7721K) -&gt; 0.7%(7721K); committed: 0.7%(8040K) -&gt; 0.7%(8040K) </span><br><span class="line">[Metaspace] init:0K; used:68569K -&gt; 68574K); committed: 69932K -&gt; 69932K) </span><br><span class="line">[Par Eden Space] init:1677824K; used:57.3%(961524K) -&gt; 59.6%(1001110K); committed: 100.0%(1677824K) -&gt; 100.0%(1677824K) </span><br><span class="line">[CMS Old Gen] init:1048576K; used:23.8%(250428K) -&gt; 13.4%(140549K); committed: 100.0%(1048576K) -&gt; 100.0%(1048576K) </span><br><span class="line">duration:5447ms, throughput:99.9% </span><br><span class="line"></span><br></pre></td></tr></table></figure> <p>&ensp; &ensp;&ensp; &ensp;可以直接看到用的parnew + cms的收集器组合,也能看得出来主要回收行为发生在 old gen，所以就提取gc的日志来看，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2019-05-06T06:18:47.678+0800: 16712.771: [GC (CMS Initial Mark) [1 CMS-initial-mark: 250428K(1048576K)] 1253301K(2936064K), 0.0643432 secs] [Times: user=1.12 sys=0.00, real=0.06 secs]</span><br><span class="line">2019-05-06T06:18:47.742+0800: 16712.836: Total time for which application threads were stopped: 0.0655335 seconds, Stopping threads took: 0.0001332 seconds</span><br><span class="line">2019-05-06T06:18:47.742+0800: 16712.836: [CMS-concurrent-mark-start]</span><br><span class="line">2019-05-06T06:18:47.820+0800: 16712.913: [CMS-concurrent-mark: 0.077/0.077 secs] [Times: user=0.41 sys=0.00, real=0.07 secs]</span><br><span class="line">2019-05-06T06:18:47.820+0800: 16712.913: [CMS-concurrent-preclean-start]</span><br><span class="line">2019-05-06T06:18:47.831+0800: 16712.924: [CMS-concurrent-preclean: 0.010/0.011 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]</span><br><span class="line">2019-05-06T06:18:47.831+0800: 16712.924: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line">2019-05-06T06:18:49.745+0800: 16714.839: Total time for which application threads were stopped: 0.0014635 seconds, Stopping threads took: 0.0001513 seconds</span><br><span class="line"> CMS: abort preclean due to time </span><br><span class="line">2019-05-06T06:18:52.845+0800: 16717.939: [CMS-concurrent-abortable-preclean: 4.912/5.014 secs] [Times: user=5.40 sys=0.83, real=5.02 secs]</span><br><span class="line">2019-05-06T06:18:52.846+0800: 16717.940: [GC (CMS Final Remark) [YG occupancy: 1042070 K (1887488 K)]</span><br><span class="line">2019-05-06T06:18:52.847+0800: 16717.940: [Rescan (parallel) , 0.1073388 secs]</span><br><span class="line">2019-05-06T06:18:52.954+0800: 16718.047: [weak refs processing, 0.0108072 secs]</span><br><span class="line">2019-05-06T06:18:52.965+0800: 16718.058: [class unloading, 0.0341564 secs]2019-05-06T06:18:52.999+0800: 16718.092: [scrub symbol table, 0.0079842 secs]</span><br><span class="line">2019-05-06T06:18:53.007+0800: 16718.100: [scrub string table, 0.0021272 secs][1 CMS-remark: 250428K(1048576K)] 1292498K(2936064K), 0.1678019 secs] [Times: user=1.54 sys=0.00, real=0.17 secs]</span><br><span class="line">2019-05-06T06:18:53.014+0800: 16718.108: Total time for which application threads were stopped: 0.1689968 seconds, Stopping threads took: 0.0001364 seconds</span><br><span class="line">2019-05-06T06:18:53.015+0800: 16718.108: [CMS-concurrent-sweep-start]</span><br><span class="line">2019-05-06T06:18:53.125+0800: 16718.219: [CMS-concurrent-sweep: 0.111/0.111 secs] [Times: user=0.13 sys=0.03, real=0.11 secs]</span><br><span class="line">2019-05-06T06:18:53.125+0800: 16718.219: [CMS-concurrent-reset-start]</span><br><span class="line">2019-05-06T06:18:53.128+0800: 16718.222: [CMS-concurrent-reset: 0.003/0.003 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]</span><br></pre></td></tr></table></figure> </p><p>&ensp; &ensp;&ensp; &ensp;眼尖的人可能已经看出来，事实上会stw的过程并没有很长,重点主要看CMS-initial-mark 和 CMS-remark 的记录，可以看到时间比较正常，所以看来CAT的long-gc告警是针对整个gc耗时的。接着看可以发现abortable-preclean的耗时比较长，如果对CMS gc每个阶段的工作都比较清楚，很快就可以找到方法解决。那我们的目标就是降低preclean的时长且不影响remark的时长，并且不会对gc的总体时长及频率带来影响。<br>&ensp; &ensp;&ensp; &ensp;既然abortable-preclean长达5秒，那就先把preclean的最长时间限制设置短，添加-XX:CMSMaxAbortablePrecleanTime=1000参数。添加之后如果不做其它操作，有可能会带来remark的时间增加，所以基于preclean的特性，自然想到remark之前减少remark的工作负担，那就添加参数<br>-XX:CMSScheduleRemarkEdenPenetration=20<br>&ensp; &ensp;&ensp; &ensp;CMSScheduleRemarkEdenSizeThreshold、CMSScheduleRemarkEdenPenetration，默认值分别是2M、50%。两个参数组合起来的意思是预清理后，eden空间使用超过2M时启动可中断的并发预清理（CMS-concurrent-abortable-preclean），直到eden空间使用率达到50%时中断，进入remark阶段。我们设置成20，让Preclean更快地进入remark阶段<br>-XX:+CMSScavengeBeforeRemark 在remark强制触发一次mirror gc<br>&ensp; &ensp;&ensp; &ensp;这样配置的结果其实也可以预见，总的pause time会增加，按天来算的话，但是假设单次gc的时间加上强制触发的时间比之前的单次gc时间要短且总的puase time不会增加很多，那就达到我们的目的了。那多少才算多，具体得看应用的情况了。<br>&ensp; &ensp;&ensp; &ensp;看一下配置前后的gc情况<br>未配置参数前<br><img src="/2019/05/04/long-gc案例分析/crawler_old_cms_stage_avg.png" title="old"><br>配置参数后<br><img src="/2019/05/04/long-gc案例分析/crawler_new_cms_stage_avg.png" title="new"><br>而总的pause时间并没有增加，所以该问题得到了解决  </p><h3 id="优化后遇到的另一个问题"><a href="#优化后遇到的另一个问题" class="headerlink" title="优化后遇到的另一个问题"></a>优化后遇到的另一个问题</h3><p>&ensp; &ensp;&ensp; &ensp;在同一个项目进行配置后过了几天，突然出现不断进行CMS GC的情况，分析GC日志情况如下<br>堆内存情况<br><img src="/2019/05/04/long-gc案例分析/crawler_old_heap.png" title="old"><br>GC cause<br><img src="/2019/05/04/long-gc案例分析/crawler_old_GC_cause.png" title="cause_old"><br>&ensp; &ensp;&ensp; &ensp;看到这两个模块的情况，基于上可以推测是新生代和老年代内存配置问题，检查jvm内存参数配置，发现配置了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">-XX:MaxHeapSize=3221225472</span><br><span class="line">-XX:MaxNewSize=2147483648</span><br></pre></td></tr></table></figure><br>&ensp; &ensp;&ensp; &ensp;也就是说配置了新生代与老年代的比例大约是2:1，官方默认配置在x86机器是应该是1:8，网上大部分资料都推荐是1:2,如果新生代配置比老年代小，有新生代晋升比较快的情况会导致CMS处理不过来,将参数调整为MaxHeapSize为4G，MaxNewSize略小于2G就不再出现  </p><h3 id="神奇的长initial-Mark及YGC过长的sys时间"><a href="#神奇的长initial-Mark及YGC过长的sys时间" class="headerlink" title="神奇的长initial Mark及YGC过长的sys时间"></a>神奇的长initial Mark及YGC过长的sys时间</h3><p>&ensp; &ensp;&ensp; &ensp;在GC日志中发偶尔initial Mark偶尔会比较长，有出现1s以上的情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">2019-05-10T13:03:18.282+0800: 61533.941: [GC2019-05-10T13:03:18.283+0800: 61533.942: [ParNew: 848736K-&gt;9204K(943744K), 0.0091360 secs] 2526438K-&gt;1686979K(3040896K), 0.0105130 secs] [Times: user=0.10 sys=0.01, real=0.01 secs]</span><br><span class="line">2019-05-10T13:03:18.293+0800: 61533.952: Total time for which application threads were stopped: 0.0152630 seconds</span><br><span class="line">2019-05-10T13:03:18.296+0800: 61533.956: [GC [1 CMS-initial-mark: 1677774K(2097152K)] 1687161K(3040896K), 1.4645810 secs] [Times: user=0.00 sys=1.49, real=1.47 secs]</span><br><span class="line">2019-05-10T13:03:19.761+0800: 61535.421: Total time for which application threads were stopped: 1.4685620 seconds</span><br><span class="line">2019-05-10T13:03:19.762+0800: 61535.421: [CMS-concurrent-mark-start]</span><br><span class="line">2019-05-10T13:03:19.765+0800: 61535.425: Total time for which application threads were stopped: 0.0031970 seconds</span><br><span class="line">2019-05-10T13:03:19.780+0800: 61535.439: Total time for which application threads were stopped: 0.0044250 seconds</span><br><span class="line">2019-05-10T13:03:19.880+0800: 61535.540: [CMS-concurrent-mark: 0.111/0.119 secs] [Times: user=1.30 sys=0.30, real=0.12 secs]</span><br><span class="line">2019-05-10T13:03:19.881+0800: 61535.540: [CMS-concurrent-preclean-start]</span><br><span class="line">2019-05-10T13:03:19.900+0800: 61535.560: [CMS-concurrent-preclean: 0.019/0.020 secs] [Times: user=0.06 sys=0.00, real=0.02 secs]</span><br><span class="line">2019-05-10T13:03:19.901+0800: 61535.560: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line"> CMS: abort preclean due to time 2019-05-10T13:03:20.905+0800: 61536.564: [CMS-concurrent-abortable-preclean: 0.999/1.004 secs] [Times: user=1.80 sys=0.20, real=1.00 secs]</span><br><span class="line">2019-05-10T13:03:20.909+0800: 61536.568: [GC[YG occupancy: 470719 K (943744 K)]2019-05-10T13:03:20.909+0800: 61536.568: [GC2019-05-10T13:03:20.909+0800: 61536.569: [ParNew: 470719K-&gt;11056K(943744K), 0.0087720 secs] 2148494K-&gt;1688888K(3040896K), 0.0100970 secs] [Times: user=0.10 sys=0.01, real=0.01 secs]</span><br><span class="line">2019-05-10T13:03:20.919+0800: 61536.579: [Rescan (parallel) , 0.0042770 secs]2019-05-10T13:03:20.923+0800: 61536.583: [weak refs processing, 0.0237130 secs]2019-05-10T13:03:20.947+0800: 61536.607: [class unloading, 0.0255570 secs]2019-05-10T13:03:20.973+0800: 61536.632: [scrub symbol table, 0.0084850 secs]2019-05-10T13:03:20.981+0800: 61536.641: [scrub string table, 0.0014630 secs] [1 CMS-remark: 1677831K(2097152K)] 1688888K(3040896K), 0.1002410 secs] [Times: user=0.25 sys=0.01, real=0.10 secs]</span><br><span class="line">2019-05-10T13:03:21.010+0800: 61536.669: Total time for which application threads were stopped: 0.1046380 seconds</span><br><span class="line">2019-05-10T13:03:21.010+0800: 61536.669: [CMS-concurrent-sweep-start]</span><br><span class="line">2019-05-10T13:03:21.013+0800: 61536.673: Total time for which application threads were stopped: 0.0034750 seconds</span><br><span class="line">2019-05-10T13:03:21.016+0800: 61536.675: Total time for which application threads were stopped: 0.0027740 seconds</span><br><span class="line">2019-05-10T13:03:21.019+0800: 61536.678: Total time for which application threads were stopped: 0.0025430 seconds</span><br><span class="line">2019-05-10T13:03:21.021+0800: 61536.680: Total time for which application threads were stopped: 0.0022570 seconds</span><br><span class="line">2019-05-10T13:03:21.023+0800: 61536.683: Total time for which application threads were stopped: 0.0019970 seconds</span><br><span class="line">2019-05-10T13:03:21.025+0800: 61536.684: Total time for which application threads were stopped: 0.0019480 seconds</span><br><span class="line">2019-05-10T13:03:21.027+0800: 61536.687: Total time for which application threads were stopped: 0.0021600 seconds</span><br><span class="line">2019-05-10T13:03:21.029+0800: 61536.689: Total time for which application threads were stopped: 0.0021560 seconds</span><br><span class="line">2019-05-10T13:03:21.031+0800: 61536.691: Total time for which application threads were stopped: 0.0020060 seconds</span><br><span class="line">2019-05-10T13:03:21.033+0800: 61536.693: Total time for which application threads were stopped: 0.0021040 seconds</span><br><span class="line">2019-05-10T13:03:21.040+0800: 61536.700: Total time for which application threads were stopped: 0.0041470 seconds</span><br><span class="line">2019-05-10T13:03:22.343+0800: 61538.003: [CMS-concurrent-sweep: 1.309/1.333 secs] [Times: user=2.36 sys=0.23, real=1.33 secs]</span><br><span class="line">2019-05-10T13:03:22.343+0800: 61538.003: [CMS-concurrent-reset-start]</span><br><span class="line">2019-05-10T13:03:22.353+0800: 61538.013: [CMS-concurrent-reset: 0.010/0.010 secs] [Times: user=0.02 sys=0.01, real=0.01 secs]</span><br></pre></td></tr></table></figure><br>&ensp; &ensp;&ensp; &ensp;查看安全点日志,并没有发现异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">61533.938: GenCollectForAllocation          [    1780          0              0    ]      [     0     0     0     3    11    ]  0</span><br></pre></td></tr></table></figure><br>&ensp; &ensp;&ensp; &ensp;所以既没有vmop，也没有应用线程号召安全点阻塞的情况，user为0，real却为1.47，同时sys为1.49<br>一般来说real时间远大于user时间有可能由两方面导致，一是比较重的 I/O 行为包括网络连接及磁盘操作,另一个是CPU资源紧缺.通过zbx观察机器对应时间的io、tcp连接及cpu情况，都比较正常，参考文章（<a href="https://blog.gceasy.io/2016/12/08/real-time-greater-than-user-and-sys-time/" target="_blank" rel="noopener">点击查看</a>）。基于sys &gt; user的情况的分析文章(<a href="https://blog.gceasy.io/2016/12/11/sys-time-greater-than-user-time/" target="_blank" rel="noopener">点击查看</a>)<br>&ensp; &ensp;&ensp; &ensp;查看hotspot源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">void VM_CMS_Initial_Mark::doit() &#123;</span><br><span class="line">  if (lost_race()) &#123;</span><br><span class="line">    // Nothing to do.</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  HS_DTRACE_PROBE(hs_private, cms__initmark__begin);</span><br><span class="line"></span><br><span class="line">  GenCollectedHeap* gch = GenCollectedHeap::heap();</span><br><span class="line">  GCCauseSetter gccs(gch, GCCause::_cms_initial_mark);</span><br><span class="line"></span><br><span class="line">  VM_CMS_Operation::verify_before_gc();</span><br><span class="line"></span><br><span class="line">  IsGCActiveMark x; // stop-world GC active</span><br><span class="line">  _collector-&gt;do_CMS_operation(CMSCollector::CMS_op_checkpointRootsInitial);</span><br><span class="line"></span><br><span class="line">  VM_CMS_Operation::verify_after_gc();</span><br><span class="line">  HS_DTRACE_PROBE(hs_private, cms__initmark__end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void VM_CMS_Operation::verify_before_gc() &#123;</span><br><span class="line">  if (VerifyBeforeGC &amp;&amp;</span><br><span class="line">      GenCollectedHeap::heap()-&gt;total_collections() &gt;= VerifyGCStartAt) &#123;</span><br><span class="line">    HandleMark hm;</span><br><span class="line">    FreelistLocker x(_collector);</span><br><span class="line">    MutexLockerEx  y(_collector-&gt;bitMapLock(), Mutex::_no_safepoint_check_flag);</span><br><span class="line">    Universe::heap()-&gt;prepare_for_verify();</span><br><span class="line">    Universe::verify(true);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CMSCollector::do_CMS_operation(CMS_op_type op) &#123;</span><br><span class="line">  gclog_or_tty-&gt;date_stamp(PrintGC &amp;&amp; PrintGCDateStamps);</span><br><span class="line">  TraceCPUTime tcpu(PrintGCDetails, true, gclog_or_tty);</span><br><span class="line">  TraceTime t(&quot;GC&quot;, PrintGC, !PrintGCDetails, gclog_or_tty);</span><br><span class="line">  TraceCollectorStats tcs(counters());</span><br><span class="line"></span><br><span class="line">  switch (op) &#123;</span><br><span class="line">    case CMS_op_checkpointRootsInitial: &#123;</span><br><span class="line">      SvcGCMarker sgcm(SvcGCMarker::OTHER);</span><br><span class="line">      checkpointRootsInitial(true);       // asynch</span><br><span class="line">      if (PrintGC) &#123;</span><br><span class="line">        _cmsGen-&gt;printOccupancy(&quot;initial-mark&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    case CMS_op_checkpointRootsFinal: &#123;</span><br><span class="line">      SvcGCMarker sgcm(SvcGCMarker::OTHER);</span><br><span class="line">      checkpointRootsFinal(true,    // asynch</span><br><span class="line">                           false,   // !clear_all_soft_refs</span><br><span class="line">                           false);  // !init_mark_was_synchronous</span><br><span class="line">      if (PrintGC) &#123;</span><br><span class="line">        _cmsGen-&gt;printOccupancy(&quot;remark&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    default:</span><br><span class="line">      fatal(&quot;No such CMS_op&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void VM_CMS_Operation::verify_after_gc() &#123;</span><br><span class="line">  if (VerifyAfterGC &amp;&amp;</span><br><span class="line">      GenCollectedHeap::heap()-&gt;total_collections() &gt;= VerifyGCStartAt) &#123;</span><br><span class="line">    HandleMark hm;</span><br><span class="line">    FreelistLocker x(_collector);</span><br><span class="line">    MutexLockerEx  y(_collector-&gt;bitMapLock(), Mutex::_no_safepoint_check_flag);</span><br><span class="line">    Universe::verify(true);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><p>&ensp; &ensp;&ensp; &ensp; 进入到vmop操作即do_CMS_operation(CMSCollector::CMS_op_checkpointRootsInitial),怀疑是操作前有cpu资源等待的情况，由于机器为32个虚拟核，而机器上的java实例达到了16个，cpu并非独享，查看jvm参数，没有开启并行initial mark，添加参数CMSParallelInitialMarkEnabled进行观察，同时添加-XX:CMSWaitDuration=5010  </p><p>&ensp; &ensp;&ensp; &ensp; 同时发现parnew也有类似的情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">2019-05-03T11:19:26.016+0800: 320262.210: [GC2019-05-03T11:19:26.017+0800: 320262.211: [ParNew: 847306K-&gt;8507K(943744K), 0.7853400 secs] 2462473K-&gt;1623871K(3040896K), 0.7866170 secs] [Times: user=0.18 sys=0.80, real=0.78 secs]</span><br></pre></td></tr></table></figure><br>&ensp; &ensp;&ensp; &ensp; 调取安全点日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">320262.188: GenCollectForAllocation          [    1782          0              0    ]      [     0     0     0     8   787    ]  0</span><br></pre></td></tr></table></figure><br>&ensp; &ensp;&ensp; &ensp; 可以看到没有线程wait to block,spin,block及sync的时间都正常，时间都集中在vmop中，也就是说安全点的操作并没有产生额外的耗时，结合gc的日志，可以看得出来gc线程本身的操作是正常的，那问题集中在gc日志的real时间及safepoint日志的vmop时间。虑到一样是cpu非独占的情况，查看jvm参数，发现ParallelGCThreads设置为20，上面提到机器是32虚拟核，16个java实例，估怀疑还是cpu资源抢占的问题，将ParallelGCThreads设置为8,进行观察<br>&ensp; &ensp;&ensp; &ensp; 分析到这里其实可以知道已经非程序内部可以调整的问题，一开始以为与io阻塞相关，想先从hsperfdata进行实验,但发现已经添加了参数PerfDisableSharedMem,如果定位cpu抢占资源的情况是错的，那只能通过strace跟进进程系统调用</p><p>配置前<br><img src="/2019/05/04/long-gc案例分析/voice_old_cms.png" title="old"><br>配置后<br><img src="/2019/05/04/long-gc案例分析/voice_new_cms.png" title="new"><br>可以看到initial mark和remark都比之前的要少，而且initial mark的时间转为正常，没有再出现上述情况，但是发现young gc的总耗时变长,之前是一天5分钟左右，现在是11分钟，如下<br>配置前<br><img src="/2019/05/04/long-gc案例分析/voice_old_young.png" title="old"><br>配置后<br><img src="/2019/05/04/long-gc案例分析/voice_new_young.png" title="new">  </p><p>查看堆内存情况<br>配置前<br><img src="/2019/05/04/long-gc案例分析/voice_old_heap.png" title="old"><br>配置后<br><img src="/2019/05/04/long-gc案例分析/voice_new_heap.png" title="new">  </p><p>&ensp; &ensp;&ensp; &ensp;这样看就很明显了，查看jvm参数没有配置新生代内存占用大小或比例，添加xmn参数指定1g，解决young gc次数增加的情况。  </p><p>&ensp; &ensp;&ensp; &ensp;另外parnew的长耗时问题，也得到改善，之前每天都有超过1s的情况，在新配置上线后降低了长耗时的出现频率。至少可判断猜想是正确的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;long-gc优化&quot;&gt;&lt;a href=&quot;#long-gc优化&quot; class=&quot;headerlink&quot; title=&quot;long gc优化&quot;&gt;&lt;/a&gt;long gc优化&lt;/h3&gt;&lt;p&gt;&amp;ensp; &amp;ensp;&amp;ensp; &amp;ensp;近来发现负责研发的项目总是会收到
      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="java基础" scheme="https://super-sean.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JVM" scheme="https://super-sean.github.io/tags/JVM/"/>
    
      <category term="内存" scheme="https://super-sean.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>创业团队那些事</title>
    <link href="https://super-sean.github.io/2019/02/09/%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://super-sean.github.io/2019/02/09/创业团队那些事/</id>
    <published>2019-02-09T14:57:00.000Z</published>
    <updated>2019-02-11T02:38:03.279Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;近来由于忙着换工作和春节生活杂事安排很久没更新博客，原本想着年前写一篇docker或者spring cloud gateway的相关文章也是被搁下了。昨天送走了春节最后一波来访的亲戚，今天终于有时间可以写写东西。<br>&ensp; &ensp;&ensp; &ensp;自从有换工作的念头后，其实就很想写一下自我总结，总结算上实习7年来在工作上的感想。其实每年以及每隔一段时间我都会在个人笔记上自我复盘，但这次想分享出来，权当是给看客茶余饭后打发时间杂文也行。<br>&ensp; &ensp;&ensp; &ensp;前段日子在网上看到一句话<br>&ensp; &ensp;&ensp; &ensp;<code>当你觉得痛苦时，你只有两个选择，一个是被打倒，一个是被逼着成长</code><br>&ensp; &ensp;&ensp; &ensp;类似的话语其实大家都听得不少，这句话我再次听到的时候很有感触，回想起自己从业以来每次遇到的痛苦时刻，有放弃，有坚持。</p><p>&ensp; &ensp;&ensp; &ensp;2015年8月，我从唯品会离职出来加入这家公司，当时工作3年有多，一腔热血，老板b君和当时已经加入他们且和我比较要好的同事y君过来聊了会，我毅然决定加入团队，即便是降薪过去。后来回想自己当时真的是年轻不懂事。转眼3年半过去了，公司从一开始做Pass到后来tob电商入驻平台再到后来做tob电商自营平台，期间经历过挺多苦难，但是就我个人感觉而言，当一切上了轨道，遇到的困难其实并没有一开始遇到的要难。<br>&ensp; &ensp;&ensp; &ensp;一开始老板b君经常会拉着我们几个技术负责人做培训，包括他对行业的认知，产品的规划，个人的价值观和创业的大饼想象等。后来公司越来越大，b君也不怎么拉着人培训了，直到开始做自营，经常看到b君拉着物流、市场、采购的人做狼性培训。<br>&ensp; &ensp;&ensp; &ensp;b君有些话让我感受比较深。  </p><p>&ensp; &ensp;&ensp; &ensp;“我们过往都在选择容易的路在走，而往往只有痛苦的路才是正确的，我们不能绕过去”这句话本身我并没有太大的感觉，但是结合b君自身的经历和公司一些有能力的人，我不禁反思，为什么要选择难的路走，b君期望得到的和大家期望得到的，通过这条路真的可以得到快速实现吗？也许放在tob电商这个事是正确的，但是再往大的方向上看，为什么要选择tob电商，虽然近些年都说tob电商很大机率是风口，但是很明显市场并没有大家想象中那么热烈，对比一些红火行业来看。所以这句话也许适用b君及公司，因为b君觉得他没有退路了，但是却不定适用他手下的人，很难引起共鸣。最终b君很多事情的推动都被手下的人应付着。  </p><p>&ensp; &ensp;&ensp; &ensp;“我都这么痛苦了，为什么你们不能再往前一步”后期b君对初始的核心团队成员是这样的想法，并传达给了大部分人。技术副总监办事不力，他跟技术副总监说了这话，技术的一些高层人员不愿放弃技术转纯管理岗，他对他们也说了这句话，等等。不得不承认，b君为了公司能活下去活得好，他牺牲了很多东西，全公司压力最大那个确实是他。公司越来越大，老板自然也不可能照顾到每个初创团队的成员，自然是公司需要什么，做得到就做，做不到别人顶上，大多数情况下是小公司找不到合适价位的人才。  </p><p>&ensp; &ensp;&ensp; &ensp;“只要xxx还在，他手下整个团队换掉都没关系”，“到现在这阶段，没有说缺了谁不行”b君对团队的管理还是比较侧重抓头不抓尾，其实没什么毛病，只是没做好人才储备的情况下就比较麻烦，而且不是非常优秀的小公司很难做人才储备，尤其当公司的人力资源能力水平还处于不完善阶段，更加是难上加难。 </p><p>&ensp; &ensp;&ensp; &ensp;目前这家公司发展还可以，我写b君的东西其实也思量了挺久，写不好就变成抱怨吐槽，其实没有哪家创业公司的老板是没能力的，但也没有人是十全十美的，没有问题的公司都已经挂掉了。写b君的东西是想表达在选择创业团队的时候，老板是重要考虑因素之一，不过可能很多人在求职过程中并接触不到，可以了解好公司的氛围和企业文化再做决定。  </p><p>&ensp; &ensp;&ensp; &ensp;知乎上有一小篇文章叫《别做被小公司毁掉的年轻人》，文章最后说“小公司毁不掉你，毁掉自己只是那不思进取的自己”，说的也没错，但是这里想说的其实是，能有更好的选择，就别让自己吃那么多无谓的苦，让自己能在快乐中做贡献，对公司对个人都是好事。</p><p>&ensp; &ensp;&ensp; &ensp;个人的建议是除非看得特别透彻，综合考虑好个人自身的性格，做好了准备，才可以选择创业团队，要不然还是选择能让自己术业有专攻的平台会来得更好，做好沉淀，为将来更好的机会做好准备。创业公司的大饼是一种期望，有风险，像理财一样，个人也需要给自己划定风险承受能力范围。有更好的选择还是选择更好的，大多数人往往还是看不够透彻，做不够准备的。  </p><p>&ensp; &ensp;&ensp; &ensp;创业团队有很多乱七八糟的坑，只有你想不到，没有尽头。运气特别好的上市，稍次的被收购，大多还是处于不上不下的尴尬层次，还有更多的是直接挂掉。但是我感谢在创业团队的经历，让我更加成熟。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; &amp;ensp;&amp;ensp; &amp;ensp;近来由于忙着换工作和春节生活杂事安排很久没更新博客，原本想着年前写一篇docker或者spring cloud gateway的相关文章也是被搁下了。昨天送走了春节最后一波来访的亲戚，今天终于有时间可以写写东西。&lt;br&gt;&amp;
      
    
    </summary>
    
      <category term="随笔" scheme="https://super-sean.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>datax源码解析及分布式实现思路</title>
    <link href="https://super-sean.github.io/2018/11/23/datax%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://super-sean.github.io/2018/11/23/datax源码解析及分布式实现思路/</id>
    <published>2018-11-23T01:59:00.000Z</published>
    <updated>2018-11-23T05:56:43.191Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;相信很多人接触datax都会去了解它的分布式执行模式，很“幸运”，阿里开源出来的是阉割版，默认只支持单机模式，研发团队对外基本也不回应分布式相关的问题。故此，想让datax支持分布式功能，只能自己下些功夫。<br>&ensp; &ensp;&ensp; &ensp;在github上也有人做了分布式的支持项目，如 <a href="https://github.com/TianLangStudio/DataXServer" target="_blank" rel="noopener">TianLangStudio/DataXServer</a> 后面再聊下这个项目的情况。<br>&ensp; &ensp;&ensp; &ensp;开始之前，按官方文档的建议，了解一下以下概念:</p><ul><li>Job: Job是DataX用以描述从一个源头到一个目的端的同步作业，是DataX数据同步的最小业务单元。比如：从一张mysql的表同步到odps的一个表的特定分区。</li><li>Task: Task是为最大化而把Job拆分得到的最小执行单元。比如：读一张有1024个分表的mysql分库分表的Job，拆分成1024个读Task，用若干个并发执行。</li><li>TaskGroup: 描述的是一组Task集合。在同一个TaskGroupContainer执行下的Task集合称之为TaskGroup</li><li>JobContainer: Job执行器，负责Job全局拆分、调度、前置语句和后置语句等工作的工作单元。类似Yarn中的JobTracker</li><li>TaskGroupContainer: TaskGroup执行器，负责执行一组Task的工作单元，类似Yarn中的TaskTracker。  </li></ul><h3 id="了解源码"><a href="#了解源码" class="headerlink" title="了解源码"></a>了解源码</h3><p>&ensp; &ensp;&ensp; &ensp;我们先看下datax的源码，从datax.py入手，datax.py 收集运行机器的相关信息组装参数调用com.alibaba.datax.core.Engine类，从类入口开始看主要流程分几个部分。  </p><h4 id="容器启动前操作"><a href="#容器启动前操作" class="headerlink" title="容器启动前操作"></a>容器启动前操作</h4><img src="/2018/11/23/datax源码解析及分布式实现思路/1.png" title="容器启动前操作">  <h4 id="JOB容器启动操作"><a href="#JOB容器启动操作" class="headerlink" title="JOB容器启动操作"></a>JOB容器启动操作</h4><img src="/2018/11/23/datax源码解析及分布式实现思路/2.png" title="JOB容器启动操作">  <h4 id="TaskGroup容器启动操作"><a href="#TaskGroup容器启动操作" class="headerlink" title="TaskGroup容器启动操作"></a>TaskGroup容器启动操作</h4><img src="/2018/11/23/datax源码解析及分布式实现思路/3.png" title="TaskGroup容器启动操作">  <h4 id="Job跟Task的处理流程"><a href="#Job跟Task的处理流程" class="headerlink" title="Job跟Task的处理流程"></a>Job跟Task的处理流程</h4><img src="/2018/11/23/datax源码解析及分布式实现思路/4.png" title="Job跟Task的处理流程">  <h4 id="插件相关类关系"><a href="#插件相关类关系" class="headerlink" title="插件相关类关系"></a>插件相关类关系</h4><img src="/2018/11/23/datax源码解析及分布式实现思路/5.png" title="插件相关类关系">  <p>&ensp; &ensp;&ensp; &ensp;主要流程差不多就这样了，需要注意的是，在单个容器里，研发团队的设计理念是希望建立reader和write的1：1的管道模型来处理数据。</p><h3 id="分布式支持实现思路"><a href="#分布式支持实现思路" class="headerlink" title="分布式支持实现思路"></a>分布式支持实现思路</h3><h4 id="正派做法"><a href="#正派做法" class="headerlink" title="正派做法"></a>正派做法</h4><p>&ensp; &ensp;&ensp; &ensp;按以上的解析内容，最“正经”的方案应该是让datax 将task切分好分发给不同的TaskGroup容器执行，直接执行job文件一般都是使用的job容器，如果不指定的话。按源码调试的结果，task其实是job文件中content里的每个实例。一开始提到TianLangStudio/DataXServer其实就是基于hadoop yarn api和client包进行这个思路的实现，可惜很久没维护，文档也没写好，而且远程调用只有Thrift。<br>&ensp; &ensp;&ensp; &ensp;基于“正经”方案的思路和我们的使用的习惯（目前我们是单个task一个job文件），其实可以使用一些支持服务发现及负载平衡的框架，如spring cloud，将job内容及相关参数提交给网关接口，使用自定义流量分发规则（考虑不同节点硬件资源），分发到对应节点上的服务上，服务再调起datax engin。假如需要切分task，则只需要在分发前建一层task切分的服务即可，节点上的服务根据接收到的任务类型来组装参数调用不同的datax容器。<br>&ensp; &ensp;&ensp; &ensp;挫一点的做法就是使用azkaban，手工配置指定机器运行data job</p><h4 id="邪门歪道"><a href="#邪门歪道" class="headerlink" title="邪门歪道"></a>邪门歪道</h4><p>&ensp; &ensp;&ensp; &ensp; 单个task不能再切分我认为是不合理的，首先reader和writer支持分布式的选择不多，其次，会有单点流量问题。所以其实我想要的是能不能将datax单一数据管道的模型给改造成支持分布式，让单个task也支持分布式。<br>&ensp; &ensp;&ensp; &ensp; 了解了源码之后，我觉得可以是可以有如下切入点：</p><ul><li>从job接收的时候就切分好数据块,master负责接收job/task，切分成任务块，每场任务块由一对reader和writer完成处理，就是基本datax task更小粒度或者说基于数据粒度上的切分</li><li>reader支持分布式，比如presto</li><li>reader不切，在传输给writer的queue时切，多个writer接收。其实就是将queue做成支持分布式，比如使用kafka</li><li>writer本身支持分布式，比如presto</li></ul><p>&ensp; &ensp;&ensp; &ensp; 如果纯粹地做数仓，我觉得reader和writer使用presto或其它支持分布式读写操作的技术等，然后再结合task负载均衡分配，基本可以满足了。如果需要做数据更新情况会比较复杂，需要考虑writer是否支持分布式更新及目标数据源是否支持并发插入而不容易产生锁。<br>&ensp; &ensp;&ensp; &ensp; 目前我们的架构是基于项目的情况，选择最低成本能够实现的最优方案，就是使用spring cloud + datax，保持datax核心的完整性不修改，在上面加一层，reader和writer尽量地使用presto为主，es为辅。下个阶段才会考虑使用yarn和queue的改造。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; &amp;ensp;&amp;ensp; &amp;ensp;相信很多人接触datax都会去了解它的分布式执行模式，很“幸运”，阿里开源出来的是阉割版，默认只支持单机模式，研发团队对外基本也不回应分布式相关的问题。故此，想让datax支持分布式功能，只能自己下些功夫。&lt;br&gt;&amp;ens
      
    
    </summary>
    
      <category term="大数据" scheme="https://super-sean.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="分布式" scheme="https://super-sean.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="数据平台" scheme="https://super-sean.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="ETL" scheme="https://super-sean.github.io/tags/ETL/"/>
    
  </entry>
  
  <entry>
    <title>并发编程</title>
    <link href="https://super-sean.github.io/2018/10/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://super-sean.github.io/2018/10/18/并发编程/</id>
    <published>2018-10-18T01:54:00.000Z</published>
    <updated>2018-10-18T02:09:43.539Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;并发编程是java的基础知识，但是也论深度，工作这些年与很多开发打过交道，有些人工作几年了也没有系统的认识，如果是做业务为主的开发，如果自己没有意识主动学习，往往就是基本使用、用封装好的工具或框架而不加思索。  </p><p>就着以前学习过的《JAVA并发编程》的知识整理了并发编程的基本知识点<br><img src="/2018/10/18/并发编程/JAVA并发编程.png" title="JAVA并发编程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; &amp;ensp;&amp;ensp; &amp;ensp;并发编程是java的基础知识，但是也论深度，工作这些年与很多开发打过交道，有些人工作几年了也没有系统的认识，如果是做业务为主的开发，如果自己没有意识主动学习，往往就是基本使用、用封装好的工具或框架而不加思索。  &lt;/p&gt;

      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="JVM" scheme="https://super-sean.github.io/tags/JVM/"/>
    
      <category term="JAVA基础" scheme="https://super-sean.github.io/tags/JAVA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="并发编程" scheme="https://super-sean.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JAVA动态编译/解析文本的一种简易方法</title>
    <link href="https://super-sean.github.io/2018/10/07/JAVA%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91-%E8%A7%A3%E6%9E%90%E6%96%87%E6%9C%AC%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/"/>
    <id>https://super-sean.github.io/2018/10/07/JAVA动态编译-解析文本的简易方法/</id>
    <published>2018-10-07T14:34:00.000Z</published>
    <updated>2018-10-07T16:07:18.772Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; &ensp; 追着国庆假期的尾巴，更新一下博客，讲一下项目上之前遇到的文本动态编译/解析的问题，虽然比较简单，但是感觉适合场景还是挺多的。<br>&ensp; &ensp; 团队自研BI系统，在数据源选择及查询的实现使用桥接模式，针对不同的数据源采用不同的查询方式，而目前我们平台支持的数据源的查询可以通过构建不同的文本请求体进行查询，例如mysql、presto、ElasticSearch等。在这里对文本动态构建的实现方案进行讲述。<br>&ensp; &ensp; 我们的源文本都是基于xml标签编写，起因是BI系统一开始是基于mybatis对mysql数据库进行DAO操作。举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;test&quot; parameterType=&quot;map&quot; resultType=&quot;java.util.HashMap&quot;&gt;</span><br><span class="line">select id from table_test </span><br><span class="line"> where 1=1</span><br><span class="line">        &lt;if test=&quot;startTime != null and startTime != &apos;&apos;&quot;&gt;</span><br><span class="line">            and sale_date &gt;= #&#123;startTime&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;endTime != null and endTime != &apos;&apos;&quot;&gt;</span><br><span class="line">            and #&#123;endTime&#125; &gt;= sale_date</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>  </p><p>&ensp; &ensp; 在这个基础上我们了解了mybatis的解析过程，使用mybatis的底层实现进行动态sql语句文本编译,其实原理就是利用mybatis的xml标签解析sql实现。<br>&ensp; &ensp; xml动态文本编译/解析有多种方法，但是基于以上的情况，我们抽取了mybatis的boundsql编译过程用来构建我们的文本请求体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">//使用mybatis编译逻辑标签</span><br><span class="line">   Document doc = DOMUtils.parseXMLDocument(query);</span><br><span class="line"></span><br><span class="line">   XPathParser xPathParser = new XPathParser(doc, false);</span><br><span class="line">   Node node = doc.getFirstChild();</span><br><span class="line"></span><br><span class="line">   XNode xNode = new XNode(xPathParser, node, null);</span><br><span class="line">   XMLScriptBuilder xmlScriptBuilder = new XMLScriptBuilder(configuration, xNode);</span><br><span class="line"></span><br><span class="line">   SqlSource sqlSource = xmlScriptBuilder.parseScriptNode();</span><br><span class="line"></span><br><span class="line">   BoundSql boundSql = sqlSource.getBoundSql(param);</span><br></pre></td></tr></table></figure><br>&ensp; &ensp; 通过boundSql.getSql()可以获取编译后的文本（configuration是mybatis的基础配置类，由于这里并不用到数据库请求，所以创建一个新的单例对象传入就可以），但是需要注意的是mybatis这种编译方式是用来编译prepare statment的，什么意思呢，就是使用mybatis的标签变量声明规则，即变量是#{var}这种声明方式，会被编译成问号占位符，如果不想这样可以自己制定变量规则进行替换，比如${var}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">boundSql.getSql().indexOf(&quot;$&quot;) &gt; 0 ? replaceVariables(boundSql.getSql(),param) :   </span><br><span class="line">boundSql.getSql();</span><br></pre></td></tr></table></figure>  </p><p>&ensp; &ensp; 到此我们的presto动态语句可以写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">    &lt;select id=&quot;test&quot; parameterType=&quot;map&quot; resultType=&quot;java.util.HashMap&quot;&gt;</span><br><span class="line">select bill_id,total from platform_data.t_sales_bill </span><br><span class="line"> where 1=1</span><br><span class="line">        &lt;if test=&quot;startTime != null and startTime != &apos;&apos;&quot;&gt;</span><br><span class="line">            and sale_date &gt;= cast(#&#123;startTime&#125; as timestamp)</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;endTime != null and endTime != &apos;&apos;&quot;&gt;</span><br><span class="line">            and cast(#&#123;endTime&#125; as timestamp) &gt;= sale_date</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure> </p><p>&ensp; &ensp; es的请求体可以写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;query&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;bool&quot;:&#123; &quot;filter&quot;:[</span><br><span class="line">  &lt;if test=&quot;agentCodes!=null&quot;&gt;</span><br><span class="line">  &#123;&quot;match&quot; : &#123; &quot;agentCode&quot; : &quot;$&#123;agentCodes&#125;&quot;&#125; &#125;,</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &#123;&quot;range&quot; : &#123; &quot;saleDate&quot; : &#123;&quot;gte&quot;:&quot;$&#123;startTime&#125;&quot;,&quot;lte&quot;:&quot;$&#123;endTime&#125;&quot;&#125; &#125; &#125;</span><br><span class="line">  ] &#125; &#125;,</span><br><span class="line">  &quot;aggs&quot;:&#123;</span><br><span class="line">  &quot;sales_number&quot;:&#123;</span><br><span class="line">  &quot;terms&quot; : &#123;</span><br><span class="line">                    &quot;field&quot; : &quot;goodsId&quot;,</span><br><span class="line">                    &quot;order&quot;:&#123;</span><br><span class="line">                    &quot;salesNumber&quot;:&quot;desc&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">  &quot;aggs&quot;:&#123;</span><br><span class="line">  &quot;salesNumber&quot;:&#123;&quot;sum&quot;:&#123; &quot;field&quot;:&quot;salesNumber&quot; &#125; &#125;,</span><br><span class="line">  &quot;salesTotal&quot;:&#123;&quot;sum&quot;:&#123; &quot;field&quot;:&quot;salesTotal&quot; &#125; &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: &#123; &quot;salesNumber&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125;&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/query&gt;</span><br></pre></td></tr></table></figure><br>&ensp; &ensp; 同理其它可以使用文本构建查询的数据源都可以支持，比如Hql,spark-sql,ksql等，再扩展也可以支持动态脚本。为我们自助查询平台和BI平台奠定了基础。<br>&ensp; &ensp; 以上，说得比较简单，希望对看到的人可以有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; &amp;ensp; 追着国庆假期的尾巴，更新一下博客，讲一下项目上之前遇到的文本动态编译/解析的问题，虽然比较简单，但是感觉适合场景还是挺多的。&lt;br&gt;&amp;ensp; &amp;ensp; 团队自研BI系统，在数据源选择及查询的实现使用桥接模式，针对不同的数据源采用不同的查询
      
    
    </summary>
    
      <category term="JAVA" scheme="https://super-sean.github.io/categories/JAVA/"/>
    
    
      <category term="java基础" scheme="https://super-sean.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="mybatis" scheme="https://super-sean.github.io/tags/mybatis/"/>
    
      <category term="动态解析" scheme="https://super-sean.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>个人基于大数据平台的设计与思考</title>
    <link href="https://super-sean.github.io/2018/08/19/%E4%B8%AA%E4%BA%BA%E5%9F%BA%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://super-sean.github.io/2018/08/19/个人基于大数据平台的设计与思考/</id>
    <published>2018-08-19T15:19:00.000Z</published>
    <updated>2018-08-21T07:12:52.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>&ensp; &ensp; 本人是在一家TOB电商平台的创业公司就职，目前负责整个数据部门的架构与业务跟进。之前从事过YY与唯品会的web开发工作，也有了解到一些大数据架构相关的设计。<br>&ensp; &ensp; 目前数据部门的技术架构发展大体方向已经确定得差不多，于是在此梳理一下设计思路、历程与将要实现的内容。</p><h3 id="一开始都是坑"><a href="#一开始都是坑" class="headerlink" title="一开始都是坑"></a>一开始都是坑</h3><p>&ensp; &ensp; 一开始的数据需求都是来源于生意运营的报表，我由负责电商app web转向数据开发，说实话，一开始做报表我心里是拒绝的，但是创业团队为了公司能活下去，什么活不得做。领着几个兄弟搭建了公司的”数据中心”，其实就是个报表系统。当时对hadoop,hive,spark,etl等技术及概念懵懵懂懂。  </p><p>&ensp; &ensp; 很快我们发现，第一轮的坑来了，面临两个问题：一，报表需求多，小伙伴们整天在写sql，代码组合数据；二，数据量慢慢大起来，有些地方性能比较差，报表要查很久，有时候影响线上性能，线上出问题总要挨白眼。</p><p>&ensp; &ensp; 经过了解对比，我们毅然决定开始自研BI系统(参照superset功能设计)和开启我们的ETL架构设计与实现的开头，独立一套数据环境。其实当时我们心中还有点窃喜，终于可以接触高大上的hadoop全家桶了，选取的技术有hadoop、hive、spark、sqoop和shell脚本来实现我们的第一版数据流程。嗯，这才有点数据中心的样子。</p><p>&ensp; &ensp; 然而，跑了一段时间后，随着了解越多知识，才知道我们的情况有多糟糕，当时数据量不到100g，只有两台8核16G的机器（手动捂脸），离线任务依靠时间弱依赖，就算只有两台，运维起来也要花不少时间，sqoop在小数据量小集群的应用场景下性能真的很一般啊，渐渐感觉到这套架构对我们来说也许”太早了”。自研BI方面，很考验写sql的功力，虽然由此我们对mysql的sql编写技巧有很大提升，用了很多奇淫巧技，但是，我们的研发现在都花很多时间写sql啊，而且大家对数据不敏感，反正就是完成开发任务就得了。这段时间确实人心很不稳。。。当然很感谢那时坚持陪着我奋斗的小伙伴们。  </p><p>初版架构如下:<br><img src="/2018/08/19/个人基于大数据平台的设计与思考/data-architecture1.png" title="data-architecture1"></p><h3 id="有坑就要填"><a href="#有坑就要填" class="headerlink" title="有坑就要填"></a>有坑就要填</h3><p>思考、计划、实现与招聘，我们在1个月内重塑了整个交互流程。</p><ul><li>数据通过爬虫、收集日志与第三方公司进行业务结合等方式慢慢积累起来  </li><li>招来第一位数据分析师，并由他负责BI的输出与日常报表需求  </li><li>申请多了几台机器资源  </li><li>用azkaban替换shell脚本管理，正式接上任务流  </li><li>使用datax替换sqoop  </li><li>hadoop、hive及spark主要用来做少量智能化的业务，大部分数据聚合逻辑回迁数据库  </li></ul><p>这样的数据流程立马解放了开发小伙伴的双手，去做更能体现价值的事情，而且报表输出的质量也大大提高了，机器资源也暂时足够，维护起来还不算特别麻烦。心里舒了一口气。  </p><p>架构如下:<br><img src="/2018/08/19/个人基于大数据平台的设计与思考/data-architecture2.png" title="data-architecture2"></p><h3 id="业务不断发展，坑坑更健康"><a href="#业务不断发展，坑坑更健康" class="headerlink" title="业务不断发展，坑坑更健康"></a>业务不断发展，坑坑更健康</h3><p>&ensp; &ensp; 这个时候我们的业务数据量已经超过100-200G之间，数据中心的数据量也300g左右，数据库中的中间表特别多。<br>&ensp; &ensp; 现在已经好几位分析师，各自负责自己的需求，经常有数据打架的情况发生，而且制作报表很多依然用的业务源表，有性能问题就使用中间表。<br>&ensp; &ensp; 业务应用越来越多对数据聚合服务有需求，我们都是通过RPC接口来对外服务提供服务,我们经常得深入业务逻辑去提供聚合服务，而且服务对象多，所有服务在数据库聚合，经常影响数据中心整体的服务质量，也出现过多次应用雪崩的情况。<br>&ensp; &ensp; 业务也出现了实时反馈的产品需求  </p><h3 id="不断学习探研改造"><a href="#不断学习探研改造" class="headerlink" title="不断学习探研改造"></a>不断学习探研改造</h3><p>我们又再一次进行架构改造  </p><ul><li>接入otter实现业务数据实时同步  </li><li>使用canal + kafka + kafka streams 实现实时数据变更订阅，提供实时聚合服务</li><li>开始设计自己的数据字典与数据仓库</li><li>采用微服务设计理念，使用spring cloud  </li></ul><p>架构如下:<br><img src="/2018/08/19/个人基于大数据平台的设计与思考/data-architecture3.png" title="data-architecture3">  </p><p>就着这样节奏又走了一段日子</p><h3 id="总是会有不如意的地方"><a href="#总是会有不如意的地方" class="headerlink" title="总是会有不如意的地方"></a>总是会有不如意的地方</h3><p>&ensp; &ensp; 此时我们的机器资源也只有近10台一般配置的节点，随着微服务越来越多，而且与其它大数据的工具平台共用，很快又到瓶颈，而且进程多维护起来也是麻烦。<br>&ensp; &ensp; 数据团队的人员由于资源限制没有再新增，而业务缺越来越多需要支持，在生产力方面，数据处理环节明显成为瓶颈。<br>&ensp; &ensp; 此时在数据聚合方面，我们采用了redis作为缓存，但是依然存在缓存击破的情况，导致数据库偶尔会锁表，即使我们已经主从读写分离。</p><h3 id="像刀一样，越磨越亮"><a href="#像刀一样，越磨越亮" class="headerlink" title="像刀一样，越磨越亮"></a>像刀一样，越磨越亮</h3><p>我们在新的阶段探研了新的技术  </p><ul><li>使用ambari管理各种集群</li><li>探索数据流任务管理平台，对比了kettle，apache nifi和spring cloud data flow</li><li>研究能够快速检索数据且能够横向扩展的技术，如elasticsearch,kafka等</li><li>过往我们都是存储及计算一体，像我们对mysql,hive的应用就是典型的先把数据迁移到哪里再进行计算，所以我们也探研了计算分离的技术方案，最终采用presto </li></ul><h3 id="对于快速发展的创业公司来说好用才是王道，大家舒服才是王道"><a href="#对于快速发展的创业公司来说好用才是王道，大家舒服才是王道" class="headerlink" title="对于快速发展的创业公司来说好用才是王道，大家舒服才是王道"></a>对于快速发展的创业公司来说好用才是王道，大家舒服才是王道</h3><p>&ensp; &ensp;我们的数据量始终没有达到TB级别，可预见如果业务没有新的发展方向，就当前的产品的数据增长速度来看，可以把我们要做的数据平台定义为“小数据量的大数据平台”，机器资源也只是近10台（我知道市场正常搞大数据的机器集群一般都有几十上百台，再次手动捂脸）。<br>最终确定我们架构的方向:  </p><ul><li>使用otter实时同步我们所有业务数据到我们自己的数据库，减少离线同步的管理和资源成本  </li><li>使用canal 监听自己数据库的所有表变化，程序同步序列化数据到kafka中，由业务方使用kafka streams自行订阅，实现业务逻辑</li><li>使用azkaban + datax + presto ，实现分布式计算，分离存储与计算环节，完成etl流程  </li><li>最终离线数据落地elasticsearch</li><li>业务方通过数据平台进行数据需求的自满足及溯源  </li></ul><p>我们当前的架构如下(蓝色箭头为源头输出，红色箭头指向为输入，黄色箭头为溯源流向，黄色闪电为依存关系):<br><img src="/2018/08/19/个人基于大数据平台的设计与思考/data-architecture4.png" title="data-architecture4">  </p><p>而最终稳定版的架构如下:<br><img src="/2018/08/19/个人基于大数据平台的设计与思考/data-architecture5.png" title="data-architecture5">  </p><h3 id="智能化的业务"><a href="#智能化的业务" class="headerlink" title="智能化的业务"></a>智能化的业务</h3><p>&ensp; &ensp;近来公司重点发展智能化业务，需要我们支持机器学习相关的算法模型实现及调优，目前还是处于使用python脚本的实现方式及azkaban进行任务训练及提供脚本给程序调用。一方面还不是分布式计算，当然我们也可以用spark解决这个问题，第二方面，支持不了实时训练的场景，虽然我们当前也还没有这种需求。目前这块还是架构规划当中，可能会比较倾向于使用tensorflow,后续有进展再更新。</p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>&ensp; &ensp; 我始终没觉得自己是一个大数据开发人员，在我看来，web开发与数据开发同样是后端研发，只不过业务不同，使用的技术不同，然而很多研发的基础是一样。语言基础，高并发，大数据量，大吞吐量，分布式，高可用，模式设计，基础算法，调优，使用的工具掌握及理解像redis,zk,es,kafka,mysql这些，运维基础，前端基础，像这些我觉得都是应该掌握的。<br>&ensp; &ensp; 面试过很多大数据的开发，从初级到高级。很多人都只关心一个问题，你们的数据量有多大，你们的集群有多大。我承认这些这两个“指标”确实能说明一些东西，但是对于我面试过的人来说，我的结论是，数据量的大小对于只是一个使用工具的人来说，其实并不重要，因为你也只是用，你从来不深究，为什么要这样设计，为什么要这样实现，有没有办法做得更好，你不了解原理，你不熟悉工具技术，反而看不起数据量小的业务场景，这会让人觉得不成熟。<br>&ensp; &ensp; 当然我也是认为如果有机会接触真正的大量数据的场景，还是得尽量接触，在保证自己有不断提升的觉悟为前提去接触。面试过很多游戏通信行业的真正大数据量场景下的小伙伴，真的不得不提一句，你公司的业务场景只是一方面，不“用”起来，只是负责某个环节的加工还不深究，这样的开发真的不算是大数据研发啊。<br>&ensp; &ensp; <strong>peace &amp; love</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;&amp;ensp; &amp;ensp; 本人是在一家TOB电商平台的创业公司就职，目前负责整个数据部门的架构与业务跟进。之前从事过YY与
      
    
    </summary>
    
      <category term="设计" scheme="https://super-sean.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="架构" scheme="https://super-sean.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="数据平台" scheme="https://super-sean.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>天然苏打水市场的了解与分析</title>
    <link href="https://super-sean.github.io/2018/08/14/%E5%A4%A9%E7%84%B6%E8%8B%8F%E6%89%93%E6%B0%B4%E5%B8%82%E5%9C%BA%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://super-sean.github.io/2018/08/14/天然苏打水市场的了解与思考/</id>
    <published>2018-08-14T07:41:00.000Z</published>
    <updated>2019-02-11T02:39:21.277Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>近来有个朋友找到我说拿到某品牌的天然苏打水广东省省级代理，问我得怎样开展工作及市场上的情况是怎么样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">产品定价15元一支</span><br><span class="line">品牌方给出了一年一千万件，即八千万支的销量目标。</span><br></pre></td></tr></table></figure></p><p><style><br>  table td {text-align:center}<br>  table thead td {background:#73B1E0;color:#FFF;}<br>  table th {border:1}<br></style><br>由于个人是在TO B电商平台工作（苦逼码农一个），就着自己的资源和能力稍微进行一下分析。目标是找出工作推进的方案和尽量找出市场数据以及判断这个销量kpi是否合理。</p><h4 id="梳理步骤"><a href="#梳理步骤" class="headerlink" title="梳理步骤"></a>梳理步骤</h4><ul><li>了解市场竞品数据</li><li>了解一般水饮新品推广方法</li><li>了解行业高端专业人士对这个事件的看法</li></ul><h4 id="了解市场竞品数据"><a href="#了解市场竞品数据" class="headerlink" title="了解市场竞品数据"></a>了解市场竞品数据</h4><p>找遍关系圈并没有任何可以了解到天然苏打水相关的线下渠道，于是只能针对线上电商平台先下手。挑选了天然苏打水销量量较大的平台的销量较好的四个产品进行对比。结果如下: </p><table><thead><tr><th style="text-align:center">产品</th><th style="text-align:center">产品单价</th><th style="text-align:center">规格</th><th style="text-align:center">活动</th><th style="text-align:center">京东销量</th><th style="text-align:center">天猫销量</th><th style="text-align:center">品牌</th><th style="text-align:center">产品卖点</th><th style="text-align:center">产地</th><th style="text-align:center">公司</th><th style="text-align:center">公司旗下产品</th><th style="text-align:center">公司官网</th><th style="text-align:center">新闻备注</th><th style="text-align:center">品牌故事</th></tr></thead><tbody><tr><td style="text-align:center">舒达源克东天然苏打水</td><td style="text-align:center">9.5</td><td style="text-align:center">550ml</td><td style="text-align:center">买2送1（送6支400ml）</td><td style="text-align:center">1.9w评价</td><td style="text-align:center">2758</td><td style="text-align:center">舒达源</td><td style="text-align:center">世界三大冷矿泉之一</td><td style="text-align:center">克东</td><td style="text-align:center">黑龙江舒达饮品有限公司</td><td style="text-align:center">单一产品不同规格</td><td style="text-align:center"><a href="http://www.shudayuan.cn/index.php?a=lists&amp;catid=30" target="_blank" rel="noopener">跳转</a></td><td style="text-align:center"><a href="http://www.prnews.cn/press_release/346678.htm" target="_blank" rel="noopener">新闻1</a></td><td style="text-align:center">中国国家田径队官方用水</td></tr><tr><td style="text-align:center">活力恩克东天然苏打水</td><td style="text-align:center">3.66</td><td style="text-align:center">500ml</td><td style="text-align:center">无</td><td style="text-align:center">3.3w评价</td><td style="text-align:center">4542(单价4.5)</td><td style="text-align:center">活力恩</td><td style="text-align:center">火山岩層精淬礦泉</td><td style="text-align:center">克东</td><td style="text-align:center">海昌國際股份有限公司（彰化縣秀水鄉）</td><td style="text-align:center">主打5度C系列，销量情况一般</td><td style="text-align:center"><a href="http://www.horien.tw/webc/html/about/index.aspx" target="_blank" rel="noopener">跳转</a></td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">火山鸣泉克东天然苏打水</td><td style="text-align:center">7.3</td><td style="text-align:center">470ml</td><td style="text-align:center">无</td><td style="text-align:center">1.7w评价</td><td style="text-align:center">3578</td><td style="text-align:center">火山鸣泉</td><td style="text-align:center">火山岩層精淬礦泉</td><td style="text-align:center">克东</td><td style="text-align:center">火山鸣泉生态科技有限公司</td><td style="text-align:center">单一产品不同规格不同包装</td><td style="text-align:center"><a href="http://www.lava-spring.com/BrandCenter.html" target="_blank" rel="noopener">跳转</a></td><td style="text-align:center"><a href="http://www.sohu.com/a/168012658_479961" target="_blank" rel="noopener">新闻1</a>  <a href="http://www.ccidnet.com/2017/0707/10291070.shtml" target="_blank" rel="noopener">新闻2</a></td><td style="text-align:center">中国田径队官方饮用水</td></tr><tr><td style="text-align:center">水易方克东天然苏打水</td><td style="text-align:center">7.1</td><td style="text-align:center">500ml</td><td style="text-align:center">买5送1</td><td style="text-align:center">1.5w评价</td><td style="text-align:center">537</td><td style="text-align:center">水易方</td><td style="text-align:center">常见天然苏打水特性</td><td style="text-align:center">克东</td><td style="text-align:center">大连水易方科技发展有限公司</td><td style="text-align:center">单一产品不同规格不同包装</td><td style="text-align:center"><a href="http://www.shuiyifang.net/web/cn/qyjj/index.html" target="_blank" rel="noopener">跳转</a></td><td style="text-align:center"><a href="http://www.shuiyifang.net/web/cn/xwzx/index.html" target="_blank" rel="noopener">新闻</a></td><td style="text-align:center">无</td></tr></tbody></table><p>就这样看可以得到一些信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 京东是现在最大的销售渠道，天猫第二（其它平台几乎没有销量所以没对比）</span><br><span class="line">* 天然苏打水线上市场并不乐观,如果按这数据来看，一年100w件的销量目标都很有挑战性</span><br><span class="line">* 国内最有知名度的天然苏打水产地应该是克东，如果非克东产地的苏打水估计比较难引起消费者共鸣</span><br><span class="line">* 产品形象及品牌故事在市场竞争中影响并不大，消费者可能更看重实惠程度</span><br><span class="line">* 基本没看到哪个天然苏打水产品有打广告，更多应该是参加电商平台的促销活动</span><br></pre></td></tr></table></figure></p><p>基本上线上销售相关信息了解就到这了，但是感觉还不够，进而找了各大数据平台搜索相关报告，收集到资料如下:  </p><ul><li><p>网上评价中国十大苏打水企业<br><a href="http://www.china-10.com/china/1002sds_index.html" target="_blank" rel="noopener">http://www.china-10.com/china/1002sds_index.html</a></p></li><li><p>中国会员经济数据报告<br><a href="http://tech.qq.com/a/20170719/007724.htm#p=1" target="_blank" rel="noopener">http://tech.qq.com/a/20170719/007724.htm#p=1</a></p></li><li><p>尼尔森数据线上线下结合销售数据资讯<br><a href="http://www.nielsen.com/cn/zh/press-room/2015/Nielsen-global-survey-on-e-commerce-and-new-retailing.html" target="_blank" rel="noopener">http://www.nielsen.com/cn/zh/press-room/2015/Nielsen-global-survey-on-e-commerce-and-new-retailing.html</a></p></li><li><p>百度指数<br><a href="http://index.baidu.com/?tpl=trend&amp;word=%CB%D5%B4%F2%CB%AE" target="_blank" rel="noopener">http://index.baidu.com/?tpl=trend&amp;word=%CB%D5%B4%F2%CB%AE</a></p></li><li><p>腾讯BI<br><a href="http://tbi.tencent.com/index?word=苏打水&amp;date=1&amp;type=0" target="_blank" rel="noopener">http://tbi.tencent.com/index?word=苏打水&amp;date=1&amp;type=0</a></p></li><li><p>36kr关于高端水的观点<br><a href="http://36kr.com/p/5073894.html" target="_blank" rel="noopener">http://36kr.com/p/5073894.html</a></p></li><li><p>3mbang文库<br><a href="http://www.3mbang.com/p-171349.html" target="_blank" rel="noopener">http://www.3mbang.com/p-171349.html</a></p></li><li><p>百度文库<br><a href="https://wenku.baidu.com/view/adb970a03968011ca200911f.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/adb970a03968011ca200911f.html</a><br><a href="https://wenku.baidu.com/view/64a25f0869eae009581becfb.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/64a25f0869eae009581becfb.html</a><br><a href="http://www.chinairn.com/news/20160705/150700863.shtml" target="_blank" rel="noopener">http://www.chinairn.com/news/20160705/150700863.shtml</a></p></li></ul><p>ps:苏打水市场研究报告 很多咨询网站都有做，但是哪里都要钱的，一份就要好几k大洋，要不起，还是靠自己吧。</p><p>基于网上的资料可以看出来苏打水在中国的市场热度有上升的趋势，但是不大，天然苏打水就更小了。</p><h4 id="一般水饮新品推广方法"><a href="#一般水饮新品推广方法" class="headerlink" title="一般水饮新品推广方法"></a>一般水饮新品推广方法</h4><p>我找了我们公司运营部门副总监W君请教了一下，他原本是从宝洁出来的，至今工作多年，从开始的市场人员转为运营人员。从与他的交流上我总结了一下代理商一般水饮新品的推广方法如下:</p><h5 id="KA-大型卖场"><a href="#KA-大型卖场" class="headerlink" title="KA(大型卖场)"></a>KA(大型卖场)</h5><p>如沃尔玛、华润万家、永旺（吉之岛）等。  </p><p>KA是最容易进行新品试验的地方。每个KA都有自己招商的标准，对进场的产品会有不同的要求，KA每个点（如广州天河分店等）也各自有自己的要求。一般想谈合作可以直接到联系总部或者分点对应负责人直接谈就行了。  </p><p>这里假设能够满足要求并进场。合作的对象有两种，一种是直接找总部谈合作，这种方式会要求产品本身有足够强的优势，总公司才会考虑帮你铺点，而且一般找总部谈的整个流程比较长，但是一旦确定产品OK，能够大面积铺开，另一种是找某个KA的分点负责人谈，这种的门槛会比较低，但是产品流通只限于该门店，如果想再扩大市场只能自己重新去谈其它KA分点。</p><p>合作的方式有两种，一种是直接给钱进场，KA不管你销量，反正它有钱收，另一种是根据销量来进行利润分成，这种一般只会针对成熟的产品或者非常有潜力的产品。</p><p>走KA的公司的运营比较简单，只需要有人负责促销活动的规划，聘请对应的促销人员派到各大卖场进行促销活动就可以了。</p><p>然而KA渠道基本就是走量，利润空间比较小。</p><h5 id="城市有能力的中间商"><a href="#城市有能力的中间商" class="headerlink" title="城市有能力的中间商"></a>城市有能力的中间商</h5><p>如广州宝祺来，专门做日化渠道，能够快速铺货到各大KA卖场，合作方式得自己谈，基本是直接给钱合作的。</p><p>这个渠道会比直接找KA利润更低，因为有中间商赚差价嘛。但是铺货速度跟能力绝对是杠杠的。</p><h5 id="特殊渠道"><a href="#特殊渠道" class="headerlink" title="特殊渠道"></a>特殊渠道</h5><p>带有特殊性质的饮品，如能量饮料、苏打水，都有一些特殊的渠道可以卖，这个渠道比较看重经营方即卖饮品的公司渠道能力。比如红牛可以铺货进网吧、各大运动场所等。这个渠道我也没有资源可以继续了解，只是知道，特殊渠道是毛利可以爆发的渠道。</p><h5 id="中小超市士多"><a href="#中小超市士多" class="headerlink" title="中小超市士多"></a>中小超市士多</h5><p>基本上品牌代理商不会自己直接去铺小店，成本高，效益低。</p><h4 id="专业人士意见"><a href="#专业人士意见" class="headerlink" title="专业人士意见"></a>专业人士意见</h4><p>我找了我们公司采购部副总监请教，他是一路从恒大、沃尔玛等大公司由基层做到高层的。沟通下来我总结有以下几点：</p><ul><li>新品不能急着铺货，只要你产品OK，销售渠道是比较容易疏通的</li><li>确定好主打市场，目标人群</li><li>做好市场调研，可以采用问券调查等方式。如果真的不清晰怎么做，可以拜访其它省级代理，咨询下人家的情况与做法</li><li>商品本身的主打特性要宣传到位，假如商品本身有什么特别性质的，如真的可以治疗什么疾病或者产源稀缺，那定价高一样可以卖得火爆</li><li>特殊渠道在定位高端产品的渠道中比较重要，往往是有利可图的渠道</li><li>15元的高端水在市场很少见，至少这位哥是没见过，当时在恒大做恒大冰泉也是定价高昂，现在一样卖到跟普通差不多，正常渠道销量也一般。所以这个定价的水产品市场不好做</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>针对销量目标来说，天然苏打水新品一年一千万件即八千箱的省级销售目标，从运营和专业人士的角度来看，都是很难达到，结合线上数据来看，也更加能说明这点。合理的有挑战性的目标大概是一百万件左右。假如有特殊渠道另说，因为特殊渠道的量就看主营公司的能力了，不好预估。<br>推广新品的方法上面已经提到，但是推广前需要确定好目标人群、商品的亮点、品牌故事与背景和渠道。如果不清楚怎么做，可以去其它省级代理了解咨询，如果有的话。</p><h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><p>基本上KA或者平台级的公司不会管你产品好不好卖，都想你投钱进场，反正不好卖也不关他们的事。包括我们公司那采购副总监，一边说着感觉市场不好做，一边想让我朋友来找我们公司合作，笑哭，哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;近来有个朋友找到我说拿到某品牌的天然苏打水广东省省级代理，问我得怎样开展工作及市场上的情况是怎么样的。&lt;br&gt;&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="随笔" scheme="https://super-sean.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="数据分析" scheme="https://super-sean.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud stream 基于kafka的使用简析</title>
    <link href="https://super-sean.github.io/2018/08/11/spring-cloud-stream-%E5%9F%BA%E4%BA%8Ekafka%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AE%80%E6%9E%90/"/>
    <id>https://super-sean.github.io/2018/08/11/spring-cloud-stream-基于kafka的使用简析/</id>
    <published>2018-08-11T01:26:00.000Z</published>
    <updated>2018-08-11T05:53:56.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流式数据"><a href="#流式数据" class="headerlink" title="流式数据"></a>流式数据</h4><p>故名思义，即数据像开了小河里的流水般不停流动，除非水源出现问题，否则没有结束时间。<br>流式数据在行业内已经有非常多针对不同应用量级的成熟方案，这里就不加以详述。本次主要介绍spring cloud stream 基于kafka对流式数据的基本应用。而使用spring cloud stream之前，可以先理解一下spring cloud对数据流程的几个概念，分别是source（生产数据者），processor(数据加工者), sink(最终结果处理者)。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>项目基本框架</strong>:当然是基于maven构建的spring-boot最省心省力啦<br><strong>添加依赖</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-kafka-streams&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于代码中的一些便捷注解 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.0&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p><strong>公共配置</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">  kafka:</span><br><span class="line">          streams:</span><br><span class="line">            binder:</span><br><span class="line">              brokers: localhost:9092</span><br><span class="line">              zk-nodes: localhost:2181 #2.0以上就不需要该配置</span><br><span class="line">              configuration:</span><br><span class="line">                default:</span><br><span class="line">                  key:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                cache:</span><br><span class="line">                  max:</span><br><span class="line">                    bytes:</span><br><span class="line">                      buffering: 0 #所有线程可以用于缓存的最大字节数,达到多少数据量之后聚合一次流中的数据，设置为0则实时聚合</span><br><span class="line">                commit:</span><br><span class="line">                  interval:</span><br><span class="line">                    ms: 1000 #版本数据确认消费时间ack</span><br></pre></td></tr></table></figure></p><p>我们来模拟用户页面访问记录流</p><h4 id="声明binding相关信息"><a href="#声明binding相关信息" class="headerlink" title="声明binding相关信息"></a>声明binding相关信息</h4><p>添加接口AnalyticsBinding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface AnalyticsBinding &#123;</span><br><span class="line">    String PAGE_VIEWS_OUT = &quot;pvout&quot;;</span><br><span class="line">    String PAGE_VIEWS_IN = &quot;pvin&quot;;</span><br><span class="line">    String PAGE_COUNT_MV = &quot;pcmv&quot;;</span><br><span class="line">    String PAGE_COUNT_OUT = &quot;pcout&quot;;</span><br><span class="line">    String PAGE_COUNT_IN = &quot;pcin&quot;;</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_VIEWS_IN)</span><br><span class="line">    KStream&lt;String,PageViewEvent&gt; pageViewsIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; pageCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; pageCountIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_VIEWS_OUT)</span><br><span class="line">    MessageChannel pageViewsOut();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>在application.yml中声明以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">     stream:</span><br><span class="line">        bindings:</span><br><span class="line">          pvout:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pvin:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pcout:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          pcin:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">        kafka:</span><br><span class="line">          streams:</span><br><span class="line">            bindings:</span><br><span class="line">              pcout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              pcin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br></pre></td></tr></table></figure></p><p>destination对应kafka中的主题。<br>serde就是serialization和deserialization，针对流中的key和value都需要指定，默认使用default中配置的内容，也可以针对主题单独设置。  </p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>创建每秒随机产生用户访问页面及停留时间的数据  </p><p>先创建事件类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class PageViewEvent &#123;</span><br><span class="line">    private String userId,page;</span><br><span class="line">    private long duration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成数据的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class PageViewEventSource implements ApplicationRunner &#123;</span><br><span class="line"></span><br><span class="line">    private  final MessageChannel pageViewsOut;</span><br><span class="line"></span><br><span class="line">    public PageViewEventSource(AnalyticsBinding binding) &#123;</span><br><span class="line">        this.pageViewsOut = binding.pageViewsOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(&quot;jlong&quot;,&quot;dyser&quot;,&quot;shacko&quot;,&quot;abilan&quot;,&quot;ooasdf&quot;,&quot;grussell&quot;);</span><br><span class="line">        List&lt;String&gt; pages = Arrays.asList(&quot;blog&quot;,&quot;sitemap&quot;,&quot;initializr&quot;,&quot;news&quot;,&quot;colophon&quot;,&quot;about&quot;);</span><br><span class="line"></span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            String rPage = pages.get(new Random().nextInt(pages.size()));</span><br><span class="line">            String rName = names.get(new Random().nextInt(names.size()));</span><br><span class="line">            PageViewEvent pageViewEvent = new PageViewEvent(rName,rPage,Math.random() &gt; .5?10:1000);</span><br><span class="line">            Message&lt;PageViewEvent&gt; message = MessageBuilder.withPayload(pageViewEvent)</span><br><span class="line">                .setHeader(KafkaHeaders.MESSAGE_KEY,pageViewEvent.getUserId().getBytes())</span><br><span class="line">                .build();</span><br><span class="line">            try &#123;</span><br><span class="line">                this.pageViewsOut.send(message);</span><br><span class="line">                log.info(&quot;sent&quot; + message.toString());</span><br><span class="line">            &#125; catch (Exception e)&#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(runnable,1,1, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="processor"><a href="#processor" class="headerlink" title="processor"></a>processor</h4><p>获取到事件数据之后基于聚合处理，创建新的数据流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class PageViewEventProcessor &#123;</span><br><span class="line">    @StreamListener</span><br><span class="line">    @SendTo(AnalyticsBinding.PAGE_COUNT_OUT)</span><br><span class="line">    public  KStream&lt;String,Long&gt; process(</span><br><span class="line">            @Input(AnalyticsBinding.PAGE_VIEWS_IN) KStream&lt;String,PageViewEvent&gt; events)&#123;</span><br><span class="line">        return events</span><br><span class="line">                .map((key,value) -&gt; new KeyValue&lt;&gt;(value.getUserId() + &quot;-&quot; + value.getPage(),&quot;0&quot;))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                //.windowedBy(TimeWindows.of(1000*60)) </span><br><span class="line">                .count(Materialized.as(AnalyticsBinding.PAGE_COUNT_MV))</span><br><span class="line">                .toStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>windowedBy可以根据时间窗口进行聚合，用法请详见文档。  </p><h4 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h4><p>获取聚合后的结果进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class PageCountSink &#123;</span><br><span class="line"></span><br><span class="line">    @StreamListener</span><br><span class="line">    public void process(@Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt; counts)&#123;</span><br><span class="line">        counts.toStream().foreach((key,value) -&gt; log.info(&quot;PCIN -----:&quot; + key + &quot;=&quot; + value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此一个从数据生产到结果消费的简单数据流处理就完成了</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>这个例子是基于spring cloud 完整的流数据处理，有source,processor,sink的概念是spring cloud data flow的设计理念，这里不展开阐述。<br>processor环节非必需的，可以只有source和sink的实现。<br>假如不需要进行流的处理，只需要消息内容，可以在@StreamListener的方法声明中不使用@Input声明，而是直接通过@StreamListener(主题名称)来进行监听，<br>方法接收消息参数使用Message<t> msg，如下:</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@StreamListener(Processor.INPUT)</span><br><span class="line">public void receive1(Message&lt;String&gt; msg)&#123;</span><br><span class="line">System.out.println(msg.getPayload()); //消息体</span><br><span class="line">Acknowledgment acknowledgment = msg.getHeaders().get(KafkaHeaders.ACKNOWLEDGMENT, Acknowledgment.class);</span><br><span class="line">if (acknowledgment != null) &#123;</span><br><span class="line">System.out.println(&quot;Acknowledgment provided&quot;);</span><br><span class="line">acknowledgment.acknowledge();//手动ack</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多流聚合"><a href="#多流聚合" class="headerlink" title="多流聚合"></a>多流聚合</h4><p>在实际应用中不只存在单流数据的处理，也经常会遇到多流聚合处理。<br>我们来添加多一种事件的实现，这里模拟销售数据。相关的实现如下  </p><p>SalesEvent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class SalesEvent &#123;</span><br><span class="line">    private String userId,goods;</span><br><span class="line">    private int amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SalesEventSource<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SalesEventSource implements ApplicationRunner &#123;</span><br><span class="line">    private  final MessageChannel salesOut;</span><br><span class="line"></span><br><span class="line">    public SalesEventSource(AnalyticsBinding binding) &#123;</span><br><span class="line">        this.salesOut = binding.salesOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(&quot;jlong&quot;,&quot;dyser&quot;,&quot;shacko&quot;,&quot;abilan&quot;,&quot;ooasdf&quot;,&quot;grussell&quot;);</span><br><span class="line">        List&lt;String&gt; goods = Arrays.asList(&quot;apple&quot;,&quot;oringe&quot;,&quot;banana&quot;,&quot;lemon&quot;,&quot;shit&quot;,&quot;book&quot;);</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            String rGoods = goods.get(new Random().nextInt(goods.size()));</span><br><span class="line">            String rName = names.get(new Random().nextInt(names.size()));</span><br><span class="line">            SalesEvent salesEvent = new SalesEvent(rName,rGoods,Math.random() &gt; .5?5:10);</span><br><span class="line">            Message&lt;SalesEvent&gt; message = MessageBuilder.withPayload(salesEvent)</span><br><span class="line">                    .setHeader(KafkaHeaders.MESSAGE_KEY,salesEvent.getUserId().getBytes())</span><br><span class="line">                    .build();</span><br><span class="line">            try &#123;</span><br><span class="line">                this.salesOut.send(message);</span><br><span class="line">                log.info(&quot;sent&quot; + message.toString());</span><br><span class="line">            &#125; catch (Exception e)&#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(runnable,1,1, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SalesEventProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SalesEventProcessor &#123;</span><br><span class="line">    @StreamListener</span><br><span class="line">    @SendTo(AnalyticsBinding.SALES_COUNT_OUT)</span><br><span class="line">    public KStream&lt;String,Long&gt; process(@Input(AnalyticsBinding.SALES_IN)KStream&lt;String,SalesEvent&gt; events)&#123;</span><br><span class="line">        return events</span><br><span class="line">                .map((key,value) -&gt; new KeyValue&lt;&gt;(value.getUserId() + &quot;-&quot; + value.getGoods(),&quot;0&quot;))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                //.windowedBy(TimeWindows.of(1000*60))</span><br><span class="line">                .count(Materialized.as(AnalyticsBinding.SALES_COUNT_MV))</span><br><span class="line">                .toStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SaleCountSink<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@EnableBinding(AnalyticsBinding.class)</span><br><span class="line">public class SaleCountSink &#123;</span><br><span class="line"></span><br><span class="line">    @StreamListener</span><br><span class="line">    public void process(@Input(AnalyticsBinding.SALES_COUNT_IN)KTable&lt;String,Long&gt; salesCounts,</span><br><span class="line">                        @Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt; pageCounts)&#123;</span><br><span class="line">        salesCounts.toStream().map((k,v) -&gt; new KeyValue&lt;&gt;(k.split(&quot;-&quot;)[0],k.split(&quot;-&quot;)[1] + &quot;-&quot; + v))</span><br><span class="line">                .join(pageCounts.toStream().map((k,v) -&gt; &#123;</span><br><span class="line">                            System.out.println(&quot;-------&quot; + k +&quot; : &quot; + v );</span><br><span class="line">                            return new KeyValue&lt;&gt;(k.split(&quot;-&quot;)[0],k.split(&quot;-&quot;)[1] + &quot;-&quot; + v);&#125;),</span><br><span class="line">                        (v1, v2) -&gt; v1 + &quot;:&quot; + v2,</span><br><span class="line">                        JoinWindows.of(10000)</span><br><span class="line">                        )</span><br><span class="line">                .foreach((k,v) -&gt; System.out.println(k+ &quot;---&quot; + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：同个应用中对同个流的监听实例只能有一个，SaleCountSink使用了@Input(AnalyticsBinding.PAGE_COUNT_IN)KTable&lt;String,Long&gt;<br>与PageCountSink有冲突，要嘛把PageCountSink中的监听去掉，要嘛重命名其中一个相关的监听配置</p><p>AnalyticsBinding 完整代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public interface AnalyticsBinding &#123;</span><br><span class="line">    String PAGE_VIEWS_OUT = &quot;pvout&quot;;</span><br><span class="line">    String PAGE_VIEWS_IN = &quot;pvin&quot;;</span><br><span class="line">    String PAGE_COUNT_MV = &quot;pcmv&quot;;</span><br><span class="line">    String PAGE_COUNT_OUT = &quot;pcout&quot;;</span><br><span class="line">    String PAGE_COUNT_IN = &quot;pcin&quot;;</span><br><span class="line">    String SALES_OUT = &quot;salesout&quot;;</span><br><span class="line">    String SALES_IN = &quot;salesin&quot;;</span><br><span class="line">    String SALES_COUNT_MV = &quot;scmv&quot;;</span><br><span class="line">    String SALES_COUNT_OUT = &quot;scout&quot;;</span><br><span class="line">    String SALES_COUNT_IN = &quot;scin&quot;;</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_VIEWS_IN)</span><br><span class="line">    KStream&lt;String,PageViewEvent&gt; pageViewsIn();</span><br><span class="line"></span><br><span class="line">    @Output(PAGE_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; pageCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(PAGE_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; pageCountIn();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Output(PAGE_VIEWS_OUT)</span><br><span class="line">    MessageChannel pageViewsOut();</span><br><span class="line"></span><br><span class="line">    @Output(SALES_OUT)</span><br><span class="line">    MessageChannel salesOut();</span><br><span class="line"></span><br><span class="line">    @Input(SALES_IN)</span><br><span class="line">    KStream&lt;String,SalesEvent&gt; salesIn();</span><br><span class="line"></span><br><span class="line">    @Output(SALES_COUNT_OUT)</span><br><span class="line">    KStream&lt;String,Long&gt; salesCountOut();</span><br><span class="line"></span><br><span class="line">    @Input(SALES_COUNT_IN)</span><br><span class="line">    KTable&lt;String,Long&gt; salesCountIn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>application.yml完整配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8388</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: input-demo</span><br><span class="line">  cloud:</span><br><span class="line">     instance-count: 1</span><br><span class="line">     instance-index: 0</span><br><span class="line">     stream:</span><br><span class="line">        bindings:</span><br><span class="line">          pvout:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pvin:</span><br><span class="line">            destination: pvst</span><br><span class="line">            group: pvst</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          pcout:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          pcin:</span><br><span class="line">            destination: pcst</span><br><span class="line">            group: pcst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">          salesout:</span><br><span class="line">            destination: sost</span><br><span class="line">            group: sost</span><br><span class="line">            producer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          salesin:</span><br><span class="line">            destination: sost</span><br><span class="line">            group: sost</span><br><span class="line">            consumer:</span><br><span class="line">              header-mode: raw</span><br><span class="line">          scout:</span><br><span class="line">            destination: scst</span><br><span class="line">            group: scst</span><br><span class="line">            producer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">          scin:</span><br><span class="line">            destination: scst</span><br><span class="line">            group: scst</span><br><span class="line">            content-type: application/json</span><br><span class="line">            consumer:</span><br><span class="line">              use-native-encoding: true</span><br><span class="line">              header-mode: raw</span><br><span class="line">        kafka:</span><br><span class="line">          streams:</span><br><span class="line">            binder:</span><br><span class="line">              configuration:</span><br><span class="line">                default:</span><br><span class="line">                  key:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value:</span><br><span class="line">                    serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                cache:</span><br><span class="line">                  max:</span><br><span class="line">                    bytes:</span><br><span class="line">                      buffering: 0</span><br><span class="line">                commit:</span><br><span class="line">                  interval:</span><br><span class="line">                    ms: 1000 </span><br><span class="line">              brokers: localhost:9092</span><br><span class="line">              zk-nodes: localhost:2181</span><br><span class="line">            bindings:</span><br><span class="line">              pcout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              pcin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde         </span><br><span class="line">              scout:</span><br><span class="line">                producer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br><span class="line">              scin:</span><br><span class="line">                consumer:</span><br><span class="line">                  key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde</span><br><span class="line">                  value-serde: org.apache.kafka.common.serialization.Serdes$LongSerde</span><br></pre></td></tr></table></figure></p><p>多流合并的理念是把流两两之间的key处理成一样进行join处理，join的实现方法大家可以自行阅读文档。如果是三个流以上，需要先将两个流合并之后生成一个流再与第三流合并处理。</p><h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><ul><li><a href="https://docs.spring.io/spring-cloud-dataflow/docs/1.6.0.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">spring cloud data flow</a></li><li><a href="https://docs.spring.io/spring-cloud-stream/docs/Brooklyn.RELEASE/reference/html/index.html" target="_blank" rel="noopener">spring cloud stream</a></li><li><a href="https://spring.io/blog/2018/04/04/spring-tips-spring-cloud-stream-kafka-streams" target="_blank" rel="noopener">spring cloud stream kafka streams应用官方视频讲解</a></li><li><a href="https://www.jianshu.com/p/45ba430e59f6" target="_blank" rel="noopener">KTable与KStream的关系</a></li><li><a href="http://kafka.apache.org/documentation/" target="_blank" rel="noopener">kafka官方文档</a></li><li><a href="https://www.cnblogs.com/devos/p/5616086.html" target="_blank" rel="noopener">kafka streams window的概念翻译版</a></li><li>kafka权威指南</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;流式数据&quot;&gt;&lt;a href=&quot;#流式数据&quot; class=&quot;headerlink&quot; title=&quot;流式数据&quot;&gt;&lt;/a&gt;流式数据&lt;/h4&gt;&lt;p&gt;故名思义，即数据像开了小河里的流水般不停流动，除非水源出现问题，否则没有结束时间。&lt;br&gt;流式数据在行业内已经有非常多针对不
      
    
    </summary>
    
      <category term="大数据" scheme="https://super-sean.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="实时流" scheme="https://super-sean.github.io/tags/%E5%AE%9E%E6%97%B6%E6%B5%81/"/>
    
      <category term="spring" scheme="https://super-sean.github.io/tags/spring/"/>
    
      <category term="kafka" scheme="https://super-sean.github.io/tags/kafka/"/>
    
  </entry>
  
</feed>
