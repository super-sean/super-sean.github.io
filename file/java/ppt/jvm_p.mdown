# jvm实践

 ---

# 实践点
- jvm 启动参数
- 常用工具
- 内存分配与回收策略
- GC注意事项与配置
- 远程连接虚拟机调试

---

# jvm 启动参数

---

# 标准参数
- -client :设置JVM使用client模式,特点启动较快(配置好的机器不明显(I5/8G/SSD))
- -server :设置JVM使用server模式。64位JDK默认启动该模式
- -agentlib:libname[=options] :用于加载本地的lib
- -agentlib:hprof :用于获取JVM的运行情况,比如堆内存-agentlib:hprof=heap=sites
- -agentpath:pathnamep[=options] :加载制定路径的本地库
- -Dproperty=value :设置系统属性名/值对
- -jar :制定以jar包的形式执行一个应用程序
- -javaagent:jarpath[=options] :实现premain方法在main方法前执行可以利用该方式玩一个JVM层面的hook很有意思的东西
- -verbose:jni :输出native方法的调用情况玩JNI必备技能

---

# 调试参数
- -Xdebug
- -Xnoagent
- -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
- -XX:HeapDumpPath=./java_pid.hprof :Path to directory or file name for heap dump.
- -XX:-PrintConcurrentLocks :Print java.util.concurrent locks in Ctrl-Break thread dump.
- -XX:-PrintCommandLineFlags :Print flags that appeared on the command line.

---

# 堆栈内存相关参数
[jvm结构](../../../img/jvm结构.png)

- -Xms :设置Java堆栈的初始化大小
- -Xmx :设置最大的java堆大小
- -Xmn :设置Young区大小
- -Xss :设置java线程堆栈大小
- -XX:PermSize and MaxPermSize :设置持久代的大小
- -XX:NewRatio :设置年轻代和老年代的比值
- -XX:NewSize :设置年轻代的大小
- -XX:SurvivorRation=n :设置年轻代中E去与俩个S去的比值

---

# GC相关参数
- -verbose:gc :记录GC运行以及运行时间,一般用来查看GC是否有瓶颈
- -XX:+PrintGCDetails :记录GC运行时的详细数据信息，包括新生占用的内存大小及消耗时间
- -XX:-PrintGCTimeStamps :打印收集的时间戳
- -XX:+UseParallelGC :使用并行垃圾收集器
- -XX:-UseConcMarkSweepGC :使用并发标志扫描收集器
- -XX:-UseSerialGC :使用串行垃圾收集器
- -Xloggc:filename :设置GC记录的文件
- -XX:+UseGCLogFileRotation :启用GC日志文件的自动转储
- -XX:GCLogFileSize=1M :控制GC日志文件的大小

---

# 常用工具
- jps
- jstat
- jinfo
- jmap
- jhat
- jstack

---

# 内存分配及回收策略

---

# 内存分配

- 对象优化在Eden分配
    + Minor GC
- 大对象直接进入老年代
    + MajorGC/FullGC
    + 大量连续内存容量的Java对象
- 长期存活对象将进入老年代
    + 对象年龄计数器 Age
- 动态对象根据年龄调整
    + 在Survivor空间相同年龄所有对象大小总和大于Survivor空间一半就会进入老年代

---

# 回收策略

对象可回收判断算法

- 引用计数
- 可达性分析算法（一次标记，二次回收）

垃圾回收算法

- 标记-清除
- 复制 （新生代）
- 标记-整理 （老年代）
- 分代收集

---

# GC注意事项与配置

---

# 开启/关闭GC日志
- jinfo -flag 
- -Xloggc:filename
- PrintGCDetails
- PrintGC

---

# 理解GC日志

[代码示例](file/java/code/gc/ReferenceCountingGC.java)
-XX:+PrintGCDateStamps -XX:+PrintGCDetails 

    !python
    2017-07-18T22:48:35.252-0800: [GC (System.gc()) [PSYoungGen: 8028K->576K(76288K)] 8028K->584K(251392K), 0.0007054 secs] 
    [Times: user=0.01 sys=0.00, real=0.00 secs]
    2017-07-18T22:48:35.253-0800: [Full GC (System.gc()) [PSYoungGen: 576K->0K(76288K)] [ParOldGen: 8K->430K(175104K)] 584K->430K(251392K), 
    [Metaspace: 2728K->2728K(1056768K)], 0.0038091 secs] [Times: user=0.02 sys=0.00, real=0.00 secs]
    Heap
    PSYoungGen      total 76288K, used 655K [0x000000076ab00000, 0x0000000770000000, 0x00000007c0000000)
    eden space 65536K, 1% used [0x000000076ab00000,0x000000076aba3ee8,0x000000076eb00000)
    from space 10752K, 0% used [0x000000076eb00000,0x000000076eb00000,0x000000076f580000)
    to   space 10752K, 0% used [0x000000076f580000,0x000000076f580000,0x0000000770000000)
    ParOldGen       total 175104K, used 430K [0x00000006c0000000, 0x00000006cab00000, 0x000000076ab00000)
    object space 175104K, 0% used [0x00000006c0000000,0x00000006c006b810,0x00000006cab00000)
    Metaspace       used 2734K, capacity 4486K, committed 4864K, reserved 1056768K
    class space    used 298K, capacity 386K, committed 512K, reserved 1048576K

---

# FULL GC = Stop The World
- System.gc()方法的调用
- 老年代代空间不足
- 永生区空间不足
- CMS GC时出现promotion failed和concurrent mode failure
- 统计得到的Minor GC晋升到旧生代的平均大小大于老年代的剩余空间
- 堆中分配很大的对象，没有连续内存空间可分配时

---

# GC最简优化策略-新生代
    -XX:+UseAdaptiveSizePolicy GC自适应调节策略 不需要手工指定新生代、老年代等各种内存参数大小
    设置了该参数后，只需要设置基本内存数据，设置好最大收集停顿时间或者吞吐量就可以了

    -XX:MaxGCPauseMillis=200 - 设置最大GC停顿时间(GC pause time)指标(target).
    这是一个软性指标(soft goal), JVM 会尽力去达成这个目标. 所以有时候这个目标并不能达成.
    默认值为 200 毫秒.
    暂停时间越短算法越好

    -XX:GCTimeRatio=99 吞吐量为垃圾回收时间与非垃圾回收时间的比值
    默认情况为99，即1%的时间用于垃圾回收
    吞吐量越高算法越好

---

# 远程连接虚拟机调试

---

# jvisualvm
[参考文档](https://my.oschina.net/heroShane/blog/196227)
在启动Java程序的时候手动开启jmx remote功能

    !python
    java -Dcom.sun.management.jmxremote 
    -Dcom.sun.management.jmxremote.port=<port>
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.local.only=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -Djava.rmi.server.hostname=<ip> 
    -Xms128M -Xmx512M -cp .:lib/* com.laimi.data.Main 

除了JMX server指定的监听端口号外，JMXserver还会监听一到两个随机端口号

---

# Thank You!

